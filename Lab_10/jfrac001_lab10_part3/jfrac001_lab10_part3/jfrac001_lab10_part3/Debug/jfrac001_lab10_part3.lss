
jfrac001_lab10_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000748  000007dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000748  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  00800106  00800106  000007e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000814  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000854  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e70  00000000  00000000  0000090c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000919  00000000  00000000  0000177c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006fc  00000000  00000000  00002095  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000019c  00000000  00000000  00002794  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000638  00000000  00000000  00002930  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000030a  00000000  00000000  00002f68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00003272  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	e0 c0       	rjmp	.+448    	; 0x1f6 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e4       	ldi	r30, 0x48	; 72
  a0:	f7 e0       	ldi	r31, 0x07	; 7
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e0       	ldi	r26, 0x06	; 6
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a9 31       	cpi	r26, 0x19	; 25
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	a2 d1       	rcall	.+836    	; 0x408 <main>
  c4:	3f c3       	rjmp	.+1662   	; 0x744 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <set_PWM>:
	TCCR1B = 0x00; 
}


void TimerISR() {
	TimerFlag = 1;
  c8:	cf 92       	push	r12
  ca:	df 92       	push	r13
  cc:	ef 92       	push	r14
  ce:	ff 92       	push	r15
  d0:	6b 01       	movw	r12, r22
  d2:	7c 01       	movw	r14, r24
  d4:	9b 01       	movw	r18, r22
  d6:	ac 01       	movw	r20, r24
  d8:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <__data_end>
  dc:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <__data_end+0x1>
  e0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end+0x2>
  e4:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x3>
  e8:	b4 d1       	rcall	.+872    	; 0x452 <__cmpsf2>
  ea:	88 23       	and	r24, r24
  ec:	09 f4       	brne	.+2      	; 0xf0 <set_PWM+0x28>
  ee:	4f c0       	rjmp	.+158    	; 0x18e <set_PWM+0xc6>
  f0:	20 e0       	ldi	r18, 0x00	; 0
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	a9 01       	movw	r20, r18
  f6:	c7 01       	movw	r24, r14
  f8:	b6 01       	movw	r22, r12
  fa:	ab d1       	rcall	.+854    	; 0x452 <__cmpsf2>
  fc:	81 11       	cpse	r24, r1
  fe:	06 c0       	rjmp	.+12     	; 0x10c <set_PWM+0x44>
 100:	e1 e9       	ldi	r30, 0x91	; 145
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	88 70       	andi	r24, 0x08	; 8
 108:	80 83       	st	Z, r24
 10a:	05 c0       	rjmp	.+10     	; 0x116 <set_PWM+0x4e>
 10c:	e1 e9       	ldi	r30, 0x91	; 145
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	83 60       	ori	r24, 0x03	; 3
 114:	80 83       	st	Z, r24
 116:	28 e5       	ldi	r18, 0x58	; 88
 118:	39 e3       	ldi	r19, 0x39	; 57
 11a:	44 e7       	ldi	r20, 0x74	; 116
 11c:	5f e3       	ldi	r21, 0x3F	; 63
 11e:	c7 01       	movw	r24, r14
 120:	b6 01       	movw	r22, r12
 122:	97 d1       	rcall	.+814    	; 0x452 <__cmpsf2>
 124:	88 23       	and	r24, r24
 126:	3c f4       	brge	.+14     	; 0x136 <set_PWM+0x6e>
 128:	8f ef       	ldi	r24, 0xFF	; 255
 12a:	9f ef       	ldi	r25, 0xFF	; 255
 12c:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 130:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 134:	23 c0       	rjmp	.+70     	; 0x17c <set_PWM+0xb4>
 136:	20 e0       	ldi	r18, 0x00	; 0
 138:	34 e2       	ldi	r19, 0x24	; 36
 13a:	44 ef       	ldi	r20, 0xF4	; 244
 13c:	56 e4       	ldi	r21, 0x46	; 70
 13e:	c7 01       	movw	r24, r14
 140:	b6 01       	movw	r22, r12
 142:	99 d2       	rcall	.+1330   	; 0x676 <__gesf2>
 144:	18 16       	cp	r1, r24
 146:	2c f4       	brge	.+10     	; 0x152 <set_PWM+0x8a>
 148:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 14c:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 150:	15 c0       	rjmp	.+42     	; 0x17c <set_PWM+0xb4>
 152:	20 e0       	ldi	r18, 0x00	; 0
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	40 e0       	ldi	r20, 0x00	; 0
 158:	53 e4       	ldi	r21, 0x43	; 67
 15a:	c7 01       	movw	r24, r14
 15c:	b6 01       	movw	r22, r12
 15e:	8f d2       	rcall	.+1310   	; 0x67e <__mulsf3>
 160:	9b 01       	movw	r18, r22
 162:	ac 01       	movw	r20, r24
 164:	60 e0       	ldi	r22, 0x00	; 0
 166:	74 e2       	ldi	r23, 0x24	; 36
 168:	84 ef       	ldi	r24, 0xF4	; 244
 16a:	9a e4       	ldi	r25, 0x4A	; 74
 16c:	76 d1       	rcall	.+748    	; 0x45a <__divsf3>
 16e:	dd d1       	rcall	.+954    	; 0x52a <__fixsfsi>
 170:	61 50       	subi	r22, 0x01	; 1
 172:	71 09       	sbc	r23, r1
 174:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 178:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 17c:	16 bc       	out	0x26, r1	; 38
 17e:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <__data_end>
 182:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <__data_end+0x1>
 186:	e0 92 08 01 	sts	0x0108, r14	; 0x800108 <__data_end+0x2>
 18a:	f0 92 09 01 	sts	0x0109, r15	; 0x800109 <__data_end+0x3>
 18e:	ff 90       	pop	r15
 190:	ef 90       	pop	r14
 192:	df 90       	pop	r13
 194:	cf 90       	pop	r12
 196:	08 95       	ret

00000198 <PWM_on>:
 198:	80 e4       	ldi	r24, 0x40	; 64
 19a:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
 19e:	8b e0       	ldi	r24, 0x0B	; 11
 1a0:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
 1a4:	60 e0       	ldi	r22, 0x00	; 0
 1a6:	70 e0       	ldi	r23, 0x00	; 0
 1a8:	cb 01       	movw	r24, r22
 1aa:	8e cf       	rjmp	.-228    	; 0xc8 <set_PWM>
 1ac:	08 95       	ret

000001ae <TimerOn>:
 1ae:	8b e0       	ldi	r24, 0x0B	; 11
 1b0:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 1b4:	8d e7       	ldi	r24, 0x7D	; 125
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1bc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 1c0:	82 e0       	ldi	r24, 0x02	; 2
 1c2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 1c6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 1ca:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 1ce:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_avr_timer_M>
 1d2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_avr_timer_M+0x1>
 1d6:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <_avr_timer_M+0x2>
 1da:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <_avr_timer_M+0x3>
 1de:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <_avr_timer_cntcurr>
 1e2:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <_avr_timer_cntcurr+0x1>
 1e6:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <_avr_timer_cntcurr+0x2>
 1ea:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <_avr_timer_cntcurr+0x3>
 1ee:	8f b7       	in	r24, 0x3f	; 63
 1f0:	80 68       	ori	r24, 0x80	; 128
 1f2:	8f bf       	out	0x3f, r24	; 63
 1f4:	08 95       	ret

000001f6 <__vector_13>:
}


ISR(TIMER1_COMPA_vect) {
 1f6:	1f 92       	push	r1
 1f8:	0f 92       	push	r0
 1fa:	0f b6       	in	r0, 0x3f	; 63
 1fc:	0f 92       	push	r0
 1fe:	11 24       	eor	r1, r1
 200:	8f 93       	push	r24
 202:	9f 93       	push	r25
 204:	af 93       	push	r26
 206:	bf 93       	push	r27
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
 208:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <_avr_timer_cntcurr>
 20c:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <_avr_timer_cntcurr+0x1>
 210:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <_avr_timer_cntcurr+0x2>
 214:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <_avr_timer_cntcurr+0x3>
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	a1 09       	sbc	r26, r1
 21c:	b1 09       	sbc	r27, r1
 21e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <_avr_timer_cntcurr>
 222:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <_avr_timer_cntcurr+0x1>
 226:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <_avr_timer_cntcurr+0x2>
 22a:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
 22e:	89 2b       	or	r24, r25
 230:	8a 2b       	or	r24, r26
 232:	8b 2b       	or	r24, r27
 234:	99 f4       	brne	.+38     	; 0x25c <__vector_13+0x66>
	TCCR1B = 0x00; 
}


void TimerISR() {
	TimerFlag = 1;
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <TimerFlag>

ISR(TIMER1_COMPA_vect) {
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
		TimerISR(); // Call the ISR that the user uses
		_avr_timer_cntcurr = _avr_timer_M;
 23c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_avr_timer_M>
 240:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_avr_timer_M+0x1>
 244:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <_avr_timer_M+0x2>
 248:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <_avr_timer_M+0x3>
 24c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <_avr_timer_cntcurr>
 250:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <_avr_timer_cntcurr+0x1>
 254:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <_avr_timer_cntcurr+0x2>
 258:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <_avr_timer_cntcurr+0x3>
	}
}
 25c:	bf 91       	pop	r27
 25e:	af 91       	pop	r26
 260:	9f 91       	pop	r25
 262:	8f 91       	pop	r24
 264:	0f 90       	pop	r0
 266:	0f be       	out	0x3f, r0	; 63
 268:	0f 90       	pop	r0
 26a:	1f 90       	pop	r1
 26c:	18 95       	reti

0000026e <TimerSet>:


// Set TimerISR() to tick every M ms

void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 26e:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <_avr_timer_M>
 272:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <_avr_timer_M+0x1>
 276:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_avr_timer_M+0x2>
 27a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <_avr_timer_M+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 27e:	60 93 10 01 	sts	0x0110, r22	; 0x800110 <_avr_timer_cntcurr>
 282:	70 93 11 01 	sts	0x0111, r23	; 0x800111 <_avr_timer_cntcurr+0x1>
 286:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <_avr_timer_cntcurr+0x2>
 28a:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <_avr_timer_cntcurr+0x3>
 28e:	08 95       	ret

00000290 <SM_threeLED>:
enum combineLED_states {Init2, out} combineLED_state;
enum speaker_states {Init3, wait, speaker_on, speaker_off} speaker_state;

void SM_threeLED(){
	
	switch(threeLED_state)	{		//State Transitions
 290:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <threeLED_state>
 294:	81 30       	cpi	r24, 0x01	; 1
 296:	51 f0       	breq	.+20     	; 0x2ac <SM_threeLED+0x1c>
 298:	28 f0       	brcs	.+10     	; 0x2a4 <SM_threeLED+0x14>
 29a:	82 30       	cpi	r24, 0x02	; 2
 29c:	89 f0       	breq	.+34     	; 0x2c0 <SM_threeLED+0x30>
 29e:	83 30       	cpi	r24, 0x03	; 3
 2a0:	c9 f0       	breq	.+50     	; 0x2d4 <SM_threeLED+0x44>
 2a2:	22 c0       	rjmp	.+68     	; 0x2e8 <SM_threeLED+0x58>
		case(Init0):
			threeLED_state = LED1;
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <threeLED_state>
			break;
 2aa:	21 c0       	rjmp	.+66     	; 0x2ee <SM_threeLED+0x5e>
		
		case(LED1):
			if(cnt < 150){
 2ac:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <cnt>
 2b0:	86 39       	cpi	r24, 0x96	; 150
 2b2:	e8 f0       	brcs	.+58     	; 0x2ee <SM_threeLED+0x5e>
				threeLED_state = LED1;
			}
			else{
				cnt = 0x00;
 2b4:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <cnt>
				threeLED_state = LED2;
 2b8:	82 e0       	ldi	r24, 0x02	; 2
 2ba:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <threeLED_state>
 2be:	20 c0       	rjmp	.+64     	; 0x300 <SM_threeLED+0x70>
			}
			break;
		
		case(LED2):
			if(cnt < 150){
 2c0:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <cnt>
 2c4:	86 39       	cpi	r24, 0x96	; 150
 2c6:	e0 f0       	brcs	.+56     	; 0x300 <SM_threeLED+0x70>
				threeLED_state = LED2;
			}
			else{
				cnt = 0x00;
 2c8:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <cnt>
				threeLED_state = LED3;
 2cc:	83 e0       	ldi	r24, 0x03	; 3
 2ce:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <threeLED_state>
 2d2:	1f c0       	rjmp	.+62     	; 0x312 <SM_threeLED+0x82>
			}
			break;
			
		case(LED3):
			if(cnt < 150){
 2d4:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <cnt>
 2d8:	86 39       	cpi	r24, 0x96	; 150
 2da:	d8 f0       	brcs	.+54     	; 0x312 <SM_threeLED+0x82>
				threeLED_state = LED3;
			}
			else{
				cnt = 0x00;
 2dc:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <cnt>
				threeLED_state = LED1;
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <threeLED_state>
 2e6:	03 c0       	rjmp	.+6      	; 0x2ee <SM_threeLED+0x5e>
			}
			break;
		
		default:
			threeLED_state = Init0;
 2e8:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <threeLED_state>
			break;
		
		default: 
			break;
	}
}
 2ec:	08 95       	ret
	switch(threeLED_state){		//State Actions
		case(Init0):
			break;
		
		case(LED1):
			threeLED = 0x01;
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <threeLED>
			cnt++;
 2f4:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <cnt>
 2f8:	8f 5f       	subi	r24, 0xFF	; 255
 2fa:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <cnt>
			break;
 2fe:	08 95       	ret
		
		case(LED2):
			threeLED = 0x02;
 300:	82 e0       	ldi	r24, 0x02	; 2
 302:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <threeLED>
			cnt++;
 306:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <cnt>
 30a:	8f 5f       	subi	r24, 0xFF	; 255
 30c:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <cnt>
			break;
 310:	08 95       	ret
		
		case(LED3):
			threeLED=0x04;
 312:	84 e0       	ldi	r24, 0x04	; 4
 314:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <threeLED>
			cnt++;
 318:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <cnt>
 31c:	8f 5f       	subi	r24, 0xFF	; 255
 31e:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <cnt>
 322:	08 95       	ret

00000324 <SM_blinkingLED>:
	}
}

void SM_blinkingLED(){
	
	switch(blinkLED_state)	{		//State Transitions
 324:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <blinkLED_state>
 328:	81 30       	cpi	r24, 0x01	; 1
 32a:	79 f0       	breq	.+30     	; 0x34a <SM_blinkingLED+0x26>
 32c:	18 f0       	brcs	.+6      	; 0x334 <SM_blinkingLED+0x10>
 32e:	82 30       	cpi	r24, 0x02	; 2
 330:	a9 f0       	breq	.+42     	; 0x35c <SM_blinkingLED+0x38>
 332:	04 c0       	rjmp	.+8      	; 0x33c <SM_blinkingLED+0x18>
		case(Init1):
			blinkLED_state = LED_on;
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <blinkLED_state>
			break;
 33a:	07 c0       	rjmp	.+14     	; 0x34a <SM_blinkingLED+0x26>
				blinkLED_state = LED_on;
			}
			break;
		
		default:
			blinkLED_state = Init1;
 33c:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <blinkLED_state>
			break;
	}
	
	switch(blinkLED_state){		//State Actions
		case(Init1):
			cnt0 = 0x00;
 340:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <cnt0>
			blinkingLED = 0x00;
 344:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <blinkingLED>
			break;
		
		default:
			break;
	}
}
 348:	08 95       	ret
			cnt0 = 0x00;
			blinkingLED = 0x00;
			break;
		
		case(LED_on):
			blinkingLED = 0x08;
 34a:	88 e0       	ldi	r24, 0x08	; 8
 34c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <blinkingLED>
			cnt0++;
 350:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <cnt0>
 354:	8f 5f       	subi	r24, 0xFF	; 255
 356:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <cnt0>
			break;
 35a:	08 95       	ret
		
		case(LED_off):
			blinkingLED = 0x00;
 35c:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <blinkingLED>
			cnt0++;
 360:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <cnt0>
 364:	8f 5f       	subi	r24, 0xFF	; 255
 366:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <cnt0>
 36a:	08 95       	ret

0000036c <SM_combineLED>:
			break;
	}
}

void SM_combineLED(){
	switch(combineLED_state)	{		//State Transitions
 36c:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <combineLED_state>
 370:	88 23       	and	r24, r24
 372:	19 f0       	breq	.+6      	; 0x37a <SM_combineLED+0xe>
 374:	81 30       	cpi	r24, 0x01	; 1
 376:	51 f0       	breq	.+20     	; 0x38c <SM_combineLED+0x20>
 378:	04 c0       	rjmp	.+8      	; 0x382 <SM_combineLED+0x16>
		case(Init2):
			combineLED_state = out;
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <combineLED_state>
			break;
 380:	05 c0       	rjmp	.+10     	; 0x38c <SM_combineLED+0x20>
		case(out):
			combineLED_state = out;
			break;
		
		default:
			combineLED_state = Init2;
 382:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <combineLED_state>
			break;
	}
	
	switch(combineLED_state){		//State Actions
		case(Init2):
			combineLED = 0x00;
 386:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <combineLED>
		
		default:
			combineLED = 0x00;
			break;
	}
}
 38a:	08 95       	ret
		case(Init2):
			combineLED = 0x00;
			break;
		
		case(out):
			combineLED = threeLED | blinkingLED;
 38c:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <threeLED>
 390:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <blinkingLED>
 394:	89 2b       	or	r24, r25
 396:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <combineLED>
			PORTB = combineLED;
 39a:	85 b9       	out	0x05, r24	; 5
 39c:	08 95       	ret

0000039e <SM_Speaker>:
	}
}

void SM_Speaker(){
	
	switching = PINA & 0x04;
 39e:	80 b1       	in	r24, 0x00	; 0
 3a0:	84 70       	andi	r24, 0x04	; 4
 3a2:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <switching>
	
	switch(speaker_state)	{		//State Transitions
 3a6:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <speaker_state>
 3aa:	92 30       	cpi	r25, 0x02	; 2
 3ac:	51 f0       	breq	.+20     	; 0x3c2 <SM_Speaker+0x24>
 3ae:	93 30       	cpi	r25, 0x03	; 3
 3b0:	a9 f0       	breq	.+42     	; 0x3dc <SM_Speaker+0x3e>
 3b2:	91 11       	cpse	r25, r1
 3b4:	1c c0       	rjmp	.+56     	; 0x3ee <SM_Speaker+0x50>
		case(Init3):
			if(!(switching & 0x04)){
 3b6:	88 23       	and	r24, r24
 3b8:	e1 f0       	breq	.+56     	; 0x3f2 <SM_Speaker+0x54>
				speaker_state = Init3;
			}
			else{
				speaker_state = speaker_on;
 3ba:	82 e0       	ldi	r24, 0x02	; 2
 3bc:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <speaker_state>
 3c0:	1d c0       	rjmp	.+58     	; 0x3fc <SM_Speaker+0x5e>
			}
			break;
		
		case(speaker_on):
			if(!(switching & 0x04)){
 3c2:	81 11       	cpse	r24, r1
 3c4:	03 c0       	rjmp	.+6      	; 0x3cc <SM_Speaker+0x2e>
				speaker_state = Init3;
 3c6:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <speaker_state>
 3ca:	13 c0       	rjmp	.+38     	; 0x3f2 <SM_Speaker+0x54>
			}
			else{
				speaker_state = speaker_off;
 3cc:	83 e0       	ldi	r24, 0x03	; 3
 3ce:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <speaker_state>
		case(speaker_on):
			set_PWM(261.62);
			break;
		
		case(speaker_off):
			set_PWM(0);
 3d2:	60 e0       	ldi	r22, 0x00	; 0
 3d4:	70 e0       	ldi	r23, 0x00	; 0
 3d6:	cb 01       	movw	r24, r22
 3d8:	77 ce       	rjmp	.-786    	; 0xc8 <set_PWM>
			break;
 3da:	08 95       	ret
				speaker_state = speaker_off;
			}
			break;
			
		case(speaker_off):
			if(!(switching & 0x04)){
 3dc:	81 11       	cpse	r24, r1
 3de:	03 c0       	rjmp	.+6      	; 0x3e6 <SM_Speaker+0x48>
				speaker_state = Init3;
 3e0:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <speaker_state>
 3e4:	06 c0       	rjmp	.+12     	; 0x3f2 <SM_Speaker+0x54>
			}
			else{
				speaker_state = speaker_on;
 3e6:	82 e0       	ldi	r24, 0x02	; 2
 3e8:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <speaker_state>
 3ec:	07 c0       	rjmp	.+14     	; 0x3fc <SM_Speaker+0x5e>
			}
			break;
		
		default:
			speaker_state = Init3;
 3ee:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <speaker_state>
			break;
	}
	
	switch(speaker_state)	{		//State Transitions
		case(Init3):
			set_PWM(0);
 3f2:	60 e0       	ldi	r22, 0x00	; 0
 3f4:	70 e0       	ldi	r23, 0x00	; 0
 3f6:	cb 01       	movw	r24, r22
 3f8:	67 ce       	rjmp	.-818    	; 0xc8 <set_PWM>
			break;
 3fa:	08 95       	ret
		
		case(speaker_on):
			set_PWM(261.62);
 3fc:	6c e5       	ldi	r22, 0x5C	; 92
 3fe:	7f ec       	ldi	r23, 0xCF	; 207
 400:	82 e8       	ldi	r24, 0x82	; 130
 402:	93 e4       	ldi	r25, 0x43	; 67
 404:	61 ce       	rjmp	.-830    	; 0xc8 <set_PWM>
 406:	08 95       	ret

00000408 <main>:



int main(void)
{
	DDRB = 0xFF; PORTB = 0x00;
 408:	8f ef       	ldi	r24, 0xFF	; 255
 40a:	84 b9       	out	0x04, r24	; 4
 40c:	15 b8       	out	0x05, r1	; 5
	DDRA = 0x00; PORTA = 0xFF;
 40e:	11 b8       	out	0x01, r1	; 1
 410:	82 b9       	out	0x02, r24	; 2
	
	TimerSet(time_count);
 412:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 416:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 41a:	80 e0       	ldi	r24, 0x00	; 0
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	27 df       	rcall	.-434    	; 0x26e <TimerSet>
	TimerOn();
 420:	c6 de       	rcall	.-628    	; 0x1ae <TimerOn>
	
	PWM_on();
 422:	ba de       	rcall	.-652    	; 0x198 <PWM_on>
 424:	60 e0       	ldi	r22, 0x00	; 0
	set_PWM(0);
 426:	70 e0       	ldi	r23, 0x00	; 0
 428:	cb 01       	movw	r24, r22
 42a:	4e de       	rcall	.-868    	; 0xc8 <set_PWM>
 42c:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <threeLED_state>

	threeLED_state = Init0;
 430:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <blinkLED_state>
	blinkLED_state = Init1;
 434:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <combineLED_state>
	combineLED_state = Init2;
	speaker_state = Init3;
 438:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <speaker_state>
	
	while (1)
	{
		SM_threeLED();
 43c:	29 df       	rcall	.-430    	; 0x290 <SM_threeLED>
		SM_blinkingLED();
 43e:	72 df       	rcall	.-284    	; 0x324 <SM_blinkingLED>
 440:	95 df       	rcall	.-214    	; 0x36c <SM_combineLED>
		SM_combineLED();
 442:	ad df       	rcall	.-166    	; 0x39e <SM_Speaker>
 444:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <TimerFlag>
		SM_Speaker();
 448:	88 23       	and	r24, r24
		
		while(!TimerFlag){}
 44a:	e1 f3       	breq	.-8      	; 0x444 <main+0x3c>
 44c:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <TimerFlag>
 450:	f5 cf       	rjmp	.-22     	; 0x43c <main+0x34>

00000452 <__cmpsf2>:
		TimerFlag = 0;
 452:	9c d0       	rcall	.+312    	; 0x58c <__fp_cmp>
 454:	08 f4       	brcc	.+2      	; 0x458 <__cmpsf2+0x6>
	}
 456:	81 e0       	ldi	r24, 0x01	; 1
 458:	08 95       	ret

0000045a <__divsf3>:
 45a:	0c d0       	rcall	.+24     	; 0x474 <__divsf3x>
 45c:	d2 c0       	rjmp	.+420    	; 0x602 <__fp_round>
 45e:	ca d0       	rcall	.+404    	; 0x5f4 <__fp_pscB>
 460:	40 f0       	brcs	.+16     	; 0x472 <__divsf3+0x18>
 462:	c1 d0       	rcall	.+386    	; 0x5e6 <__fp_pscA>
 464:	30 f0       	brcs	.+12     	; 0x472 <__divsf3+0x18>
 466:	21 f4       	brne	.+8      	; 0x470 <__divsf3+0x16>
 468:	5f 3f       	cpi	r21, 0xFF	; 255
 46a:	19 f0       	breq	.+6      	; 0x472 <__divsf3+0x18>
 46c:	b3 c0       	rjmp	.+358    	; 0x5d4 <__fp_inf>
 46e:	51 11       	cpse	r21, r1
 470:	fc c0       	rjmp	.+504    	; 0x66a <__fp_szero>
 472:	b6 c0       	rjmp	.+364    	; 0x5e0 <__fp_nan>

00000474 <__divsf3x>:
 474:	d7 d0       	rcall	.+430    	; 0x624 <__fp_split3>
 476:	98 f3       	brcs	.-26     	; 0x45e <__divsf3+0x4>

00000478 <__divsf3_pse>:
 478:	99 23       	and	r25, r25
 47a:	c9 f3       	breq	.-14     	; 0x46e <__divsf3+0x14>
 47c:	55 23       	and	r21, r21
 47e:	b1 f3       	breq	.-20     	; 0x46c <__divsf3+0x12>
 480:	95 1b       	sub	r25, r21
 482:	55 0b       	sbc	r21, r21
 484:	bb 27       	eor	r27, r27
 486:	aa 27       	eor	r26, r26
 488:	62 17       	cp	r22, r18
 48a:	73 07       	cpc	r23, r19
 48c:	84 07       	cpc	r24, r20
 48e:	38 f0       	brcs	.+14     	; 0x49e <__divsf3_pse+0x26>
 490:	9f 5f       	subi	r25, 0xFF	; 255
 492:	5f 4f       	sbci	r21, 0xFF	; 255
 494:	22 0f       	add	r18, r18
 496:	33 1f       	adc	r19, r19
 498:	44 1f       	adc	r20, r20
 49a:	aa 1f       	adc	r26, r26
 49c:	a9 f3       	breq	.-22     	; 0x488 <__divsf3_pse+0x10>
 49e:	33 d0       	rcall	.+102    	; 0x506 <__divsf3_pse+0x8e>
 4a0:	0e 2e       	mov	r0, r30
 4a2:	3a f0       	brmi	.+14     	; 0x4b2 <__divsf3_pse+0x3a>
 4a4:	e0 e8       	ldi	r30, 0x80	; 128
 4a6:	30 d0       	rcall	.+96     	; 0x508 <__divsf3_pse+0x90>
 4a8:	91 50       	subi	r25, 0x01	; 1
 4aa:	50 40       	sbci	r21, 0x00	; 0
 4ac:	e6 95       	lsr	r30
 4ae:	00 1c       	adc	r0, r0
 4b0:	ca f7       	brpl	.-14     	; 0x4a4 <__divsf3_pse+0x2c>
 4b2:	29 d0       	rcall	.+82     	; 0x506 <__divsf3_pse+0x8e>
 4b4:	fe 2f       	mov	r31, r30
 4b6:	27 d0       	rcall	.+78     	; 0x506 <__divsf3_pse+0x8e>
 4b8:	66 0f       	add	r22, r22
 4ba:	77 1f       	adc	r23, r23
 4bc:	88 1f       	adc	r24, r24
 4be:	bb 1f       	adc	r27, r27
 4c0:	26 17       	cp	r18, r22
 4c2:	37 07       	cpc	r19, r23
 4c4:	48 07       	cpc	r20, r24
 4c6:	ab 07       	cpc	r26, r27
 4c8:	b0 e8       	ldi	r27, 0x80	; 128
 4ca:	09 f0       	breq	.+2      	; 0x4ce <__divsf3_pse+0x56>
 4cc:	bb 0b       	sbc	r27, r27
 4ce:	80 2d       	mov	r24, r0
 4d0:	bf 01       	movw	r22, r30
 4d2:	ff 27       	eor	r31, r31
 4d4:	93 58       	subi	r25, 0x83	; 131
 4d6:	5f 4f       	sbci	r21, 0xFF	; 255
 4d8:	2a f0       	brmi	.+10     	; 0x4e4 <__divsf3_pse+0x6c>
 4da:	9e 3f       	cpi	r25, 0xFE	; 254
 4dc:	51 05       	cpc	r21, r1
 4de:	68 f0       	brcs	.+26     	; 0x4fa <__divsf3_pse+0x82>
 4e0:	79 c0       	rjmp	.+242    	; 0x5d4 <__fp_inf>
 4e2:	c3 c0       	rjmp	.+390    	; 0x66a <__fp_szero>
 4e4:	5f 3f       	cpi	r21, 0xFF	; 255
 4e6:	ec f3       	brlt	.-6      	; 0x4e2 <__divsf3_pse+0x6a>
 4e8:	98 3e       	cpi	r25, 0xE8	; 232
 4ea:	dc f3       	brlt	.-10     	; 0x4e2 <__divsf3_pse+0x6a>
 4ec:	86 95       	lsr	r24
 4ee:	77 95       	ror	r23
 4f0:	67 95       	ror	r22
 4f2:	b7 95       	ror	r27
 4f4:	f7 95       	ror	r31
 4f6:	9f 5f       	subi	r25, 0xFF	; 255
 4f8:	c9 f7       	brne	.-14     	; 0x4ec <__divsf3_pse+0x74>
 4fa:	88 0f       	add	r24, r24
 4fc:	91 1d       	adc	r25, r1
 4fe:	96 95       	lsr	r25
 500:	87 95       	ror	r24
 502:	97 f9       	bld	r25, 7
 504:	08 95       	ret
 506:	e1 e0       	ldi	r30, 0x01	; 1
 508:	66 0f       	add	r22, r22
 50a:	77 1f       	adc	r23, r23
 50c:	88 1f       	adc	r24, r24
 50e:	bb 1f       	adc	r27, r27
 510:	62 17       	cp	r22, r18
 512:	73 07       	cpc	r23, r19
 514:	84 07       	cpc	r24, r20
 516:	ba 07       	cpc	r27, r26
 518:	20 f0       	brcs	.+8      	; 0x522 <__divsf3_pse+0xaa>
 51a:	62 1b       	sub	r22, r18
 51c:	73 0b       	sbc	r23, r19
 51e:	84 0b       	sbc	r24, r20
 520:	ba 0b       	sbc	r27, r26
 522:	ee 1f       	adc	r30, r30
 524:	88 f7       	brcc	.-30     	; 0x508 <__divsf3_pse+0x90>
 526:	e0 95       	com	r30
 528:	08 95       	ret

0000052a <__fixsfsi>:
 52a:	04 d0       	rcall	.+8      	; 0x534 <__fixunssfsi>
 52c:	68 94       	set
 52e:	b1 11       	cpse	r27, r1
 530:	9c c0       	rjmp	.+312    	; 0x66a <__fp_szero>
 532:	08 95       	ret

00000534 <__fixunssfsi>:
 534:	7f d0       	rcall	.+254    	; 0x634 <__fp_splitA>
 536:	88 f0       	brcs	.+34     	; 0x55a <__fixunssfsi+0x26>
 538:	9f 57       	subi	r25, 0x7F	; 127
 53a:	90 f0       	brcs	.+36     	; 0x560 <__fixunssfsi+0x2c>
 53c:	b9 2f       	mov	r27, r25
 53e:	99 27       	eor	r25, r25
 540:	b7 51       	subi	r27, 0x17	; 23
 542:	a0 f0       	brcs	.+40     	; 0x56c <__fixunssfsi+0x38>
 544:	d1 f0       	breq	.+52     	; 0x57a <__fixunssfsi+0x46>
 546:	66 0f       	add	r22, r22
 548:	77 1f       	adc	r23, r23
 54a:	88 1f       	adc	r24, r24
 54c:	99 1f       	adc	r25, r25
 54e:	1a f0       	brmi	.+6      	; 0x556 <__fixunssfsi+0x22>
 550:	ba 95       	dec	r27
 552:	c9 f7       	brne	.-14     	; 0x546 <__fixunssfsi+0x12>
 554:	12 c0       	rjmp	.+36     	; 0x57a <__fixunssfsi+0x46>
 556:	b1 30       	cpi	r27, 0x01	; 1
 558:	81 f0       	breq	.+32     	; 0x57a <__fixunssfsi+0x46>
 55a:	86 d0       	rcall	.+268    	; 0x668 <__fp_zero>
 55c:	b1 e0       	ldi	r27, 0x01	; 1
 55e:	08 95       	ret
 560:	83 c0       	rjmp	.+262    	; 0x668 <__fp_zero>
 562:	67 2f       	mov	r22, r23
 564:	78 2f       	mov	r23, r24
 566:	88 27       	eor	r24, r24
 568:	b8 5f       	subi	r27, 0xF8	; 248
 56a:	39 f0       	breq	.+14     	; 0x57a <__fixunssfsi+0x46>
 56c:	b9 3f       	cpi	r27, 0xF9	; 249
 56e:	cc f3       	brlt	.-14     	; 0x562 <__fixunssfsi+0x2e>
 570:	86 95       	lsr	r24
 572:	77 95       	ror	r23
 574:	67 95       	ror	r22
 576:	b3 95       	inc	r27
 578:	d9 f7       	brne	.-10     	; 0x570 <__fixunssfsi+0x3c>
 57a:	3e f4       	brtc	.+14     	; 0x58a <__fixunssfsi+0x56>
 57c:	90 95       	com	r25
 57e:	80 95       	com	r24
 580:	70 95       	com	r23
 582:	61 95       	neg	r22
 584:	7f 4f       	sbci	r23, 0xFF	; 255
 586:	8f 4f       	sbci	r24, 0xFF	; 255
 588:	9f 4f       	sbci	r25, 0xFF	; 255
 58a:	08 95       	ret

0000058c <__fp_cmp>:
 58c:	99 0f       	add	r25, r25
 58e:	00 08       	sbc	r0, r0
 590:	55 0f       	add	r21, r21
 592:	aa 0b       	sbc	r26, r26
 594:	e0 e8       	ldi	r30, 0x80	; 128
 596:	fe ef       	ldi	r31, 0xFE	; 254
 598:	16 16       	cp	r1, r22
 59a:	17 06       	cpc	r1, r23
 59c:	e8 07       	cpc	r30, r24
 59e:	f9 07       	cpc	r31, r25
 5a0:	c0 f0       	brcs	.+48     	; 0x5d2 <__fp_cmp+0x46>
 5a2:	12 16       	cp	r1, r18
 5a4:	13 06       	cpc	r1, r19
 5a6:	e4 07       	cpc	r30, r20
 5a8:	f5 07       	cpc	r31, r21
 5aa:	98 f0       	brcs	.+38     	; 0x5d2 <__fp_cmp+0x46>
 5ac:	62 1b       	sub	r22, r18
 5ae:	73 0b       	sbc	r23, r19
 5b0:	84 0b       	sbc	r24, r20
 5b2:	95 0b       	sbc	r25, r21
 5b4:	39 f4       	brne	.+14     	; 0x5c4 <__fp_cmp+0x38>
 5b6:	0a 26       	eor	r0, r26
 5b8:	61 f0       	breq	.+24     	; 0x5d2 <__fp_cmp+0x46>
 5ba:	23 2b       	or	r18, r19
 5bc:	24 2b       	or	r18, r20
 5be:	25 2b       	or	r18, r21
 5c0:	21 f4       	brne	.+8      	; 0x5ca <__fp_cmp+0x3e>
 5c2:	08 95       	ret
 5c4:	0a 26       	eor	r0, r26
 5c6:	09 f4       	brne	.+2      	; 0x5ca <__fp_cmp+0x3e>
 5c8:	a1 40       	sbci	r26, 0x01	; 1
 5ca:	a6 95       	lsr	r26
 5cc:	8f ef       	ldi	r24, 0xFF	; 255
 5ce:	81 1d       	adc	r24, r1
 5d0:	81 1d       	adc	r24, r1
 5d2:	08 95       	ret

000005d4 <__fp_inf>:
 5d4:	97 f9       	bld	r25, 7
 5d6:	9f 67       	ori	r25, 0x7F	; 127
 5d8:	80 e8       	ldi	r24, 0x80	; 128
 5da:	70 e0       	ldi	r23, 0x00	; 0
 5dc:	60 e0       	ldi	r22, 0x00	; 0
 5de:	08 95       	ret

000005e0 <__fp_nan>:
 5e0:	9f ef       	ldi	r25, 0xFF	; 255
 5e2:	80 ec       	ldi	r24, 0xC0	; 192
 5e4:	08 95       	ret

000005e6 <__fp_pscA>:
 5e6:	00 24       	eor	r0, r0
 5e8:	0a 94       	dec	r0
 5ea:	16 16       	cp	r1, r22
 5ec:	17 06       	cpc	r1, r23
 5ee:	18 06       	cpc	r1, r24
 5f0:	09 06       	cpc	r0, r25
 5f2:	08 95       	ret

000005f4 <__fp_pscB>:
 5f4:	00 24       	eor	r0, r0
 5f6:	0a 94       	dec	r0
 5f8:	12 16       	cp	r1, r18
 5fa:	13 06       	cpc	r1, r19
 5fc:	14 06       	cpc	r1, r20
 5fe:	05 06       	cpc	r0, r21
 600:	08 95       	ret

00000602 <__fp_round>:
 602:	09 2e       	mov	r0, r25
 604:	03 94       	inc	r0
 606:	00 0c       	add	r0, r0
 608:	11 f4       	brne	.+4      	; 0x60e <__fp_round+0xc>
 60a:	88 23       	and	r24, r24
 60c:	52 f0       	brmi	.+20     	; 0x622 <__fp_round+0x20>
 60e:	bb 0f       	add	r27, r27
 610:	40 f4       	brcc	.+16     	; 0x622 <__fp_round+0x20>
 612:	bf 2b       	or	r27, r31
 614:	11 f4       	brne	.+4      	; 0x61a <__fp_round+0x18>
 616:	60 ff       	sbrs	r22, 0
 618:	04 c0       	rjmp	.+8      	; 0x622 <__fp_round+0x20>
 61a:	6f 5f       	subi	r22, 0xFF	; 255
 61c:	7f 4f       	sbci	r23, 0xFF	; 255
 61e:	8f 4f       	sbci	r24, 0xFF	; 255
 620:	9f 4f       	sbci	r25, 0xFF	; 255
 622:	08 95       	ret

00000624 <__fp_split3>:
 624:	57 fd       	sbrc	r21, 7
 626:	90 58       	subi	r25, 0x80	; 128
 628:	44 0f       	add	r20, r20
 62a:	55 1f       	adc	r21, r21
 62c:	59 f0       	breq	.+22     	; 0x644 <__fp_splitA+0x10>
 62e:	5f 3f       	cpi	r21, 0xFF	; 255
 630:	71 f0       	breq	.+28     	; 0x64e <__fp_splitA+0x1a>
 632:	47 95       	ror	r20

00000634 <__fp_splitA>:
 634:	88 0f       	add	r24, r24
 636:	97 fb       	bst	r25, 7
 638:	99 1f       	adc	r25, r25
 63a:	61 f0       	breq	.+24     	; 0x654 <__fp_splitA+0x20>
 63c:	9f 3f       	cpi	r25, 0xFF	; 255
 63e:	79 f0       	breq	.+30     	; 0x65e <__fp_splitA+0x2a>
 640:	87 95       	ror	r24
 642:	08 95       	ret
 644:	12 16       	cp	r1, r18
 646:	13 06       	cpc	r1, r19
 648:	14 06       	cpc	r1, r20
 64a:	55 1f       	adc	r21, r21
 64c:	f2 cf       	rjmp	.-28     	; 0x632 <__fp_split3+0xe>
 64e:	46 95       	lsr	r20
 650:	f1 df       	rcall	.-30     	; 0x634 <__fp_splitA>
 652:	08 c0       	rjmp	.+16     	; 0x664 <__fp_splitA+0x30>
 654:	16 16       	cp	r1, r22
 656:	17 06       	cpc	r1, r23
 658:	18 06       	cpc	r1, r24
 65a:	99 1f       	adc	r25, r25
 65c:	f1 cf       	rjmp	.-30     	; 0x640 <__fp_splitA+0xc>
 65e:	86 95       	lsr	r24
 660:	71 05       	cpc	r23, r1
 662:	61 05       	cpc	r22, r1
 664:	08 94       	sec
 666:	08 95       	ret

00000668 <__fp_zero>:
 668:	e8 94       	clt

0000066a <__fp_szero>:
 66a:	bb 27       	eor	r27, r27
 66c:	66 27       	eor	r22, r22
 66e:	77 27       	eor	r23, r23
 670:	cb 01       	movw	r24, r22
 672:	97 f9       	bld	r25, 7
 674:	08 95       	ret

00000676 <__gesf2>:
 676:	8a df       	rcall	.-236    	; 0x58c <__fp_cmp>
 678:	08 f4       	brcc	.+2      	; 0x67c <__gesf2+0x6>
 67a:	8f ef       	ldi	r24, 0xFF	; 255
 67c:	08 95       	ret

0000067e <__mulsf3>:
 67e:	0b d0       	rcall	.+22     	; 0x696 <__mulsf3x>
 680:	c0 cf       	rjmp	.-128    	; 0x602 <__fp_round>
 682:	b1 df       	rcall	.-158    	; 0x5e6 <__fp_pscA>
 684:	28 f0       	brcs	.+10     	; 0x690 <__mulsf3+0x12>
 686:	b6 df       	rcall	.-148    	; 0x5f4 <__fp_pscB>
 688:	18 f0       	brcs	.+6      	; 0x690 <__mulsf3+0x12>
 68a:	95 23       	and	r25, r21
 68c:	09 f0       	breq	.+2      	; 0x690 <__mulsf3+0x12>
 68e:	a2 cf       	rjmp	.-188    	; 0x5d4 <__fp_inf>
 690:	a7 cf       	rjmp	.-178    	; 0x5e0 <__fp_nan>
 692:	11 24       	eor	r1, r1
 694:	ea cf       	rjmp	.-44     	; 0x66a <__fp_szero>

00000696 <__mulsf3x>:
 696:	c6 df       	rcall	.-116    	; 0x624 <__fp_split3>
 698:	a0 f3       	brcs	.-24     	; 0x682 <__mulsf3+0x4>

0000069a <__mulsf3_pse>:
 69a:	95 9f       	mul	r25, r21
 69c:	d1 f3       	breq	.-12     	; 0x692 <__mulsf3+0x14>
 69e:	95 0f       	add	r25, r21
 6a0:	50 e0       	ldi	r21, 0x00	; 0
 6a2:	55 1f       	adc	r21, r21
 6a4:	62 9f       	mul	r22, r18
 6a6:	f0 01       	movw	r30, r0
 6a8:	72 9f       	mul	r23, r18
 6aa:	bb 27       	eor	r27, r27
 6ac:	f0 0d       	add	r31, r0
 6ae:	b1 1d       	adc	r27, r1
 6b0:	63 9f       	mul	r22, r19
 6b2:	aa 27       	eor	r26, r26
 6b4:	f0 0d       	add	r31, r0
 6b6:	b1 1d       	adc	r27, r1
 6b8:	aa 1f       	adc	r26, r26
 6ba:	64 9f       	mul	r22, r20
 6bc:	66 27       	eor	r22, r22
 6be:	b0 0d       	add	r27, r0
 6c0:	a1 1d       	adc	r26, r1
 6c2:	66 1f       	adc	r22, r22
 6c4:	82 9f       	mul	r24, r18
 6c6:	22 27       	eor	r18, r18
 6c8:	b0 0d       	add	r27, r0
 6ca:	a1 1d       	adc	r26, r1
 6cc:	62 1f       	adc	r22, r18
 6ce:	73 9f       	mul	r23, r19
 6d0:	b0 0d       	add	r27, r0
 6d2:	a1 1d       	adc	r26, r1
 6d4:	62 1f       	adc	r22, r18
 6d6:	83 9f       	mul	r24, r19
 6d8:	a0 0d       	add	r26, r0
 6da:	61 1d       	adc	r22, r1
 6dc:	22 1f       	adc	r18, r18
 6de:	74 9f       	mul	r23, r20
 6e0:	33 27       	eor	r19, r19
 6e2:	a0 0d       	add	r26, r0
 6e4:	61 1d       	adc	r22, r1
 6e6:	23 1f       	adc	r18, r19
 6e8:	84 9f       	mul	r24, r20
 6ea:	60 0d       	add	r22, r0
 6ec:	21 1d       	adc	r18, r1
 6ee:	82 2f       	mov	r24, r18
 6f0:	76 2f       	mov	r23, r22
 6f2:	6a 2f       	mov	r22, r26
 6f4:	11 24       	eor	r1, r1
 6f6:	9f 57       	subi	r25, 0x7F	; 127
 6f8:	50 40       	sbci	r21, 0x00	; 0
 6fa:	8a f0       	brmi	.+34     	; 0x71e <__mulsf3_pse+0x84>
 6fc:	e1 f0       	breq	.+56     	; 0x736 <__mulsf3_pse+0x9c>
 6fe:	88 23       	and	r24, r24
 700:	4a f0       	brmi	.+18     	; 0x714 <__mulsf3_pse+0x7a>
 702:	ee 0f       	add	r30, r30
 704:	ff 1f       	adc	r31, r31
 706:	bb 1f       	adc	r27, r27
 708:	66 1f       	adc	r22, r22
 70a:	77 1f       	adc	r23, r23
 70c:	88 1f       	adc	r24, r24
 70e:	91 50       	subi	r25, 0x01	; 1
 710:	50 40       	sbci	r21, 0x00	; 0
 712:	a9 f7       	brne	.-22     	; 0x6fe <__mulsf3_pse+0x64>
 714:	9e 3f       	cpi	r25, 0xFE	; 254
 716:	51 05       	cpc	r21, r1
 718:	70 f0       	brcs	.+28     	; 0x736 <__mulsf3_pse+0x9c>
 71a:	5c cf       	rjmp	.-328    	; 0x5d4 <__fp_inf>
 71c:	a6 cf       	rjmp	.-180    	; 0x66a <__fp_szero>
 71e:	5f 3f       	cpi	r21, 0xFF	; 255
 720:	ec f3       	brlt	.-6      	; 0x71c <__mulsf3_pse+0x82>
 722:	98 3e       	cpi	r25, 0xE8	; 232
 724:	dc f3       	brlt	.-10     	; 0x71c <__mulsf3_pse+0x82>
 726:	86 95       	lsr	r24
 728:	77 95       	ror	r23
 72a:	67 95       	ror	r22
 72c:	b7 95       	ror	r27
 72e:	f7 95       	ror	r31
 730:	e7 95       	ror	r30
 732:	9f 5f       	subi	r25, 0xFF	; 255
 734:	c1 f7       	brne	.-16     	; 0x726 <__mulsf3_pse+0x8c>
 736:	fe 2b       	or	r31, r30
 738:	88 0f       	add	r24, r24
 73a:	91 1d       	adc	r25, r1
 73c:	96 95       	lsr	r25
 73e:	87 95       	ror	r24
 740:	97 f9       	bld	r25, 7
 742:	08 95       	ret

00000744 <_exit>:
 744:	f8 94       	cli

00000746 <__stop_program>:
 746:	ff cf       	rjmp	.-2      	; 0x746 <__stop_program>
