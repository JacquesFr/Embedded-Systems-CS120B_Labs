
jfrac001_lab10_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000003ae  00000442  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800106  00800106  00000448  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000478  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000004b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d56  00000000  00000000  00000558  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008d6  00000000  00000000  000012ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000684  00000000  00000000  00001b84  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000158  00000000  00000000  00002208  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000614  00000000  00000000  00002360  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000027d  00000000  00000000  00002974  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00002bf1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	6d c0       	rjmp	.+218    	; 0x110 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ee ea       	ldi	r30, 0xAE	; 174
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e0       	ldi	r26, 0x06	; 6
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 31       	cpi	r26, 0x16	; 22
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	4d d1       	rcall	.+666    	; 0x35e <main>
  c4:	72 c1       	rjmp	.+740    	; 0x3aa <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerOn>:
	TCCR1B = 0x00; 
}


void TimerISR() {
	TimerFlag = 1;
  c8:	8b e0       	ldi	r24, 0x0B	; 11
  ca:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  ce:	8d e7       	ldi	r24, 0x7D	; 125
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  d6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
  e0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  e4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  e8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_avr_timer_M>
  ec:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_avr_timer_M+0x1>
  f0:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <_avr_timer_M+0x2>
  f4:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <_avr_timer_M+0x3>
  f8:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <_avr_timer_cntcurr>
  fc:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <_avr_timer_cntcurr+0x1>
 100:	a0 93 0f 01 	sts	0x010F, r26	; 0x80010f <_avr_timer_cntcurr+0x2>
 104:	b0 93 10 01 	sts	0x0110, r27	; 0x800110 <_avr_timer_cntcurr+0x3>
 108:	8f b7       	in	r24, 0x3f	; 63
 10a:	80 68       	ori	r24, 0x80	; 128
 10c:	8f bf       	out	0x3f, r24	; 63
 10e:	08 95       	ret

00000110 <__vector_13>:
}


ISR(TIMER1_COMPA_vect) {
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	8f 93       	push	r24
 11c:	9f 93       	push	r25
 11e:	af 93       	push	r26
 120:	bf 93       	push	r27
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
 122:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <_avr_timer_cntcurr>
 126:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <_avr_timer_cntcurr+0x1>
 12a:	a0 91 0f 01 	lds	r26, 0x010F	; 0x80010f <_avr_timer_cntcurr+0x2>
 12e:	b0 91 10 01 	lds	r27, 0x0110	; 0x800110 <_avr_timer_cntcurr+0x3>
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	a1 09       	sbc	r26, r1
 136:	b1 09       	sbc	r27, r1
 138:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <_avr_timer_cntcurr>
 13c:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <_avr_timer_cntcurr+0x1>
 140:	a0 93 0f 01 	sts	0x010F, r26	; 0x80010f <_avr_timer_cntcurr+0x2>
 144:	b0 93 10 01 	sts	0x0110, r27	; 0x800110 <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
 148:	89 2b       	or	r24, r25
 14a:	8a 2b       	or	r24, r26
 14c:	8b 2b       	or	r24, r27
 14e:	99 f4       	brne	.+38     	; 0x176 <__vector_13+0x66>
	TCCR1B = 0x00; 
}


void TimerISR() {
	TimerFlag = 1;
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <TimerFlag>

ISR(TIMER1_COMPA_vect) {
	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
		TimerISR(); // Call the ISR that the user uses
		_avr_timer_cntcurr = _avr_timer_M;
 156:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_avr_timer_M>
 15a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_avr_timer_M+0x1>
 15e:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <_avr_timer_M+0x2>
 162:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <_avr_timer_M+0x3>
 166:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <_avr_timer_cntcurr>
 16a:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <_avr_timer_cntcurr+0x1>
 16e:	a0 93 0f 01 	sts	0x010F, r26	; 0x80010f <_avr_timer_cntcurr+0x2>
 172:	b0 93 10 01 	sts	0x0110, r27	; 0x800110 <_avr_timer_cntcurr+0x3>
	}
}
 176:	bf 91       	pop	r27
 178:	af 91       	pop	r26
 17a:	9f 91       	pop	r25
 17c:	8f 91       	pop	r24
 17e:	0f 90       	pop	r0
 180:	0f be       	out	0x3f, r0	; 63
 182:	0f 90       	pop	r0
 184:	1f 90       	pop	r1
 186:	18 95       	reti

00000188 <TimerSet>:


// Set TimerISR() to tick every M ms

void TimerSet(unsigned long M) {
	_avr_timer_M = M;
 188:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <_avr_timer_M>
 18c:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <_avr_timer_M+0x1>
 190:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_avr_timer_M+0x2>
 194:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <_avr_timer_M+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 198:	60 93 0d 01 	sts	0x010D, r22	; 0x80010d <_avr_timer_cntcurr>
 19c:	70 93 0e 01 	sts	0x010E, r23	; 0x80010e <_avr_timer_cntcurr+0x1>
 1a0:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <_avr_timer_cntcurr+0x2>
 1a4:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <_avr_timer_cntcurr+0x3>
 1a8:	08 95       	ret

000001aa <SM_threeLED>:
enum combineLED_states {Init2, out} combineLED_state;
enum speaker_states {Init3, wait, speaker_on, speaker_off, speaker_on2} speaker_state;

void SM_threeLED(){
	
	switch(threeLED_state)	{		//State Transitions
 1aa:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <threeLED_state>
 1ae:	81 30       	cpi	r24, 0x01	; 1
 1b0:	51 f0       	breq	.+20     	; 0x1c6 <SM_threeLED+0x1c>
 1b2:	28 f0       	brcs	.+10     	; 0x1be <SM_threeLED+0x14>
 1b4:	82 30       	cpi	r24, 0x02	; 2
 1b6:	89 f0       	breq	.+34     	; 0x1da <SM_threeLED+0x30>
 1b8:	83 30       	cpi	r24, 0x03	; 3
 1ba:	c9 f0       	breq	.+50     	; 0x1ee <SM_threeLED+0x44>
 1bc:	22 c0       	rjmp	.+68     	; 0x202 <SM_threeLED+0x58>
		case(Init0):
			threeLED_state = LED1;
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <threeLED_state>
			break;
 1c4:	21 c0       	rjmp	.+66     	; 0x208 <SM_threeLED+0x5e>
		
		case(LED1):
			if(cnt < 30){
 1c6:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <cnt>
 1ca:	8e 31       	cpi	r24, 0x1E	; 30
 1cc:	e8 f0       	brcs	.+58     	; 0x208 <SM_threeLED+0x5e>
				threeLED_state = LED1;
			}
			else{
				cnt = 0x00;
 1ce:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <cnt>
				threeLED_state = LED2;
 1d2:	82 e0       	ldi	r24, 0x02	; 2
 1d4:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <threeLED_state>
 1d8:	20 c0       	rjmp	.+64     	; 0x21a <SM_threeLED+0x70>
			}
			break;
		
		case(LED2):
			if(cnt < 30){
 1da:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <cnt>
 1de:	8e 31       	cpi	r24, 0x1E	; 30
 1e0:	e0 f0       	brcs	.+56     	; 0x21a <SM_threeLED+0x70>
				threeLED_state = LED2;
			}
			else{
				cnt = 0x00;
 1e2:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <cnt>
				threeLED_state = LED3;
 1e6:	83 e0       	ldi	r24, 0x03	; 3
 1e8:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <threeLED_state>
 1ec:	1f c0       	rjmp	.+62     	; 0x22c <SM_threeLED+0x82>
			}
			break;
			
		case(LED3):
			if(cnt < 30){
 1ee:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <cnt>
 1f2:	8e 31       	cpi	r24, 0x1E	; 30
 1f4:	d8 f0       	brcs	.+54     	; 0x22c <SM_threeLED+0x82>
				threeLED_state = LED3;
			}
			else{
				cnt = 0x00;
 1f6:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <cnt>
				threeLED_state = LED1;
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <threeLED_state>
 200:	03 c0       	rjmp	.+6      	; 0x208 <SM_threeLED+0x5e>
			}
			break;
		
		default:
			threeLED_state = Init0;
 202:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <threeLED_state>
			break;
		
		default: 
			break;
	}
}
 206:	08 95       	ret
	switch(threeLED_state){		//State Actions
		case(Init0):
			break;
		
		case(LED1):
			threeLED = 0x01;
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <threeLED>
			cnt++;
 20e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <cnt>
 212:	8f 5f       	subi	r24, 0xFF	; 255
 214:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <cnt>
			break;
 218:	08 95       	ret
		
		case(LED2):
			threeLED = 0x02;
 21a:	82 e0       	ldi	r24, 0x02	; 2
 21c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <threeLED>
			cnt++;
 220:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <cnt>
 224:	8f 5f       	subi	r24, 0xFF	; 255
 226:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <cnt>
			break;
 22a:	08 95       	ret
		
		case(LED3):
			threeLED=0x04;
 22c:	84 e0       	ldi	r24, 0x04	; 4
 22e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <threeLED>
			cnt++;
 232:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <cnt>
 236:	8f 5f       	subi	r24, 0xFF	; 255
 238:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <cnt>
 23c:	08 95       	ret

0000023e <SM_blinkingLED>:
	}
}

void SM_blinkingLED(){
	
	switch(blinkLED_state)	{		//State Transitions
 23e:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <blinkLED_state>
 242:	81 30       	cpi	r24, 0x01	; 1
 244:	41 f0       	breq	.+16     	; 0x256 <SM_blinkingLED+0x18>
 246:	18 f0       	brcs	.+6      	; 0x24e <SM_blinkingLED+0x10>
 248:	82 30       	cpi	r24, 0x02	; 2
 24a:	79 f0       	breq	.+30     	; 0x26a <SM_blinkingLED+0x2c>
 24c:	18 c0       	rjmp	.+48     	; 0x27e <SM_blinkingLED+0x40>
		case(Init1):
			blinkLED_state = LED_on;
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <blinkLED_state>
			break;
 254:	23 c0       	rjmp	.+70     	; 0x29c <SM_blinkingLED+0x5e>
		
		case(LED_on):
			if(cnt0 < 100){
 256:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <cnt0>
 25a:	84 36       	cpi	r24, 0x64	; 100
 25c:	f8 f0       	brcs	.+62     	; 0x29c <SM_blinkingLED+0x5e>
				blinkLED_state = LED_on;
			}
			else{
				cnt0 = 0x00;
 25e:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <cnt0>
				blinkLED_state = LED_off;
 262:	82 e0       	ldi	r24, 0x02	; 2
 264:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <blinkLED_state>
 268:	11 c0       	rjmp	.+34     	; 0x28c <SM_blinkingLED+0x4e>
			}
			break;
		
		case(LED_off):
			if(cnt0 < 100){
 26a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <cnt0>
 26e:	84 36       	cpi	r24, 0x64	; 100
 270:	68 f0       	brcs	.+26     	; 0x28c <SM_blinkingLED+0x4e>
				blinkLED_state = LED_off;
			}
			else{
				cnt0 = 0x00;
 272:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <cnt0>
				blinkLED_state = LED_on;
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <blinkLED_state>
 27c:	0f c0       	rjmp	.+30     	; 0x29c <SM_blinkingLED+0x5e>
			}
			break;
		
		default:
			blinkLED_state = Init1;
 27e:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <blinkLED_state>
			break;
	}
	
	switch(blinkLED_state){		//State Actions
		case(Init1):
			cnt0 = 0x00;
 282:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <cnt0>
			blinkingLED = 0x00;
 286:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <blinkingLED>
			break;
		
		default:
			break;
	}
}
 28a:	08 95       	ret
			blinkingLED = 0x08;
			cnt0++;
			break;
		
		case(LED_off):
			blinkingLED = 0x00;
 28c:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <blinkingLED>
			cnt0++;
 290:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <cnt0>
 294:	8f 5f       	subi	r24, 0xFF	; 255
 296:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <cnt0>
			break;
 29a:	08 95       	ret
			cnt0 = 0x00;
			blinkingLED = 0x00;
			break;
		
		case(LED_on):
			blinkingLED = 0x08;
 29c:	88 e0       	ldi	r24, 0x08	; 8
 29e:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <blinkingLED>
			cnt0++;
 2a2:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <cnt0>
 2a6:	8f 5f       	subi	r24, 0xFF	; 255
 2a8:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <cnt0>
 2ac:	08 95       	ret

000002ae <SM_combineLED>:
			break;
	}
}

void SM_combineLED(){
	switch(combineLED_state)	{		//State Transitions
 2ae:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <combineLED_state>
 2b2:	88 23       	and	r24, r24
 2b4:	19 f0       	breq	.+6      	; 0x2bc <SM_combineLED+0xe>
 2b6:	81 30       	cpi	r24, 0x01	; 1
 2b8:	51 f0       	breq	.+20     	; 0x2ce <SM_combineLED+0x20>
 2ba:	04 c0       	rjmp	.+8      	; 0x2c4 <SM_combineLED+0x16>
		case(Init2):
			combineLED_state = out;
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <combineLED_state>
			break;
 2c2:	05 c0       	rjmp	.+10     	; 0x2ce <SM_combineLED+0x20>
		case(out):
			combineLED_state = out;
			break;
		
		default:
			combineLED_state = Init2;
 2c4:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <combineLED_state>
			break;
	}
	
	switch(combineLED_state){		//State Actions
		case(Init2):
			combineLED = 0x00;
 2c8:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
		
		default:
			combineLED = 0x00;
			break;
	}
}
 2cc:	08 95       	ret
		case(Init2):
			combineLED = 0x00;
			break;
		
		case(out):
			combineLED = threeLED | blinkingLED;
 2ce:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <threeLED>
 2d2:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <blinkingLED>
 2d6:	89 2b       	or	r24, r25
 2d8:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
 2dc:	08 95       	ret

000002de <SM_Speaker>:
	}
}

void SM_Speaker(){
	
	switching = PINA & 0x04;
 2de:	80 b1       	in	r24, 0x00	; 0
 2e0:	84 70       	andi	r24, 0x04	; 4
 2e2:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <switching>
	
	switch(speaker_state)	{		//State Transitions
 2e6:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <speaker_state>
 2ea:	92 30       	cpi	r25, 0x02	; 2
 2ec:	91 f0       	breq	.+36     	; 0x312 <SM_Speaker+0x34>
 2ee:	18 f4       	brcc	.+6      	; 0x2f6 <SM_Speaker+0x18>
 2f0:	99 23       	and	r25, r25
 2f2:	31 f0       	breq	.+12     	; 0x300 <SM_Speaker+0x22>
 2f4:	2c c0       	rjmp	.+88     	; 0x34e <SM_Speaker+0x70>
 2f6:	93 30       	cpi	r25, 0x03	; 3
 2f8:	a9 f0       	breq	.+42     	; 0x324 <SM_Speaker+0x46>
 2fa:	94 30       	cpi	r25, 0x04	; 4
 2fc:	f9 f0       	breq	.+62     	; 0x33c <SM_Speaker+0x5e>
 2fe:	27 c0       	rjmp	.+78     	; 0x34e <SM_Speaker+0x70>
		case(Init3):
		if(!(switching & 0x04)){
 300:	88 23       	and	r24, r24
 302:	39 f1       	breq	.+78     	; 0x352 <SM_Speaker+0x74>
			speaker_state = Init3;
		}
		else{
			speaker_state = speaker_on;
 304:	82 e0       	ldi	r24, 0x02	; 2
 306:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <speaker_state>
		case(Init3):
		tempB = 0x00;
		break;
		
		case(speaker_on):
		tempB = 0x10;
 30a:	80 e1       	ldi	r24, 0x10	; 16
 30c:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <tempB>
		break;
 310:	08 95       	ret
			speaker_state = speaker_on;
		}
		break;
		
		case(speaker_on):
			if(!(switching & 0x04)){
 312:	81 11       	cpse	r24, r1
 314:	03 c0       	rjmp	.+6      	; 0x31c <SM_Speaker+0x3e>
				speaker_state = Init3;
 316:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <speaker_state>
 31a:	1b c0       	rjmp	.+54     	; 0x352 <SM_Speaker+0x74>
			}
			else{
				speaker_state = speaker_off;
 31c:	83 e0       	ldi	r24, 0x03	; 3
 31e:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <speaker_state>
 322:	1a c0       	rjmp	.+52     	; 0x358 <SM_Speaker+0x7a>
			}
		break;
		
		case(speaker_off):
		if(!(switching & 0x04)){
 324:	81 11       	cpse	r24, r1
 326:	03 c0       	rjmp	.+6      	; 0x32e <SM_Speaker+0x50>
			speaker_state = Init3;
 328:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <speaker_state>
 32c:	12 c0       	rjmp	.+36     	; 0x352 <SM_Speaker+0x74>
		}
		else{
			speaker_state = speaker_on2;
 32e:	84 e0       	ldi	r24, 0x04	; 4
 330:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <speaker_state>
		case(speaker_off):
		tempB = 0x00;
		break;
		
		case(speaker_on2):
			tempB = 0x10;
 334:	80 e1       	ldi	r24, 0x10	; 16
 336:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <tempB>
			break;
 33a:	08 95       	ret
			speaker_state = speaker_on2;
		}
		break;
		
		case(speaker_on2):
			if(!(switching & 0x04)){
 33c:	81 11       	cpse	r24, r1
 33e:	03 c0       	rjmp	.+6      	; 0x346 <SM_Speaker+0x68>
				speaker_state = Init3;
 340:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <speaker_state>
 344:	06 c0       	rjmp	.+12     	; 0x352 <SM_Speaker+0x74>
			}
			else{
				speaker_state = speaker_off;
 346:	83 e0       	ldi	r24, 0x03	; 3
 348:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <speaker_state>
 34c:	05 c0       	rjmp	.+10     	; 0x358 <SM_Speaker+0x7a>
			}
			break;
		
		default:
		speaker_state = Init3;
 34e:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <speaker_state>
		break;
	}
	
	switch(speaker_state)	{		//State Transitions
		case(Init3):
		tempB = 0x00;
 352:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <tempB>
		break;
 356:	08 95       	ret
		case(speaker_on):
		tempB = 0x10;
		break;
		
		case(speaker_off):
		tempB = 0x00;
 358:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <tempB>
 35c:	08 95       	ret

0000035e <main>:



int main(void)
{
	DDRB = 0xFF; PORTB = 0x00;
 35e:	8f ef       	ldi	r24, 0xFF	; 255
 360:	84 b9       	out	0x04, r24	; 4
 362:	15 b8       	out	0x05, r1	; 5
	DDRA = 0x00; PORTA = 0xFF;
 364:	11 b8       	out	0x01, r1	; 1
 366:	82 b9       	out	0x02, r24	; 2
	
	TimerSet(time_count);
 368:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 36c:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	09 df       	rcall	.-494    	; 0x188 <TimerSet>
	TimerOn();
 376:	a8 de       	rcall	.-688    	; 0xc8 <TimerOn>
 378:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <threeLED_state>
	
	//PWM_on();
	//set_PWM(0);

	threeLED_state = Init0;
 37c:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <blinkLED_state>
	blinkLED_state = Init1;
 380:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <combineLED_state>
	combineLED_state = Init2;
 384:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <speaker_state>
	speaker_state = Init3;
	
	
	while (1)
	{
		SM_Speaker();
 388:	aa df       	rcall	.-172    	; 0x2de <SM_Speaker>
		SM_threeLED();
 38a:	0f df       	rcall	.-482    	; 0x1aa <SM_threeLED>
 38c:	58 df       	rcall	.-336    	; 0x23e <SM_blinkingLED>
		SM_blinkingLED();
 38e:	8f df       	rcall	.-226    	; 0x2ae <SM_combineLED>
 390:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <__data_end>
		SM_combineLED();
 394:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <tempB>
		PORTB = combineLED | tempB;
 398:	89 2b       	or	r24, r25
 39a:	85 b9       	out	0x05, r24	; 5
 39c:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <TimerFlag>
 3a0:	88 23       	and	r24, r24
		
		
		
		while(!TimerFlag){}
 3a2:	e1 f3       	breq	.-8      	; 0x39c <main+0x3e>
 3a4:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <TimerFlag>
 3a8:	ef cf       	rjmp	.-34     	; 0x388 <main+0x2a>

000003aa <_exit>:
		TimerFlag = 0;
 3aa:	f8 94       	cli

000003ac <__stop_program>:
 3ac:	ff cf       	rjmp	.-2      	; 0x3ac <__stop_program>
