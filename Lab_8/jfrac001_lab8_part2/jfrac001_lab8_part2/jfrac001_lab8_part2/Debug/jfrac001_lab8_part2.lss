
jfrac001_lab8_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000018e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000011a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  0000018e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000018e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008d2  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007cd  00000000  00000000  00000b02  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000295  00000000  00000000  000012cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00001564  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000046e  00000000  00000000  000015a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001a16  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a5 30       	cpi	r26, 0x05	; 5
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	2c d0       	rcall	.+88     	; 0x102 <main>
  aa:	35 c0       	rjmp	.+106    	; 0x116 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <ADC_init>:
unsigned short analog_in;
unsigned char tempB = 0; 
unsigned char tempD = 0;

void ADC_init() {
	ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 << ADATE);
  ae:	ea e7       	ldi	r30, 0x7A	; 122
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	80 6e       	ori	r24, 0xE0	; 224
  b6:	80 83       	st	Z, r24
  b8:	08 95       	ret

000000ba <tick>:

enum state {Init, wait} state;

void tick(){
	
	switch(state)	{		//State Transitions
  ba:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <state>
  be:	88 23       	and	r24, r24
  c0:	19 f0       	breq	.+6      	; 0xc8 <tick+0xe>
  c2:	81 30       	cpi	r24, 0x01	; 1
  c4:	61 f0       	breq	.+24     	; 0xde <tick+0x24>
  c6:	04 c0       	rjmp	.+8      	; 0xd0 <tick+0x16>
		
		case(Init):
			state = wait;
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
			break;
  ce:	07 c0       	rjmp	.+14     	; 0xde <tick+0x24>
		case(wait):
			state = wait;
			break;
		
		default:
			state = Init;
  d0:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <state>
			break;
	}
	
	switch(state){		//State Actions
		case(Init):
			tempB = 0;
  d4:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <tempB>
			tempD = 0;
  d8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			//Actions
			break;
	}
	
	
}
  dc:	08 95       	ret
			tempB = 0;
			tempD = 0;
			break;
		
		case(wait):
			analog_in = ADC;
  de:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  e2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  e6:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <analog_in+0x1>
  ea:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <analog_in>
			tempB = (char) analog_in;
  ee:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <tempB>
			tempD = (char) (analog_in >> 8);
  f2:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <_edata>
			
			PORTB = tempB & 0xFF;
  f6:	85 b9       	out	0x05, r24	; 5
			PORTD = tempD & 0x03;
  f8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  fc:	83 70       	andi	r24, 0x03	; 3
  fe:	8b b9       	out	0x0b, r24	; 11
 100:	08 95       	ret

00000102 <main>:



int main(void)
{
	DDRB = 0xFF; PORTB = 0x00;
 102:	8f ef       	ldi	r24, 0xFF	; 255
 104:	84 b9       	out	0x04, r24	; 4
 106:	15 b8       	out	0x05, r1	; 5
	DDRD = 0xFF; PORTD = 0x00;
 108:	8a b9       	out	0x0a, r24	; 10
 10a:	1b b8       	out	0x0b, r1	; 11
	state = Init;
 10c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <state>
	
	ADC_init();
 110:	ce df       	rcall	.-100    	; 0xae <ADC_init>
	
    
    while (1) 
    {
		tick();
 112:	d3 df       	rcall	.-90     	; 0xba <tick>
 114:	fe cf       	rjmp	.-4      	; 0x112 <main+0x10>

00000116 <_exit>:
 116:	f8 94       	cli

00000118 <__stop_program>:
 118:	ff cf       	rjmp	.-2      	; 0x118 <__stop_program>
