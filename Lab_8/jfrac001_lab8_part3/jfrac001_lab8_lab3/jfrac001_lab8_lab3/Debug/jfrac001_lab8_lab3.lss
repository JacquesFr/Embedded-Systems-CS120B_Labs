
jfrac001_lab8_lab3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000140  000001d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000140  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800102  00800102  000001d6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000208  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008d2  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007de  00000000  00000000  00000b4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000295  00000000  00000000  00001328  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  000015c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000460  00000000  00000000  00001604  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001a64  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e4       	ldi	r30, 0x40	; 64
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 30       	cpi	r26, 0x06	; 6
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	34 d0       	rcall	.+104    	; 0x12c <main>
  c4:	3b c0       	rjmp	.+118    	; 0x13c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <ADC_init>:
unsigned char LED = 0x00;
unsigned char MAX = 0x90;


void ADC_init() {
	ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 << ADATE);
  c8:	ea e7       	ldi	r30, 0x7A	; 122
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	80 6e       	ori	r24, 0xE0	; 224
  d0:	80 83       	st	Z, r24
  d2:	08 95       	ret

000000d4 <tick>:

enum state {Init, wait} state;

void tick(){
	
	switch(state)	{		//State Transitions
  d4:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <state>
  d8:	88 23       	and	r24, r24
  da:	19 f0       	breq	.+6      	; 0xe2 <tick+0xe>
  dc:	81 30       	cpi	r24, 0x01	; 1
  de:	b9 f0       	breq	.+46     	; 0x10e <tick+0x3a>
  e0:	04 c0       	rjmp	.+8      	; 0xea <tick+0x16>
		
		case(Init):
			state = wait;
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
			break;
  e8:	12 c0       	rjmp	.+36     	; 0x10e <tick+0x3a>
		case(wait):
			state = wait;
			break;
		
		default:
			state = Init;
  ea:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <state>
			break;
	}
	
	switch(state){		//State Actions
		case(Init):
			LED = 0x00;
  ee:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
			MAX = 0x90;
  f2:	80 e9       	ldi	r24, 0x90	; 144
  f4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <MAX>
			break;
  f8:	08 95       	ret
		
		case(wait):
			ANALOG_IN = ADC;
			if(ANALOG_IN >= MAX){
				LED = 0x01;
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 100:	02 c0       	rjmp	.+4      	; 0x106 <tick+0x32>
			}
			else{
				LED = 0x00;
 102:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
			}
			PORTB = LED;
 106:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 10a:	85 b9       	out	0x05, r24	; 5
			//Actions
			break;
	}
	
	
}
 10c:	08 95       	ret
			LED = 0x00;
			MAX = 0x90;
			break;
		
		case(wait):
			ANALOG_IN = ADC;
 10e:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 112:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 116:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <ANALOG_IN+0x1>
 11a:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <ANALOG_IN>
			if(ANALOG_IN >= MAX){
 11e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <MAX>
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	28 17       	cp	r18, r24
 126:	39 07       	cpc	r19, r25
 128:	40 f7       	brcc	.-48     	; 0xfa <tick+0x26>
 12a:	eb cf       	rjmp	.-42     	; 0x102 <tick+0x2e>

0000012c <main>:



int main(void)
{
	DDRB = 0x01; PORTB = 0x00;
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	84 b9       	out	0x04, r24	; 4
 130:	15 b8       	out	0x05, r1	; 5
	
	state = Init;
 132:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <state>
	
	ADC_init();
 136:	c8 df       	rcall	.-112    	; 0xc8 <ADC_init>
    
    while (1) 
    {
		tick();
 138:	cd df       	rcall	.-102    	; 0xd4 <tick>
 13a:	fe cf       	rjmp	.-4      	; 0x138 <main+0xc>

0000013c <_exit>:
 13c:	f8 94       	cli

0000013e <__stop_program>:
 13e:	ff cf       	rjmp	.-2      	; 0x13e <__stop_program>
