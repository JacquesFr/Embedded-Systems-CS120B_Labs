
jfrac001_lab4_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000382  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000030e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  00000382  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000382  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000003f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008e0  00000000  00000000  0000041c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007de  00000000  00000000  00000cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000453  00000000  00000000  000014da  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00001930  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000046a  00000000  00000000  00001964  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001dce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4c c0       	rjmp	.+152    	; 0x9a <__ctors_end>
   2:	00 00       	nop
   4:	5a c0       	rjmp	.+180    	; 0xba <__bad_interrupt>
   6:	00 00       	nop
   8:	58 c0       	rjmp	.+176    	; 0xba <__bad_interrupt>
   a:	00 00       	nop
   c:	56 c0       	rjmp	.+172    	; 0xba <__bad_interrupt>
   e:	00 00       	nop
  10:	54 c0       	rjmp	.+168    	; 0xba <__bad_interrupt>
  12:	00 00       	nop
  14:	52 c0       	rjmp	.+164    	; 0xba <__bad_interrupt>
  16:	00 00       	nop
  18:	50 c0       	rjmp	.+160    	; 0xba <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4e c0       	rjmp	.+156    	; 0xba <__bad_interrupt>
  1e:	00 00       	nop
  20:	4c c0       	rjmp	.+152    	; 0xba <__bad_interrupt>
  22:	00 00       	nop
  24:	4a c0       	rjmp	.+148    	; 0xba <__bad_interrupt>
  26:	00 00       	nop
  28:	48 c0       	rjmp	.+144    	; 0xba <__bad_interrupt>
  2a:	00 00       	nop
  2c:	46 c0       	rjmp	.+140    	; 0xba <__bad_interrupt>
  2e:	00 00       	nop
  30:	44 c0       	rjmp	.+136    	; 0xba <__bad_interrupt>
  32:	00 00       	nop
  34:	42 c0       	rjmp	.+132    	; 0xba <__bad_interrupt>
  36:	00 00       	nop
  38:	40 c0       	rjmp	.+128    	; 0xba <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3e c0       	rjmp	.+124    	; 0xba <__bad_interrupt>
  3e:	00 00       	nop
  40:	3c c0       	rjmp	.+120    	; 0xba <__bad_interrupt>
  42:	00 00       	nop
  44:	3a c0       	rjmp	.+116    	; 0xba <__bad_interrupt>
  46:	00 00       	nop
  48:	38 c0       	rjmp	.+112    	; 0xba <__bad_interrupt>
  4a:	00 00       	nop
  4c:	36 c0       	rjmp	.+108    	; 0xba <__bad_interrupt>
  4e:	00 00       	nop
  50:	34 c0       	rjmp	.+104    	; 0xba <__bad_interrupt>
  52:	00 00       	nop
  54:	32 c0       	rjmp	.+100    	; 0xba <__bad_interrupt>
  56:	00 00       	nop
  58:	30 c0       	rjmp	.+96     	; 0xba <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2e c0       	rjmp	.+92     	; 0xba <__bad_interrupt>
  5e:	00 00       	nop
  60:	2c c0       	rjmp	.+88     	; 0xba <__bad_interrupt>
  62:	00 00       	nop
  64:	2a c0       	rjmp	.+84     	; 0xba <__bad_interrupt>
  66:	00 00       	nop
  68:	28 c0       	rjmp	.+80     	; 0xba <__bad_interrupt>
  6a:	00 00       	nop
  6c:	26 c0       	rjmp	.+76     	; 0xba <__bad_interrupt>
  6e:	00 00       	nop
  70:	24 c0       	rjmp	.+72     	; 0xba <__bad_interrupt>
  72:	00 00       	nop
  74:	22 c0       	rjmp	.+68     	; 0xba <__bad_interrupt>
  76:	00 00       	nop
  78:	20 c0       	rjmp	.+64     	; 0xba <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1e c0       	rjmp	.+60     	; 0xba <__bad_interrupt>
  7e:	00 00       	nop
  80:	1c c0       	rjmp	.+56     	; 0xba <__bad_interrupt>
  82:	00 00       	nop
  84:	1a c0       	rjmp	.+52     	; 0xba <__bad_interrupt>
  86:	00 00       	nop
  88:	18 c0       	rjmp	.+48     	; 0xba <__bad_interrupt>
  8a:	00 00       	nop
  8c:	6a 00       	.word	0x006a	; ????
  8e:	6e 00       	.word	0x006e	; ????
  90:	8b 00       	.word	0x008b	; ????
  92:	a0 00       	.word	0x00a0	; ????
  94:	bb 00       	.word	0x00bb	; ????
  96:	cc 00       	.word	0x00cc	; ????
  98:	e6 00       	.word	0x00e6	; ????

0000009a <__ctors_end>:
  9a:	11 24       	eor	r1, r1
  9c:	1f be       	out	0x3f, r1	; 63
  9e:	cf ef       	ldi	r28, 0xFF	; 255
  a0:	d0 e4       	ldi	r29, 0x40	; 64
  a2:	de bf       	out	0x3e, r29	; 62
  a4:	cd bf       	out	0x3d, r28	; 61

000000a6 <__do_clear_bss>:
  a6:	21 e0       	ldi	r18, 0x01	; 1
  a8:	a0 e0       	ldi	r26, 0x00	; 0
  aa:	b1 e0       	ldi	r27, 0x01	; 1
  ac:	01 c0       	rjmp	.+2      	; 0xb0 <.do_clear_bss_start>

000000ae <.do_clear_bss_loop>:
  ae:	1d 92       	st	X+, r1

000000b0 <.do_clear_bss_start>:
  b0:	a6 30       	cpi	r26, 0x06	; 6
  b2:	b2 07       	cpc	r27, r18
  b4:	e1 f7       	brne	.-8      	; 0xae <.do_clear_bss_loop>
  b6:	15 d1       	rcall	.+554    	; 0x2e2 <main>
  b8:	28 c1       	rjmp	.+592    	; 0x30a <_exit>

000000ba <__bad_interrupt>:
  ba:	a2 cf       	rjmp	.-188    	; 0x0 <__vectors>

000000bc <tick>:
unsigned char locking = 0x00;
unsigned char unlocking = 0x00;

void tick(){
	
	switch(state)	{		//State Transitions
  bc:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <state>
  c0:	8e 2f       	mov	r24, r30
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	87 30       	cpi	r24, 0x07	; 7
  c6:	91 05       	cpc	r25, r1
  c8:	08 f0       	brcs	.+2      	; 0xcc <tick+0x10>
  ca:	84 c0       	rjmp	.+264    	; 0x1d4 <tick+0x118>
  cc:	fc 01       	movw	r30, r24
  ce:	ea 5b       	subi	r30, 0xBA	; 186
  d0:	ff 4f       	sbci	r31, 0xFF	; 255
  d2:	12 c1       	rjmp	.+548    	; 0x2f8 <__tablejump2__>
		
		case(Init):
			state = wait;
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <state>
		break;
  da:	95 c0       	rjmp	.+298    	; 0x206 <tick+0x14a>
		
		case(wait):
		
			if((x == 0) && (y == 0) && (hash0 & 0x04)){
  dc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <x>
  e0:	81 11       	cpse	r24, r1
  e2:	0c c0       	rjmp	.+24     	; 0xfc <tick+0x40>
  e4:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <y>
  e8:	81 11       	cpse	r24, r1
  ea:	08 c0       	rjmp	.+16     	; 0xfc <tick+0x40>
  ec:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <hash0>
  f0:	82 ff       	sbrs	r24, 2
  f2:	04 c0       	rjmp	.+8      	; 0xfc <tick+0x40>
				state = pound_pressed;
  f4:	82 e0       	ldi	r24, 0x02	; 2
  f6:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <state>
  fa:	98 c0       	rjmp	.+304    	; 0x22c <tick+0x170>
			}
			
			else if ((locking & 0x80) && (unlocking & 0x01)) {
  fc:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <locking>
 100:	88 23       	and	r24, r24
 102:	0c f0       	brlt	.+2      	; 0x106 <tick+0x4a>
 104:	80 c0       	rjmp	.+256    	; 0x206 <tick+0x14a>
 106:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 10a:	80 ff       	sbrs	r24, 0
 10c:	7c c0       	rjmp	.+248    	; 0x206 <tick+0x14a>
				state = lock_pressed;
 10e:	85 e0       	ldi	r24, 0x05	; 5
 110:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <state>
 114:	c9 c0       	rjmp	.+402    	; 0x2a8 <tick+0x1ec>
			
		break;
		
		case(pound_pressed):
		
			if((x == 0) && (y == 0) && (hash0 & 0x04)){
 116:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <x>
 11a:	81 11       	cpse	r24, r1
 11c:	0d c0       	rjmp	.+26     	; 0x138 <tick+0x7c>
 11e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <y>
 122:	81 11       	cpse	r24, r1
 124:	09 c0       	rjmp	.+18     	; 0x138 <tick+0x7c>
 126:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <hash0>
 12a:	82 fd       	sbrc	r24, 2
 12c:	7f c0       	rjmp	.+254    	; 0x22c <tick+0x170>
 12e:	d3 c0       	rjmp	.+422    	; 0x2d6 <tick+0x21a>
				state = pound_pressed;
			}
			else if((x == 0) && (y == 0) && (hash0 == 0)){
				state = pound_lift_up;
 130:	83 e0       	ldi	r24, 0x03	; 3
 132:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <state>
 136:	8d c0       	rjmp	.+282    	; 0x252 <tick+0x196>
			}
			
			else{
				state = wait;
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <state>
 13e:	63 c0       	rjmp	.+198    	; 0x206 <tick+0x14a>
			}
			
		break;
		
		case(pound_lift_up):
			if((x == 0) && (y & 0x02) && (hash0 == 0) ){
 140:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <x>
 144:	81 11       	cpse	r24, r1
 146:	13 c0       	rjmp	.+38     	; 0x16e <tick+0xb2>
 148:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <y>
 14c:	81 ff       	sbrs	r24, 1
 14e:	08 c0       	rjmp	.+16     	; 0x160 <tick+0xa4>
 150:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <hash0>
 154:	81 11       	cpse	r24, r1
 156:	0b c0       	rjmp	.+22     	; 0x16e <tick+0xb2>
				state = open;
 158:	84 e0       	ldi	r24, 0x04	; 4
 15a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <state>
 15e:	8c c0       	rjmp	.+280    	; 0x278 <tick+0x1bc>
			}
			else if((x == 0) && (y == 0) && (hash0 == 0)){
 160:	81 11       	cpse	r24, r1
 162:	05 c0       	rjmp	.+10     	; 0x16e <tick+0xb2>
 164:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <hash0>
 168:	88 23       	and	r24, r24
 16a:	09 f4       	brne	.+2      	; 0x16e <tick+0xb2>
 16c:	72 c0       	rjmp	.+228    	; 0x252 <tick+0x196>
				state = pound_lift_up;
			}
			else{
				state = wait;
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <state>
 174:	48 c0       	rjmp	.+144    	; 0x206 <tick+0x14a>
			}
		break;
		
		case(open):
			if((x == 0) && (y & 0x02) && (hash0 == 0)){
 176:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <x>
 17a:	81 11       	cpse	r24, r1
 17c:	09 c0       	rjmp	.+18     	; 0x190 <tick+0xd4>
 17e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <y>
 182:	81 ff       	sbrs	r24, 1
 184:	05 c0       	rjmp	.+10     	; 0x190 <tick+0xd4>
 186:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <hash0>
 18a:	88 23       	and	r24, r24
 18c:	09 f4       	brne	.+2      	; 0x190 <tick+0xd4>
 18e:	74 c0       	rjmp	.+232    	; 0x278 <tick+0x1bc>
				state = open;
			}
			else{
				state = wait;
 190:	81 e0       	ldi	r24, 0x01	; 1
 192:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <state>
 196:	37 c0       	rjmp	.+110    	; 0x206 <tick+0x14a>
			}
		break;
		
		case(lock_pressed):
			if(locking & 0x80){
 198:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <locking>
 19c:	88 23       	and	r24, r24
 19e:	0c f4       	brge	.+2      	; 0x1a2 <tick+0xe6>
 1a0:	83 c0       	rjmp	.+262    	; 0x2a8 <tick+0x1ec>
				state = lock_pressed;
			}
			else{
				state = lock_lift_up;
 1a2:	96 e0       	ldi	r25, 0x06	; 6
 1a4:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <state>
			
			PORTC = state;
		break;
		
		case(lock_lift_up):
			x = PINA & 0x01;
 1a8:	80 b1       	in	r24, 0x00	; 0
 1aa:	81 70       	andi	r24, 0x01	; 1
 1ac:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <x>
			y = PINA & 0x02;
 1b0:	80 b1       	in	r24, 0x00	; 0
 1b2:	82 70       	andi	r24, 0x02	; 2
 1b4:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <y>
			hash0 = PINA & 0x04;
 1b8:	80 b1       	in	r24, 0x00	; 0
 1ba:	84 70       	andi	r24, 0x04	; 4
 1bc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <hash0>
			locking = PINA & 0x80;
 1c0:	80 b1       	in	r24, 0x00	; 0
 1c2:	80 78       	andi	r24, 0x80	; 128
 1c4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <locking>
			
			PORTC = state;
 1c8:	98 b9       	out	0x08, r25	; 8
		break;
 1ca:	08 95       	ret
				state = lock_lift_up;
			}
		break;
		
		case(lock_lift_up):
			state = wait;
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <state>
		break;
 1d2:	19 c0       	rjmp	.+50     	; 0x206 <tick+0x14a>
		
		default:
			state = Init;
 1d4:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <state>
		break;
	}
	
	switch(state){		//State Actions
		case(Init):
			x = PINA & 0x01;
 1d8:	80 b1       	in	r24, 0x00	; 0
 1da:	81 70       	andi	r24, 0x01	; 1
 1dc:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <x>
			y = PINA & 0x02;
 1e0:	80 b1       	in	r24, 0x00	; 0
 1e2:	82 70       	andi	r24, 0x02	; 2
 1e4:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <y>
			hash0 = PINA & 0x04;
 1e8:	80 b1       	in	r24, 0x00	; 0
 1ea:	84 70       	andi	r24, 0x04	; 4
 1ec:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <hash0>
			locking = PINA & 0x80;
 1f0:	80 b1       	in	r24, 0x00	; 0
 1f2:	80 78       	andi	r24, 0x80	; 128
 1f4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <locking>
			
			unlocking = 0x00;
 1f8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			PORTB = unlocking;
 1fc:	15 b8       	out	0x05, r1	; 5
			PORTC = state;
 1fe:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <state>
 202:	88 b9       	out	0x08, r24	; 8
		
		default:
			state = Init;
		break;
	}
}
 204:	08 95       	ret
			PORTB = unlocking;
			PORTC = state;
		break;
		
		case(wait):
			x = PINA & 0x01;
 206:	80 b1       	in	r24, 0x00	; 0
 208:	81 70       	andi	r24, 0x01	; 1
 20a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <x>
			y = PINA & 0x02;
 20e:	80 b1       	in	r24, 0x00	; 0
 210:	82 70       	andi	r24, 0x02	; 2
 212:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <y>
			hash0 = PINA & 0x04;
 216:	80 b1       	in	r24, 0x00	; 0
 218:	84 70       	andi	r24, 0x04	; 4
 21a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <hash0>
			locking = PINA & 0x80;
 21e:	80 b1       	in	r24, 0x00	; 0
 220:	80 78       	andi	r24, 0x80	; 128
 222:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <locking>
			
			PORTC = state;
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	88 b9       	out	0x08, r24	; 8
		break;
 22a:	08 95       	ret
		
		case(pound_pressed):
			x = PINA & 0x01;
 22c:	80 b1       	in	r24, 0x00	; 0
 22e:	81 70       	andi	r24, 0x01	; 1
 230:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <x>
			y = PINA & 0x02;
 234:	80 b1       	in	r24, 0x00	; 0
 236:	82 70       	andi	r24, 0x02	; 2
 238:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <y>
			hash0 = PINA & 0x04;
 23c:	80 b1       	in	r24, 0x00	; 0
 23e:	84 70       	andi	r24, 0x04	; 4
 240:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <hash0>
			locking = PINA & 0x80;
 244:	80 b1       	in	r24, 0x00	; 0
 246:	80 78       	andi	r24, 0x80	; 128
 248:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <locking>
			
			PORTC = state;
 24c:	82 e0       	ldi	r24, 0x02	; 2
 24e:	88 b9       	out	0x08, r24	; 8
		break;
 250:	08 95       	ret
		
		case(pound_lift_up):
			x = PINA & 0x01;
 252:	80 b1       	in	r24, 0x00	; 0
 254:	81 70       	andi	r24, 0x01	; 1
 256:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <x>
			y = PINA & 0x02;
 25a:	80 b1       	in	r24, 0x00	; 0
 25c:	82 70       	andi	r24, 0x02	; 2
 25e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <y>
			hash0 = PINA & 0x04;
 262:	80 b1       	in	r24, 0x00	; 0
 264:	84 70       	andi	r24, 0x04	; 4
 266:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <hash0>
			locking = PINA & 0x80;
 26a:	80 b1       	in	r24, 0x00	; 0
 26c:	80 78       	andi	r24, 0x80	; 128
 26e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <locking>
			
			PORTC = state;
 272:	83 e0       	ldi	r24, 0x03	; 3
 274:	88 b9       	out	0x08, r24	; 8
		break;
 276:	08 95       	ret
		
		case(open):
			unlocking = 0x01;
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			PORTB = unlocking;
 27e:	85 b9       	out	0x05, r24	; 5
			
			x = PINA & 0x01;
 280:	80 b1       	in	r24, 0x00	; 0
 282:	81 70       	andi	r24, 0x01	; 1
 284:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <x>
			y = PINA & 0x02;
 288:	80 b1       	in	r24, 0x00	; 0
 28a:	82 70       	andi	r24, 0x02	; 2
 28c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <y>
			hash0 = PINA & 0x04;
 290:	80 b1       	in	r24, 0x00	; 0
 292:	84 70       	andi	r24, 0x04	; 4
 294:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <hash0>
			locking = PINA & 0x80;
 298:	80 b1       	in	r24, 0x00	; 0
 29a:	80 78       	andi	r24, 0x80	; 128
 29c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <locking>
			
			PORTC = state;
 2a0:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <state>
 2a4:	88 b9       	out	0x08, r24	; 8
		break;
 2a6:	08 95       	ret
		
		case(lock_pressed):
			unlocking = 0x00;
 2a8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			PORTB = unlocking;
 2ac:	15 b8       	out	0x05, r1	; 5
			
			x = PINA & 0x01;
 2ae:	80 b1       	in	r24, 0x00	; 0
 2b0:	81 70       	andi	r24, 0x01	; 1
 2b2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <x>
			y = PINA & 0x02;
 2b6:	80 b1       	in	r24, 0x00	; 0
 2b8:	82 70       	andi	r24, 0x02	; 2
 2ba:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <y>
			hash0 = PINA & 0x04;
 2be:	80 b1       	in	r24, 0x00	; 0
 2c0:	84 70       	andi	r24, 0x04	; 4
 2c2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <hash0>
			locking = PINA & 0x80;
 2c6:	80 b1       	in	r24, 0x00	; 0
 2c8:	80 78       	andi	r24, 0x80	; 128
 2ca:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <locking>
			
			PORTC = state;
 2ce:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <state>
 2d2:	88 b9       	out	0x08, r24	; 8
		break;
 2d4:	08 95       	ret
		case(pound_pressed):
		
			if((x == 0) && (y == 0) && (hash0 & 0x04)){
				state = pound_pressed;
			}
			else if((x == 0) && (y == 0) && (hash0 == 0)){
 2d6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <hash0>
 2da:	88 23       	and	r24, r24
 2dc:	09 f4       	brne	.+2      	; 0x2e0 <tick+0x224>
 2de:	28 cf       	rjmp	.-432    	; 0x130 <tick+0x74>
 2e0:	2b cf       	rjmp	.-426    	; 0x138 <tick+0x7c>

000002e2 <main>:
}


int main(void)
{
	DDRA = 0x00; PINA = 0xFF;
 2e2:	11 b8       	out	0x01, r1	; 1
 2e4:	8f ef       	ldi	r24, 0xFF	; 255
 2e6:	80 b9       	out	0x00, r24	; 0
	DDRB = 0xFF; PINB = 0x00;
 2e8:	84 b9       	out	0x04, r24	; 4
 2ea:	13 b8       	out	0x03, r1	; 3
	DDRC = 0xFF; PINC = 0x00;
 2ec:	87 b9       	out	0x07, r24	; 7
 2ee:	16 b8       	out	0x06, r1	; 6

	state = Init;
 2f0:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <state>
	
	while (1)
	{
		tick();
 2f4:	e3 de       	rcall	.-570    	; 0xbc <tick>
 2f6:	fe cf       	rjmp	.-4      	; 0x2f4 <main+0x12>

000002f8 <__tablejump2__>:
 2f8:	ee 0f       	add	r30, r30
 2fa:	ff 1f       	adc	r31, r31
 2fc:	00 24       	eor	r0, r0
 2fe:	00 1c       	adc	r0, r0
 300:	0b be       	out	0x3b, r0	; 59
 302:	07 90       	elpm	r0, Z+
 304:	f6 91       	elpm	r31, Z
 306:	e0 2d       	mov	r30, r0
 308:	09 94       	ijmp

0000030a <_exit>:
 30a:	f8 94       	cli

0000030c <__stop_program>:
 30c:	ff cf       	rjmp	.-2      	; 0x30c <__stop_program>
