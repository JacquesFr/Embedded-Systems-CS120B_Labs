
jfrac001_lab4_part5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000048c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000418  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  0000048c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000910  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007de  00000000  00000000  00000e34  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000578  00000000  00000000  00001612  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00001b8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000481  00000000  00000000  00001bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00002041  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4e c0       	rjmp	.+156    	; 0x9e <__ctors_end>
   2:	00 00       	nop
   4:	5c c0       	rjmp	.+184    	; 0xbe <__bad_interrupt>
   6:	00 00       	nop
   8:	5a c0       	rjmp	.+180    	; 0xbe <__bad_interrupt>
   a:	00 00       	nop
   c:	58 c0       	rjmp	.+176    	; 0xbe <__bad_interrupt>
   e:	00 00       	nop
  10:	56 c0       	rjmp	.+172    	; 0xbe <__bad_interrupt>
  12:	00 00       	nop
  14:	54 c0       	rjmp	.+168    	; 0xbe <__bad_interrupt>
  16:	00 00       	nop
  18:	52 c0       	rjmp	.+164    	; 0xbe <__bad_interrupt>
  1a:	00 00       	nop
  1c:	50 c0       	rjmp	.+160    	; 0xbe <__bad_interrupt>
  1e:	00 00       	nop
  20:	4e c0       	rjmp	.+156    	; 0xbe <__bad_interrupt>
  22:	00 00       	nop
  24:	4c c0       	rjmp	.+152    	; 0xbe <__bad_interrupt>
  26:	00 00       	nop
  28:	4a c0       	rjmp	.+148    	; 0xbe <__bad_interrupt>
  2a:	00 00       	nop
  2c:	48 c0       	rjmp	.+144    	; 0xbe <__bad_interrupt>
  2e:	00 00       	nop
  30:	46 c0       	rjmp	.+140    	; 0xbe <__bad_interrupt>
  32:	00 00       	nop
  34:	44 c0       	rjmp	.+136    	; 0xbe <__bad_interrupt>
  36:	00 00       	nop
  38:	42 c0       	rjmp	.+132    	; 0xbe <__bad_interrupt>
  3a:	00 00       	nop
  3c:	40 c0       	rjmp	.+128    	; 0xbe <__bad_interrupt>
  3e:	00 00       	nop
  40:	3e c0       	rjmp	.+124    	; 0xbe <__bad_interrupt>
  42:	00 00       	nop
  44:	3c c0       	rjmp	.+120    	; 0xbe <__bad_interrupt>
  46:	00 00       	nop
  48:	3a c0       	rjmp	.+116    	; 0xbe <__bad_interrupt>
  4a:	00 00       	nop
  4c:	38 c0       	rjmp	.+112    	; 0xbe <__bad_interrupt>
  4e:	00 00       	nop
  50:	36 c0       	rjmp	.+108    	; 0xbe <__bad_interrupt>
  52:	00 00       	nop
  54:	34 c0       	rjmp	.+104    	; 0xbe <__bad_interrupt>
  56:	00 00       	nop
  58:	32 c0       	rjmp	.+100    	; 0xbe <__bad_interrupt>
  5a:	00 00       	nop
  5c:	30 c0       	rjmp	.+96     	; 0xbe <__bad_interrupt>
  5e:	00 00       	nop
  60:	2e c0       	rjmp	.+92     	; 0xbe <__bad_interrupt>
  62:	00 00       	nop
  64:	2c c0       	rjmp	.+88     	; 0xbe <__bad_interrupt>
  66:	00 00       	nop
  68:	2a c0       	rjmp	.+84     	; 0xbe <__bad_interrupt>
  6a:	00 00       	nop
  6c:	28 c0       	rjmp	.+80     	; 0xbe <__bad_interrupt>
  6e:	00 00       	nop
  70:	26 c0       	rjmp	.+76     	; 0xbe <__bad_interrupt>
  72:	00 00       	nop
  74:	24 c0       	rjmp	.+72     	; 0xbe <__bad_interrupt>
  76:	00 00       	nop
  78:	22 c0       	rjmp	.+68     	; 0xbe <__bad_interrupt>
  7a:	00 00       	nop
  7c:	20 c0       	rjmp	.+64     	; 0xbe <__bad_interrupt>
  7e:	00 00       	nop
  80:	1e c0       	rjmp	.+60     	; 0xbe <__bad_interrupt>
  82:	00 00       	nop
  84:	1c c0       	rjmp	.+56     	; 0xbe <__bad_interrupt>
  86:	00 00       	nop
  88:	1a c0       	rjmp	.+52     	; 0xbe <__bad_interrupt>
  8a:	00 00       	nop
  8c:	6c 00       	.word	0x006c	; ????
  8e:	70 00       	.word	0x0070	; ????
  90:	8d 00       	.word	0x008d	; ????
  92:	a2 00       	.word	0x00a2	; ????
  94:	09 01       	movw	r0, r18
  96:	51 01       	movw	r10, r2
  98:	6b 01       	movw	r12, r22
  9a:	48 01       	movw	r8, r16
  9c:	3f 01       	movw	r6, r30

0000009e <__ctors_end>:
  9e:	11 24       	eor	r1, r1
  a0:	1f be       	out	0x3f, r1	; 63
  a2:	cf ef       	ldi	r28, 0xFF	; 255
  a4:	d0 e4       	ldi	r29, 0x40	; 64
  a6:	de bf       	out	0x3e, r29	; 62
  a8:	cd bf       	out	0x3d, r28	; 61

000000aa <__do_clear_bss>:
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	a0 e0       	ldi	r26, 0x00	; 0
  ae:	b1 e0       	ldi	r27, 0x01	; 1
  b0:	01 c0       	rjmp	.+2      	; 0xb4 <.do_clear_bss_start>

000000b2 <.do_clear_bss_loop>:
  b2:	1d 92       	st	X+, r1

000000b4 <.do_clear_bss_start>:
  b4:	a8 30       	cpi	r26, 0x08	; 8
  b6:	b2 07       	cpc	r27, r18
  b8:	e1 f7       	brne	.-8      	; 0xb2 <.do_clear_bss_loop>
  ba:	98 d1       	rcall	.+816    	; 0x3ec <main>
  bc:	ab c1       	rjmp	.+854    	; 0x414 <_exit>

000000be <__bad_interrupt>:
  be:	a0 cf       	rjmp	.-192    	; 0x0 <__vectors>

000000c0 <tick>:
unsigned char count = 0x00;


void tick(){
	
	switch(state)	{		//State Transitions
  c0:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <state>
  c4:	8e 2f       	mov	r24, r30
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	89 30       	cpi	r24, 0x09	; 9
  ca:	91 05       	cpc	r25, r1
  cc:	08 f0       	brcs	.+2      	; 0xd0 <tick+0x10>
  ce:	07 c1       	rjmp	.+526    	; 0x2de <tick+0x21e>
  d0:	fc 01       	movw	r30, r24
  d2:	ea 5b       	subi	r30, 0xBA	; 186
  d4:	ff 4f       	sbci	r31, 0xFF	; 255
  d6:	95 c1       	rjmp	.+810    	; 0x402 <__tablejump2__>
		
		case(Init):
			state = wait;
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <state>
		break;
  de:	18 c1       	rjmp	.+560    	; 0x310 <tick+0x250>
		
		case(wait):
		
			if((x == 0) && (y == 0) && (hash0 & 0x04)){
  e0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <x>
  e4:	81 11       	cpse	r24, r1
  e6:	0c c0       	rjmp	.+24     	; 0x100 <tick+0x40>
  e8:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <y>
  ec:	81 11       	cpse	r24, r1
  ee:	08 c0       	rjmp	.+16     	; 0x100 <tick+0x40>
  f0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <hash0>
  f4:	82 ff       	sbrs	r24, 2
  f6:	04 c0       	rjmp	.+8      	; 0x100 <tick+0x40>
				state = pound_pressed;
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <state>
  fe:	1d c1       	rjmp	.+570    	; 0x33a <tick+0x27a>
			}
			
			else if ((locking & 0x80) && (unlocking & 0x01)) {
 100:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <locking>
 104:	88 23       	and	r24, r24
 106:	0c f0       	brlt	.+2      	; 0x10a <tick+0x4a>
 108:	03 c1       	rjmp	.+518    	; 0x310 <tick+0x250>
 10a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <unlocking>
 10e:	80 ff       	sbrs	r24, 0
 110:	ff c0       	rjmp	.+510    	; 0x310 <tick+0x250>
				state = lock_pressed;
 112:	85 e0       	ldi	r24, 0x05	; 5
 114:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <state>
 118:	4c c1       	rjmp	.+664    	; 0x3b2 <tick+0x2f2>
			
		break;
		
		case(pound_pressed):
		
			if((x == 0) && (y == 0) && (hash0 & 0x04)){
 11a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <x>
 11e:	81 11       	cpse	r24, r1
 120:	0d c0       	rjmp	.+26     	; 0x13c <tick+0x7c>
 122:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <y>
 126:	81 11       	cpse	r24, r1
 128:	09 c0       	rjmp	.+18     	; 0x13c <tick+0x7c>
 12a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <hash0>
 12e:	82 fd       	sbrc	r24, 2
 130:	04 c1       	rjmp	.+520    	; 0x33a <tick+0x27a>
 132:	56 c1       	rjmp	.+684    	; 0x3e0 <tick+0x320>
				state = pound_pressed;
			}
			else if((x == 0) && (y == 0) && (hash0 == 0)){
				state = pound_lift_up;
 134:	83 e0       	ldi	r24, 0x03	; 3
 136:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <state>
 13a:	12 c1       	rjmp	.+548    	; 0x360 <tick+0x2a0>
			}
			
			else{
				state = wait;
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <state>
 142:	e6 c0       	rjmp	.+460    	; 0x310 <tick+0x250>
			}
			
		break;
		
		case(pound_lift_up):
			if(count == 0){
 144:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 148:	81 11       	cpse	r24, r1
 14a:	10 c0       	rjmp	.+32     	; 0x16c <tick+0xac>
				if((x & 0x01) && (y == 0) && (hash0 == 0)){
 14c:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <x>
 150:	90 ff       	sbrs	r25, 0
 152:	06 c1       	rjmp	.+524    	; 0x360 <tick+0x2a0>
 154:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <y>
 158:	91 11       	cpse	r25, r1
 15a:	02 c1       	rjmp	.+516    	; 0x360 <tick+0x2a0>
 15c:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <hash0>
 160:	91 11       	cpse	r25, r1
 162:	fe c0       	rjmp	.+508    	; 0x360 <tick+0x2a0>
					state = open;
 164:	94 e0       	ldi	r25, 0x04	; 4
 166:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <state>
 16a:	0d c1       	rjmp	.+538    	; 0x386 <tick+0x2c6>
				}
			}
			
			else if(count & 0x01){
 16c:	80 ff       	sbrs	r24, 0
 16e:	1f c0       	rjmp	.+62     	; 0x1ae <tick+0xee>
				if((x == 0) && (y & 0x02) && (hash0 == 0)){
 170:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <x>
 174:	91 11       	cpse	r25, r1
 176:	0c c0       	rjmp	.+24     	; 0x190 <tick+0xd0>
 178:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <y>
 17c:	91 ff       	sbrs	r25, 1
 17e:	13 c0       	rjmp	.+38     	; 0x1a6 <tick+0xe6>
 180:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <hash0>
 184:	91 11       	cpse	r25, r1
 186:	0f c0       	rjmp	.+30     	; 0x1a6 <tick+0xe6>
					state = open;
 188:	94 e0       	ldi	r25, 0x04	; 4
 18a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <state>
 18e:	fb c0       	rjmp	.+502    	; 0x386 <tick+0x2c6>
				}
				else if((x & 0x01) && (y == 0) && (hash0 == 0)){
 190:	90 ff       	sbrs	r25, 0
 192:	09 c0       	rjmp	.+18     	; 0x1a6 <tick+0xe6>
 194:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <y>
 198:	81 11       	cpse	r24, r1
 19a:	05 c0       	rjmp	.+10     	; 0x1a6 <tick+0xe6>
 19c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <hash0>
 1a0:	88 23       	and	r24, r24
 1a2:	09 f4       	brne	.+2      	; 0x1a6 <tick+0xe6>
 1a4:	dd c0       	rjmp	.+442    	; 0x360 <tick+0x2a0>
					state = pound_lift_up;
				}
				else{
					state = wait;
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <state>
 1ac:	b1 c0       	rjmp	.+354    	; 0x310 <tick+0x250>
				}
			}
			
			else if(count & 0x02){
 1ae:	81 ff       	sbrs	r24, 1
 1b0:	1f c0       	rjmp	.+62     	; 0x1f0 <tick+0x130>
				if((x & 0x01) && (y == 0) && (hash0 == 0)){
 1b2:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <x>
 1b6:	90 ff       	sbrs	r25, 0
 1b8:	0c c0       	rjmp	.+24     	; 0x1d2 <tick+0x112>
 1ba:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <y>
 1be:	21 11       	cpse	r18, r1
 1c0:	08 c0       	rjmp	.+16     	; 0x1d2 <tick+0x112>
 1c2:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <hash0>
 1c6:	91 11       	cpse	r25, r1
 1c8:	0f c0       	rjmp	.+30     	; 0x1e8 <tick+0x128>
					state = open;
 1ca:	94 e0       	ldi	r25, 0x04	; 4
 1cc:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <state>
 1d0:	da c0       	rjmp	.+436    	; 0x386 <tick+0x2c6>
				}
				else if((x == 0) && (y & 0x02) && (hash0 == 0)){
 1d2:	91 11       	cpse	r25, r1
 1d4:	09 c0       	rjmp	.+18     	; 0x1e8 <tick+0x128>
 1d6:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <y>
 1da:	81 ff       	sbrs	r24, 1
 1dc:	05 c0       	rjmp	.+10     	; 0x1e8 <tick+0x128>
 1de:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <hash0>
 1e2:	88 23       	and	r24, r24
 1e4:	09 f4       	brne	.+2      	; 0x1e8 <tick+0x128>
 1e6:	bc c0       	rjmp	.+376    	; 0x360 <tick+0x2a0>
					state = pound_lift_up;
				}
				else{
					state = wait;
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <state>
 1ee:	90 c0       	rjmp	.+288    	; 0x310 <tick+0x250>
				}
			}
			
			else{
				if((x & 0x01) && (y == 0) && (hash0 == 0)){
 1f0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <x>
 1f4:	80 ff       	sbrs	r24, 0
 1f6:	09 c0       	rjmp	.+18     	; 0x20a <tick+0x14a>
 1f8:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <y>
 1fc:	81 11       	cpse	r24, r1
 1fe:	05 c0       	rjmp	.+10     	; 0x20a <tick+0x14a>
 200:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <hash0>
 204:	88 23       	and	r24, r24
 206:	09 f4       	brne	.+2      	; 0x20a <tick+0x14a>
 208:	ab c0       	rjmp	.+342    	; 0x360 <tick+0x2a0>
					state = pound_lift_up;
				}
				else{
					state = wait;
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <state>
 210:	7f c0       	rjmp	.+254    	; 0x310 <tick+0x250>
			
		break;
		
		case(open):
		
			if(count < 3){
 212:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 216:	83 30       	cpi	r24, 0x03	; 3
 218:	20 f4       	brcc	.+8      	; 0x222 <tick+0x162>
				state = pound_lift_up;
 21a:	83 e0       	ldi	r24, 0x03	; 3
 21c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <state>
 220:	9f c0       	rjmp	.+318    	; 0x360 <tick+0x2a0>
			}
		
			else{
				if(lockcheck == 0){
 222:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <lockcheck>
 226:	81 11       	cpse	r24, r1
 228:	15 c0       	rjmp	.+42     	; 0x254 <tick+0x194>
					state = unlock;
 22a:	97 e0       	ldi	r25, 0x07	; 7
 22c:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <state>
			PORTC = state;
			
		break;
		
		case(unlock):
			x = PINA & 0x01;
 230:	80 b1       	in	r24, 0x00	; 0
 232:	81 70       	andi	r24, 0x01	; 1
 234:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <x>
			y = PINA & 0x02;
 238:	80 b1       	in	r24, 0x00	; 0
 23a:	82 70       	andi	r24, 0x02	; 2
 23c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <y>
			hash0 = PINA & 0x04;
 240:	80 b1       	in	r24, 0x00	; 0
 242:	84 70       	andi	r24, 0x04	; 4
 244:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <hash0>
			locking = PINA & 0x80;
 248:	80 b1       	in	r24, 0x00	; 0
 24a:	80 78       	andi	r24, 0x80	; 128
 24c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <locking>
			
			PORTC = state;
 250:	98 b9       	out	0x08, r25	; 8
			
		break;
 252:	08 95       	ret
				if(lockcheck == 0){
					state = unlock;
				}
				
				else{
					state = lock;
 254:	98 e0       	ldi	r25, 0x08	; 8
 256:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <state>
			
		break;
		
		case(lock):
			
			x = PINA & 0x01;
 25a:	80 b1       	in	r24, 0x00	; 0
 25c:	81 70       	andi	r24, 0x01	; 1
 25e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <x>
			y = PINA & 0x02;
 262:	80 b1       	in	r24, 0x00	; 0
 264:	82 70       	andi	r24, 0x02	; 2
 266:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <y>
			hash0 = PINA & 0x04;
 26a:	80 b1       	in	r24, 0x00	; 0
 26c:	84 70       	andi	r24, 0x04	; 4
 26e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <hash0>
			locking = PINA & 0x80;
 272:	80 b1       	in	r24, 0x00	; 0
 274:	80 78       	andi	r24, 0x80	; 128
 276:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <locking>
			
			PORTC = state;
 27a:	98 b9       	out	0x08, r25	; 8
			
		break;
 27c:	08 95       	ret
			}
			
		break;
		
		case(lock):	
			lockcheck = 0x00;
 27e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <lockcheck>
			unlocking = 0x00;
 282:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <unlocking>
			PORTB = unlocking;
 286:	15 b8       	out	0x05, r1	; 5
			state = wait;
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <state>
		break;
 28e:	40 c0       	rjmp	.+128    	; 0x310 <tick+0x250>
		
		case(unlock):
			lockcheck = 0x01;
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <lockcheck>
			unlocking = 0x01;
 296:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <unlocking>
			PORTB = unlocking;
 29a:	85 b9       	out	0x05, r24	; 5
			state = wait;
 29c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <state>
		break;
 2a0:	37 c0       	rjmp	.+110    	; 0x310 <tick+0x250>
		
		case(lock_pressed):
			if(locking & 0x80){
 2a2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <locking>
 2a6:	88 23       	and	r24, r24
 2a8:	0c f4       	brge	.+2      	; 0x2ac <tick+0x1ec>
 2aa:	83 c0       	rjmp	.+262    	; 0x3b2 <tick+0x2f2>
				state = lock_pressed;
			}
			else{
				state = lock_lift_up;
 2ac:	96 e0       	ldi	r25, 0x06	; 6
 2ae:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <state>
			
			PORTC = state;
		break;
		
		case(lock_lift_up):
			x = PINA & 0x01;
 2b2:	80 b1       	in	r24, 0x00	; 0
 2b4:	81 70       	andi	r24, 0x01	; 1
 2b6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <x>
			y = PINA & 0x02;
 2ba:	80 b1       	in	r24, 0x00	; 0
 2bc:	82 70       	andi	r24, 0x02	; 2
 2be:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <y>
			hash0 = PINA & 0x04;
 2c2:	80 b1       	in	r24, 0x00	; 0
 2c4:	84 70       	andi	r24, 0x04	; 4
 2c6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <hash0>
			locking = PINA & 0x80;
 2ca:	80 b1       	in	r24, 0x00	; 0
 2cc:	80 78       	andi	r24, 0x80	; 128
 2ce:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <locking>
			
			PORTC = state;
 2d2:	98 b9       	out	0x08, r25	; 8
		break;
 2d4:	08 95       	ret
				state = lock_lift_up;
			}
		break;
		
		case(lock_lift_up):
			state = wait;
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <state>
		break;
 2dc:	19 c0       	rjmp	.+50     	; 0x310 <tick+0x250>
		
		default:
			state = Init;
 2de:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <state>
		break;
	}
	
	switch(state){		//State Actions
		case(Init):
			x = PINA & 0x01;
 2e2:	80 b1       	in	r24, 0x00	; 0
 2e4:	81 70       	andi	r24, 0x01	; 1
 2e6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <x>
			y = PINA & 0x02;
 2ea:	80 b1       	in	r24, 0x00	; 0
 2ec:	82 70       	andi	r24, 0x02	; 2
 2ee:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <y>
			hash0 = PINA & 0x04;
 2f2:	80 b1       	in	r24, 0x00	; 0
 2f4:	84 70       	andi	r24, 0x04	; 4
 2f6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <hash0>
			locking = PINA & 0x80;
 2fa:	80 b1       	in	r24, 0x00	; 0
 2fc:	80 78       	andi	r24, 0x80	; 128
 2fe:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <locking>
			
			unlocking = 0x00;
 302:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <unlocking>
			PORTB = unlocking;
 306:	15 b8       	out	0x05, r1	; 5
			PORTC = state;
 308:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <state>
 30c:	88 b9       	out	0x08, r24	; 8
		
		default:
			state = Init;
		break;
	}
}
 30e:	08 95       	ret
			PORTB = unlocking;
			PORTC = state;
		break;
		
		case(wait):
			x = PINA & 0x01;
 310:	80 b1       	in	r24, 0x00	; 0
 312:	81 70       	andi	r24, 0x01	; 1
 314:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <x>
			y = PINA & 0x02;
 318:	80 b1       	in	r24, 0x00	; 0
 31a:	82 70       	andi	r24, 0x02	; 2
 31c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <y>
			hash0 = PINA & 0x04;
 320:	80 b1       	in	r24, 0x00	; 0
 322:	84 70       	andi	r24, 0x04	; 4
 324:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <hash0>
			locking = PINA & 0x80;
 328:	80 b1       	in	r24, 0x00	; 0
 32a:	80 78       	andi	r24, 0x80	; 128
 32c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <locking>
			count = 0x00;
 330:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			PORTC = state;
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	88 b9       	out	0x08, r24	; 8
		break;
 338:	08 95       	ret
		
		case(pound_pressed):
			x = PINA & 0x01;
 33a:	80 b1       	in	r24, 0x00	; 0
 33c:	81 70       	andi	r24, 0x01	; 1
 33e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <x>
			y = PINA & 0x02;
 342:	80 b1       	in	r24, 0x00	; 0
 344:	82 70       	andi	r24, 0x02	; 2
 346:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <y>
			hash0 = PINA & 0x04;
 34a:	80 b1       	in	r24, 0x00	; 0
 34c:	84 70       	andi	r24, 0x04	; 4
 34e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <hash0>
			locking = PINA & 0x80;
 352:	80 b1       	in	r24, 0x00	; 0
 354:	80 78       	andi	r24, 0x80	; 128
 356:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <locking>
			
			PORTC = state;
 35a:	82 e0       	ldi	r24, 0x02	; 2
 35c:	88 b9       	out	0x08, r24	; 8
		break;
 35e:	08 95       	ret
		
		case(pound_lift_up):
			x = PINA & 0x01;
 360:	80 b1       	in	r24, 0x00	; 0
 362:	81 70       	andi	r24, 0x01	; 1
 364:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <x>
			y = PINA & 0x02;
 368:	80 b1       	in	r24, 0x00	; 0
 36a:	82 70       	andi	r24, 0x02	; 2
 36c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <y>
			hash0 = PINA & 0x04;
 370:	80 b1       	in	r24, 0x00	; 0
 372:	84 70       	andi	r24, 0x04	; 4
 374:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <hash0>
			locking = PINA & 0x80;
 378:	80 b1       	in	r24, 0x00	; 0
 37a:	80 78       	andi	r24, 0x80	; 128
 37c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <locking>
			
			PORTC = state;
 380:	83 e0       	ldi	r24, 0x03	; 3
 382:	88 b9       	out	0x08, r24	; 8
		break;
 384:	08 95       	ret
		
		case(open):
		
			x = PINA & 0x01;
 386:	90 b1       	in	r25, 0x00	; 0
 388:	91 70       	andi	r25, 0x01	; 1
 38a:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <x>
			y = PINA & 0x02;
 38e:	90 b1       	in	r25, 0x00	; 0
 390:	92 70       	andi	r25, 0x02	; 2
 392:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <y>
			hash0 = PINA & 0x04;
 396:	90 b1       	in	r25, 0x00	; 0
 398:	94 70       	andi	r25, 0x04	; 4
 39a:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <hash0>
			locking = PINA & 0x80;
 39e:	90 b1       	in	r25, 0x00	; 0
 3a0:	90 78       	andi	r25, 0x80	; 128
 3a2:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <locking>
			count++;
 3a6:	8f 5f       	subi	r24, 0xFF	; 255
 3a8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			PORTC = state;
 3ac:	84 e0       	ldi	r24, 0x04	; 4
 3ae:	88 b9       	out	0x08, r24	; 8
			
		break;
 3b0:	08 95       	ret
			PORTC = state;
			
		break;
		
		case(lock_pressed):
			unlocking = 0x00;
 3b2:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <unlocking>
			PORTB = unlocking;
 3b6:	15 b8       	out	0x05, r1	; 5
			
			x = PINA & 0x01;
 3b8:	80 b1       	in	r24, 0x00	; 0
 3ba:	81 70       	andi	r24, 0x01	; 1
 3bc:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <x>
			y = PINA & 0x02;
 3c0:	80 b1       	in	r24, 0x00	; 0
 3c2:	82 70       	andi	r24, 0x02	; 2
 3c4:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <y>
			hash0 = PINA & 0x04;
 3c8:	80 b1       	in	r24, 0x00	; 0
 3ca:	84 70       	andi	r24, 0x04	; 4
 3cc:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <hash0>
			locking = PINA & 0x80;
 3d0:	80 b1       	in	r24, 0x00	; 0
 3d2:	80 78       	andi	r24, 0x80	; 128
 3d4:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <locking>
			
			PORTC = state;
 3d8:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <state>
 3dc:	88 b9       	out	0x08, r24	; 8
		break;
 3de:	08 95       	ret
		case(pound_pressed):
		
			if((x == 0) && (y == 0) && (hash0 & 0x04)){
				state = pound_pressed;
			}
			else if((x == 0) && (y == 0) && (hash0 == 0)){
 3e0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <hash0>
 3e4:	88 23       	and	r24, r24
 3e6:	09 f4       	brne	.+2      	; 0x3ea <tick+0x32a>
 3e8:	a5 ce       	rjmp	.-694    	; 0x134 <tick+0x74>
 3ea:	a8 ce       	rjmp	.-688    	; 0x13c <tick+0x7c>

000003ec <main>:
}


int main(void)
{
	DDRA = 0x00; PINA = 0xFF;
 3ec:	11 b8       	out	0x01, r1	; 1
 3ee:	8f ef       	ldi	r24, 0xFF	; 255
 3f0:	80 b9       	out	0x00, r24	; 0
	DDRB = 0xFF; PINB = 0x00;
 3f2:	84 b9       	out	0x04, r24	; 4
 3f4:	13 b8       	out	0x03, r1	; 3
	DDRC = 0xFF; PINC = 0x00;
 3f6:	87 b9       	out	0x07, r24	; 7
 3f8:	16 b8       	out	0x06, r1	; 6

	state = Init;
 3fa:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <state>
	
	while (1)
	{
		tick();
 3fe:	60 de       	rcall	.-832    	; 0xc0 <tick>
 400:	fe cf       	rjmp	.-4      	; 0x3fe <main+0x12>

00000402 <__tablejump2__>:
 402:	ee 0f       	add	r30, r30
 404:	ff 1f       	adc	r31, r31
 406:	00 24       	eor	r0, r0
 408:	00 1c       	adc	r0, r0
 40a:	0b be       	out	0x3b, r0	; 59
 40c:	07 90       	elpm	r0, Z+
 40e:	f6 91       	elpm	r31, Z
 410:	e0 2d       	mov	r30, r0
 412:	09 94       	ijmp

00000414 <_exit>:
 414:	f8 94       	cli

00000416 <__stop_program>:
 416:	ff cf       	rjmp	.-2      	; 0x416 <__stop_program>
