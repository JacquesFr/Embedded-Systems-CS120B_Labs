
jfrac001_lab4_part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000152  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001c6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000088a  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007cd  00000000  00000000  00000aea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002af  00000000  00000000  000012b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00001568  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000443  00000000  00000000  0000159c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000019df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	49 d0       	rcall	.+146    	; 0x13c <main>
  aa:	51 c0       	rjmp	.+162    	; 0x14e <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <tick_latch>:
enum LED_states { light_1, light_2, tran0, tran1 } LED_states;
    unsigned char button = 0x00;	

void tick_latch(){
	
	switch(LED_states)	{		//state transitions
  ae:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <LED_states>
  b2:	81 30       	cpi	r24, 0x01	; 1
  b4:	b1 f0       	breq	.+44     	; 0xe2 <tick_latch+0x34>
  b6:	28 f0       	brcs	.+10     	; 0xc2 <tick_latch+0x14>
  b8:	82 30       	cpi	r24, 0x02	; 2
  ba:	59 f0       	breq	.+22     	; 0xd2 <tick_latch+0x24>
  bc:	83 30       	cpi	r24, 0x03	; 3
  be:	c9 f0       	breq	.+50     	; 0xf2 <tick_latch+0x44>
  c0:	1f c0       	rjmp	.+62     	; 0x100 <tick_latch+0x52>
		
		case(light_1):
			if(button & 0x01){
  c2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  c6:	80 ff       	sbrs	r24, 0
  c8:	1d c0       	rjmp	.+58     	; 0x104 <tick_latch+0x56>
				LED_states = tran0;
  ca:	82 e0       	ldi	r24, 0x02	; 2
  cc:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <LED_states>
  d0:	20 c0       	rjmp	.+64     	; 0x112 <tick_latch+0x64>
				LED_states = light_1;
			}
		break;
		
		case(tran0):
			if(button == 0){
  d2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  d6:	81 11       	cpse	r24, r1
  d8:	1c c0       	rjmp	.+56     	; 0x112 <tick_latch+0x64>
				LED_states = light_2;
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <LED_states>
  e0:	1f c0       	rjmp	.+62     	; 0x120 <tick_latch+0x72>
				LED_states = tran0;
			}
		break;
		
		case(light_2):
			if(button & 0x01){
  e2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  e6:	80 ff       	sbrs	r24, 0
  e8:	1b c0       	rjmp	.+54     	; 0x120 <tick_latch+0x72>
				LED_states = tran1;
  ea:	83 e0       	ldi	r24, 0x03	; 3
  ec:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <LED_states>
  f0:	1e c0       	rjmp	.+60     	; 0x12e <tick_latch+0x80>
				LED_states = light_2;
			}
		break;
		
		case(tran1):
			if(button == 0){
  f2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  f6:	81 11       	cpse	r24, r1
  f8:	1a c0       	rjmp	.+52     	; 0x12e <tick_latch+0x80>
				LED_states = light_1;
  fa:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <LED_states>
  fe:	02 c0       	rjmp	.+4      	; 0x104 <tick_latch+0x56>
				LED_states = tran1;
			}
		break;
		
		default:
			LED_states = light_1;
 100:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <LED_states>
		
	}
	
	switch(LED_states){		//state actions
		case(light_1):
			PORTB = 0x01;
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	85 b9       	out	0x05, r24	; 5
			button = PINA & 0x01;
 108:	80 b1       	in	r24, 0x00	; 0
 10a:	81 70       	andi	r24, 0x01	; 1
 10c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		break;
 110:	08 95       	ret
		
		case(tran0):
			button = PINA & 0x01;
 112:	80 b1       	in	r24, 0x00	; 0
 114:	81 70       	andi	r24, 0x01	; 1
 116:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			PORTB = 0X02;
 11a:	82 e0       	ldi	r24, 0x02	; 2
 11c:	85 b9       	out	0x05, r24	; 5
		break;
 11e:	08 95       	ret
		
		case(light_2):
			PORTB = 0x02; 
 120:	82 e0       	ldi	r24, 0x02	; 2
 122:	85 b9       	out	0x05, r24	; 5
			button = PINA & 0x01;
 124:	80 b1       	in	r24, 0x00	; 0
 126:	81 70       	andi	r24, 0x01	; 1
 128:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		break;
 12c:	08 95       	ret
		
		case(tran1):
			button = PINA & 0x01;
 12e:	80 b1       	in	r24, 0x00	; 0
 130:	81 70       	andi	r24, 0x01	; 1
 132:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			PORTB = 0x01;
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	85 b9       	out	0x05, r24	; 5
 13a:	08 95       	ret

0000013c <main>:
}


int main(void)
{
	DDRA = 0x00; PINA = 0xFF;
 13c:	11 b8       	out	0x01, r1	; 1
 13e:	8f ef       	ldi	r24, 0xFF	; 255
 140:	80 b9       	out	0x00, r24	; 0
	DDRB = 0xFF; PINB = 0x00;
 142:	84 b9       	out	0x04, r24	; 4
 144:	13 b8       	out	0x03, r1	; 3

	LED_states = light_1;
 146:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <LED_states>
	
    while (1) 
    {
		tick_latch();
 14a:	b1 df       	rcall	.-158    	; 0xae <tick_latch>
 14c:	fe cf       	rjmp	.-4      	; 0x14a <main+0xe>

0000014e <_exit>:
 14e:	f8 94       	cli

00000150 <__stop_program>:
 150:	ff cf       	rjmp	.-2      	; 0x150 <__stop_program>
