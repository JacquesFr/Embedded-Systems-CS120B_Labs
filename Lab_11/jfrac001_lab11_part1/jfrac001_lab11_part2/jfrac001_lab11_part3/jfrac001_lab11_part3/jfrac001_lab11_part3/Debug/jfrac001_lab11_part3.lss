
jfrac001_lab11_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000005b0  00000644  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800106  00800106  0000064a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000064a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000067c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  000006bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000109c  00000000  00000000  00000764  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009e1  00000000  00000000  00001800  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000079d  00000000  00000000  000021e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000188  00000000  00000000  00002980  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c5  00000000  00000000  00002b08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000643  00000000  00000000  000030cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00003710  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	8a c0       	rjmp	.+276    	; 0x116 <__ctors_end>
   2:	00 00       	nop
   4:	a5 c0       	rjmp	.+330    	; 0x150 <__bad_interrupt>
   6:	00 00       	nop
   8:	a3 c0       	rjmp	.+326    	; 0x150 <__bad_interrupt>
   a:	00 00       	nop
   c:	a1 c0       	rjmp	.+322    	; 0x150 <__bad_interrupt>
   e:	00 00       	nop
  10:	9f c0       	rjmp	.+318    	; 0x150 <__bad_interrupt>
  12:	00 00       	nop
  14:	9d c0       	rjmp	.+314    	; 0x150 <__bad_interrupt>
  16:	00 00       	nop
  18:	9b c0       	rjmp	.+310    	; 0x150 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	99 c0       	rjmp	.+306    	; 0x150 <__bad_interrupt>
  1e:	00 00       	nop
  20:	97 c0       	rjmp	.+302    	; 0x150 <__bad_interrupt>
  22:	00 00       	nop
  24:	95 c0       	rjmp	.+298    	; 0x150 <__bad_interrupt>
  26:	00 00       	nop
  28:	93 c0       	rjmp	.+294    	; 0x150 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	91 c0       	rjmp	.+290    	; 0x150 <__bad_interrupt>
  2e:	00 00       	nop
  30:	8f c0       	rjmp	.+286    	; 0x150 <__bad_interrupt>
  32:	00 00       	nop
  34:	ff c0       	rjmp	.+510    	; 0x234 <__vector_13>
  36:	00 00       	nop
  38:	8b c0       	rjmp	.+278    	; 0x150 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	89 c0       	rjmp	.+274    	; 0x150 <__bad_interrupt>
  3e:	00 00       	nop
  40:	87 c0       	rjmp	.+270    	; 0x150 <__bad_interrupt>
  42:	00 00       	nop
  44:	85 c0       	rjmp	.+266    	; 0x150 <__bad_interrupt>
  46:	00 00       	nop
  48:	83 c0       	rjmp	.+262    	; 0x150 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	81 c0       	rjmp	.+258    	; 0x150 <__bad_interrupt>
  4e:	00 00       	nop
  50:	7f c0       	rjmp	.+254    	; 0x150 <__bad_interrupt>
  52:	00 00       	nop
  54:	7d c0       	rjmp	.+250    	; 0x150 <__bad_interrupt>
  56:	00 00       	nop
  58:	7b c0       	rjmp	.+246    	; 0x150 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	79 c0       	rjmp	.+242    	; 0x150 <__bad_interrupt>
  5e:	00 00       	nop
  60:	77 c0       	rjmp	.+238    	; 0x150 <__bad_interrupt>
  62:	00 00       	nop
  64:	75 c0       	rjmp	.+234    	; 0x150 <__bad_interrupt>
  66:	00 00       	nop
  68:	73 c0       	rjmp	.+230    	; 0x150 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	71 c0       	rjmp	.+226    	; 0x150 <__bad_interrupt>
  6e:	00 00       	nop
  70:	6f c0       	rjmp	.+222    	; 0x150 <__bad_interrupt>
  72:	00 00       	nop
  74:	6d c0       	rjmp	.+218    	; 0x150 <__bad_interrupt>
  76:	00 00       	nop
  78:	6b c0       	rjmp	.+214    	; 0x150 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	69 c0       	rjmp	.+210    	; 0x150 <__bad_interrupt>
  7e:	00 00       	nop
  80:	67 c0       	rjmp	.+206    	; 0x150 <__bad_interrupt>
  82:	00 00       	nop
  84:	65 c0       	rjmp	.+202    	; 0x150 <__bad_interrupt>
  86:	00 00       	nop
  88:	63 c0       	rjmp	.+198    	; 0x150 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	5e 02       	muls	r21, r30
  8e:	c5 02       	muls	r28, r21
  90:	c5 02       	muls	r28, r21
  92:	c5 02       	muls	r28, r21
  94:	c5 02       	muls	r28, r21
  96:	c5 02       	muls	r28, r21
  98:	c5 02       	muls	r28, r21
  9a:	c5 02       	muls	r28, r21
  9c:	c5 02       	muls	r28, r21
  9e:	c5 02       	muls	r28, r21
  a0:	c5 02       	muls	r28, r21
  a2:	c5 02       	muls	r28, r21
  a4:	c5 02       	muls	r28, r21
  a6:	c5 02       	muls	r28, r21
  a8:	c5 02       	muls	r28, r21
  aa:	c5 02       	muls	r28, r21
  ac:	c5 02       	muls	r28, r21
  ae:	c5 02       	muls	r28, r21
  b0:	c5 02       	muls	r28, r21
  b2:	c5 02       	muls	r28, r21
  b4:	c5 02       	muls	r28, r21
  b6:	c5 02       	muls	r28, r21
  b8:	c5 02       	muls	r28, r21
  ba:	c5 02       	muls	r28, r21
  bc:	c5 02       	muls	r28, r21
  be:	c5 02       	muls	r28, r21
  c0:	c5 02       	muls	r28, r21
  c2:	c5 02       	muls	r28, r21
  c4:	c5 02       	muls	r28, r21
  c6:	c5 02       	muls	r28, r21
  c8:	c5 02       	muls	r28, r21
  ca:	c5 02       	muls	r28, r21
  cc:	c5 02       	muls	r28, r21
  ce:	c5 02       	muls	r28, r21
  d0:	c5 02       	muls	r28, r21
  d2:	bf 02       	muls	r27, r31
  d4:	c5 02       	muls	r28, r21
  d6:	c5 02       	muls	r28, r21
  d8:	c5 02       	muls	r28, r21
  da:	c5 02       	muls	r28, r21
  dc:	c5 02       	muls	r28, r21
  de:	c5 02       	muls	r28, r21
  e0:	b9 02       	muls	r27, r25
  e2:	c5 02       	muls	r28, r21
  e4:	c5 02       	muls	r28, r21
  e6:	c5 02       	muls	r28, r21
  e8:	c5 02       	muls	r28, r21
  ea:	c5 02       	muls	r28, r21
  ec:	9b 02       	muls	r25, r27
  ee:	61 02       	muls	r22, r17
  f0:	67 02       	muls	r22, r23
  f2:	6e 02       	muls	r22, r30
  f4:	75 02       	muls	r23, r21
  f6:	7c 02       	muls	r23, r28
  f8:	83 02       	muls	r24, r19
  fa:	89 02       	muls	r24, r25
  fc:	8f 02       	muls	r24, r31
  fe:	95 02       	muls	r25, r21
 100:	c5 02       	muls	r28, r21
 102:	c5 02       	muls	r28, r21
 104:	c5 02       	muls	r28, r21
 106:	c5 02       	muls	r28, r21
 108:	c5 02       	muls	r28, r21
 10a:	c5 02       	muls	r28, r21
 10c:	c5 02       	muls	r28, r21
 10e:	a1 02       	muls	r26, r17
 110:	a7 02       	muls	r26, r23
 112:	ad 02       	muls	r26, r29
 114:	b3 02       	muls	r27, r19

00000116 <__ctors_end>:
 116:	11 24       	eor	r1, r1
 118:	1f be       	out	0x3f, r1	; 63
 11a:	cf ef       	ldi	r28, 0xFF	; 255
 11c:	d0 e4       	ldi	r29, 0x40	; 64
 11e:	de bf       	out	0x3e, r29	; 62
 120:	cd bf       	out	0x3d, r28	; 61

00000122 <__do_copy_data>:
 122:	11 e0       	ldi	r17, 0x01	; 1
 124:	a0 e0       	ldi	r26, 0x00	; 0
 126:	b1 e0       	ldi	r27, 0x01	; 1
 128:	e0 eb       	ldi	r30, 0xB0	; 176
 12a:	f5 e0       	ldi	r31, 0x05	; 5
 12c:	00 e0       	ldi	r16, 0x00	; 0
 12e:	0b bf       	out	0x3b, r16	; 59
 130:	02 c0       	rjmp	.+4      	; 0x136 <__do_copy_data+0x14>
 132:	07 90       	elpm	r0, Z+
 134:	0d 92       	st	X+, r0
 136:	a6 30       	cpi	r26, 0x06	; 6
 138:	b1 07       	cpc	r27, r17
 13a:	d9 f7       	brne	.-10     	; 0x132 <__do_copy_data+0x10>

0000013c <__do_clear_bss>:
 13c:	21 e0       	ldi	r18, 0x01	; 1
 13e:	a6 e0       	ldi	r26, 0x06	; 6
 140:	b1 e0       	ldi	r27, 0x01	; 1
 142:	01 c0       	rjmp	.+2      	; 0x146 <.do_clear_bss_start>

00000144 <.do_clear_bss_loop>:
 144:	1d 92       	st	X+, r1

00000146 <.do_clear_bss_start>:
 146:	a7 31       	cpi	r26, 0x17	; 23
 148:	b2 07       	cpc	r27, r18
 14a:	e1 f7       	brne	.-8      	; 0x144 <.do_clear_bss_loop>
 14c:	30 d1       	rcall	.+608    	; 0x3ae <main>
 14e:	2e c2       	rjmp	.+1116   	; 0x5ac <_exit>

00000150 <__bad_interrupt>:
 150:	57 cf       	rjmp	.-338    	; 0x0 <__vectors>

00000152 <delay_ms>:
		if( c == 0 ) { return b; }
		a = b;
		b = c;
	}
	return 0;
}
 152:	18 16       	cp	r1, r24
 154:	19 06       	cpc	r1, r25
 156:	5c f0       	brlt	.+22     	; 0x16e <delay_ms+0x1c>
 158:	08 95       	ret
 15a:	00 00       	nop
 15c:	21 50       	subi	r18, 0x01	; 1
 15e:	31 09       	sbc	r19, r1
 160:	e1 f7       	brne	.-8      	; 0x15a <delay_ms+0x8>
 162:	4f 5f       	subi	r20, 0xFF	; 255
 164:	5f 4f       	sbci	r21, 0xFF	; 255
 166:	84 17       	cp	r24, r20
 168:	95 07       	cpc	r25, r21
 16a:	19 f4       	brne	.+6      	; 0x172 <delay_ms+0x20>
 16c:	08 95       	ret
 16e:	40 e0       	ldi	r20, 0x00	; 0
 170:	50 e0       	ldi	r21, 0x00	; 0
 172:	27 e0       	ldi	r18, 0x07	; 7
 174:	33 e0       	ldi	r19, 0x03	; 3
 176:	f1 cf       	rjmp	.-30     	; 0x15a <delay_ms+0x8>

00000178 <LCD_WriteCommand>:
 178:	10 98       	cbi	0x02, 0	; 2
 17a:	8b b9       	out	0x0b, r24	; 11
 17c:	11 9a       	sbi	0x02, 1	; 2
 17e:	00 00       	nop
 180:	11 98       	cbi	0x02, 1	; 2
 182:	82 e0       	ldi	r24, 0x02	; 2
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	e5 cf       	rjmp	.-54     	; 0x152 <delay_ms>
 188:	08 95       	ret

0000018a <LCD_Cursor>:
 18a:	81 31       	cpi	r24, 0x11	; 17
 18c:	18 f4       	brcc	.+6      	; 0x194 <LCD_Cursor+0xa>
 18e:	81 58       	subi	r24, 0x81	; 129
 190:	f3 cf       	rjmp	.-26     	; 0x178 <LCD_WriteCommand>
 192:	08 95       	ret
 194:	81 55       	subi	r24, 0x51	; 81
 196:	f0 cf       	rjmp	.-32     	; 0x178 <LCD_WriteCommand>
 198:	08 95       	ret

0000019a <LCD_init>:
 19a:	84 e6       	ldi	r24, 0x64	; 100
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	d9 df       	rcall	.-78     	; 0x152 <delay_ms>
 1a0:	88 e3       	ldi	r24, 0x38	; 56
 1a2:	ea df       	rcall	.-44     	; 0x178 <LCD_WriteCommand>
 1a4:	86 e0       	ldi	r24, 0x06	; 6
 1a6:	e8 df       	rcall	.-48     	; 0x178 <LCD_WriteCommand>
 1a8:	8f e0       	ldi	r24, 0x0F	; 15
 1aa:	e6 df       	rcall	.-52     	; 0x178 <LCD_WriteCommand>
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	e4 df       	rcall	.-56     	; 0x178 <LCD_WriteCommand>
 1b0:	8a e0       	ldi	r24, 0x0A	; 10
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	ce cf       	rjmp	.-100    	; 0x152 <delay_ms>
 1b6:	08 95       	ret

000001b8 <LCD_WriteData>:
 1b8:	10 9a       	sbi	0x02, 0	; 2
 1ba:	8b b9       	out	0x0b, r24	; 11
 1bc:	11 9a       	sbi	0x02, 1	; 2
 1be:	00 00       	nop
 1c0:	11 98       	cbi	0x02, 1	; 2
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	c5 cf       	rjmp	.-118    	; 0x152 <delay_ms>
 1c8:	08 95       	ret

000001ca <TimerSet>:
 1ca:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <_avr_timer_M>
 1ce:	70 93 02 01 	sts	0x0102, r23	; 0x800102 <_avr_timer_M+0x1>
 1d2:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <_avr_timer_M+0x2>
 1d6:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <_avr_timer_M+0x3>
 1da:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <_avr_timer_cntcurr>
 1de:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <_avr_timer_cntcurr+0x1>
 1e2:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <_avr_timer_cntcurr+0x2>
 1e6:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <_avr_timer_cntcurr+0x3>
 1ea:	08 95       	ret

000001ec <TimerOn>:
 1ec:	8b e0       	ldi	r24, 0x0B	; 11
 1ee:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 1f2:	8d e7       	ldi	r24, 0x7D	; 125
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1fa:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 1fe:	82 e0       	ldi	r24, 0x02	; 2
 200:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 204:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 208:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 20c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_avr_timer_M>
 210:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <_avr_timer_M+0x1>
 214:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <_avr_timer_M+0x2>
 218:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <_avr_timer_M+0x3>
 21c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <_avr_timer_cntcurr>
 220:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <_avr_timer_cntcurr+0x1>
 224:	a0 93 14 01 	sts	0x0114, r26	; 0x800114 <_avr_timer_cntcurr+0x2>
 228:	b0 93 15 01 	sts	0x0115, r27	; 0x800115 <_avr_timer_cntcurr+0x3>
 22c:	8f b7       	in	r24, 0x3f	; 63
 22e:	80 68       	ori	r24, 0x80	; 128
 230:	8f bf       	out	0x3f, r24	; 63
 232:	08 95       	ret

00000234 <__vector_13>:
 234:	1f 92       	push	r1
 236:	0f 92       	push	r0
 238:	0f b6       	in	r0, 0x3f	; 63
 23a:	0f 92       	push	r0
 23c:	11 24       	eor	r1, r1
 23e:	8f 93       	push	r24
 240:	9f 93       	push	r25
 242:	af 93       	push	r26
 244:	bf 93       	push	r27
 246:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <_avr_timer_cntcurr>
 24a:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <_avr_timer_cntcurr+0x1>
 24e:	a0 91 14 01 	lds	r26, 0x0114	; 0x800114 <_avr_timer_cntcurr+0x2>
 252:	b0 91 15 01 	lds	r27, 0x0115	; 0x800115 <_avr_timer_cntcurr+0x3>
 256:	01 97       	sbiw	r24, 0x01	; 1
 258:	a1 09       	sbc	r26, r1
 25a:	b1 09       	sbc	r27, r1
 25c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <_avr_timer_cntcurr>
 260:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <_avr_timer_cntcurr+0x1>
 264:	a0 93 14 01 	sts	0x0114, r26	; 0x800114 <_avr_timer_cntcurr+0x2>
 268:	b0 93 15 01 	sts	0x0115, r27	; 0x800115 <_avr_timer_cntcurr+0x3>
 26c:	89 2b       	or	r24, r25
 26e:	8a 2b       	or	r24, r26
 270:	8b 2b       	or	r24, r27
 272:	99 f4       	brne	.+38     	; 0x29a <__vector_13+0x66>
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <TimerFlag>
 27a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_avr_timer_M>
 27e:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <_avr_timer_M+0x1>
 282:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <_avr_timer_M+0x2>
 286:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <_avr_timer_M+0x3>
 28a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <_avr_timer_cntcurr>
 28e:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <_avr_timer_cntcurr+0x1>
 292:	a0 93 14 01 	sts	0x0114, r26	; 0x800114 <_avr_timer_cntcurr+0x2>
 296:	b0 93 15 01 	sts	0x0115, r27	; 0x800115 <_avr_timer_cntcurr+0x3>
 29a:	bf 91       	pop	r27
 29c:	af 91       	pop	r26
 29e:	9f 91       	pop	r25
 2a0:	8f 91       	pop	r24
 2a2:	0f 90       	pop	r0
 2a4:	0f be       	out	0x3f, r0	; 63
 2a6:	0f 90       	pop	r0
 2a8:	1f 90       	pop	r1
 2aa:	18 95       	reti

000002ac <GetKeypadKey>:
//Parameter: None
//Returns: A keypad button press else '\0'
unsigned char GetKeypadKey() {

	// Check keys in col 1
	KEYPADPORT = SetBit(0xFF,COL1,0); // Set Px4 to 0; others 1
 2ac:	8f ee       	ldi	r24, 0xEF	; 239
 2ae:	88 b9       	out	0x08, r24	; 8
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
 2b0:	00 00       	nop
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '1'; }
 2b2:	30 9b       	sbis	0x06, 0	; 6
 2b4:	29 c0       	rjmp	.+82     	; 0x308 <GetKeypadKey+0x5c>
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '4'; }
 2b6:	31 9b       	sbis	0x06, 1	; 6
 2b8:	29 c0       	rjmp	.+82     	; 0x30c <GetKeypadKey+0x60>
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '7'; }
 2ba:	32 9b       	sbis	0x06, 2	; 6
 2bc:	29 c0       	rjmp	.+82     	; 0x310 <GetKeypadKey+0x64>
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '*'; }
 2be:	33 9b       	sbis	0x06, 3	; 6
 2c0:	29 c0       	rjmp	.+82     	; 0x314 <GetKeypadKey+0x68>

	// Check keys in col 2
	KEYPADPORT = SetBit(0xFF,COL2,0); // Set Px5 to 0; others 1
 2c2:	8f ed       	ldi	r24, 0xDF	; 223
 2c4:	88 b9       	out	0x08, r24	; 8
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
 2c6:	00 00       	nop
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '2'; }
 2c8:	30 9b       	sbis	0x06, 0	; 6
 2ca:	26 c0       	rjmp	.+76     	; 0x318 <GetKeypadKey+0x6c>
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '5'; }
 2cc:	31 9b       	sbis	0x06, 1	; 6
 2ce:	26 c0       	rjmp	.+76     	; 0x31c <GetKeypadKey+0x70>
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '8'; }
 2d0:	32 9b       	sbis	0x06, 2	; 6
 2d2:	26 c0       	rjmp	.+76     	; 0x320 <GetKeypadKey+0x74>
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '0'; }
 2d4:	33 9b       	sbis	0x06, 3	; 6
 2d6:	26 c0       	rjmp	.+76     	; 0x324 <GetKeypadKey+0x78>

	// Check keys in col 3
	KEYPADPORT = SetBit(0xFF,COL3,0); // Set Px6 to 0; others 1
 2d8:	8f eb       	ldi	r24, 0xBF	; 191
 2da:	88 b9       	out	0x08, r24	; 8
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
 2dc:	00 00       	nop
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '3'; }
 2de:	30 9b       	sbis	0x06, 0	; 6
 2e0:	23 c0       	rjmp	.+70     	; 0x328 <GetKeypadKey+0x7c>
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '6'; }
 2e2:	31 9b       	sbis	0x06, 1	; 6
 2e4:	23 c0       	rjmp	.+70     	; 0x32c <GetKeypadKey+0x80>
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '9'; }
 2e6:	32 9b       	sbis	0x06, 2	; 6
 2e8:	23 c0       	rjmp	.+70     	; 0x330 <GetKeypadKey+0x84>
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '#'; }
 2ea:	33 9b       	sbis	0x06, 3	; 6
 2ec:	23 c0       	rjmp	.+70     	; 0x334 <GetKeypadKey+0x88>

	// Check keys in col 4
	KEYPADPORT = SetBit(0xFF,COL4,0); // Set Px7 to 0; others 1
 2ee:	8f e7       	ldi	r24, 0x7F	; 127
 2f0:	88 b9       	out	0x08, r24	; 8
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
 2f2:	00 00       	nop
	if (GetBit(~KEYPADPIN,ROW1) ) { return 'A'; }
 2f4:	30 9b       	sbis	0x06, 0	; 6
 2f6:	20 c0       	rjmp	.+64     	; 0x338 <GetKeypadKey+0x8c>
	if (GetBit(~KEYPADPIN,ROW2) ) { return 'B'; }
 2f8:	31 9b       	sbis	0x06, 1	; 6
 2fa:	20 c0       	rjmp	.+64     	; 0x33c <GetKeypadKey+0x90>
	if (GetBit(~KEYPADPIN,ROW3) ) { return 'C'; }
 2fc:	32 9b       	sbis	0x06, 2	; 6
 2fe:	20 c0       	rjmp	.+64     	; 0x340 <GetKeypadKey+0x94>
	if (GetBit(~KEYPADPIN,ROW4) ) { return 'D'; }
 300:	33 9b       	sbis	0x06, 3	; 6
 302:	20 c0       	rjmp	.+64     	; 0x344 <GetKeypadKey+0x98>
	
	return '\0';
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	08 95       	ret
unsigned char GetKeypadKey() {

	// Check keys in col 1
	KEYPADPORT = SetBit(0xFF,COL1,0); // Set Px4 to 0; others 1
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '1'; }
 308:	81 e3       	ldi	r24, 0x31	; 49
 30a:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '4'; }
 30c:	84 e3       	ldi	r24, 0x34	; 52
 30e:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '7'; }
 310:	87 e3       	ldi	r24, 0x37	; 55
 312:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '*'; }
 314:	8a e2       	ldi	r24, 0x2A	; 42
 316:	08 95       	ret

	// Check keys in col 2
	KEYPADPORT = SetBit(0xFF,COL2,0); // Set Px5 to 0; others 1
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '2'; }
 318:	82 e3       	ldi	r24, 0x32	; 50
 31a:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '5'; }
 31c:	85 e3       	ldi	r24, 0x35	; 53
 31e:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '8'; }
 320:	88 e3       	ldi	r24, 0x38	; 56
 322:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '0'; }
 324:	80 e3       	ldi	r24, 0x30	; 48
 326:	08 95       	ret

	// Check keys in col 3
	KEYPADPORT = SetBit(0xFF,COL3,0); // Set Px6 to 0; others 1
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
	if ( GetBit(~KEYPADPIN,ROW1) ) { return '3'; }
 328:	83 e3       	ldi	r24, 0x33	; 51
 32a:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW2) ) { return '6'; }
 32c:	86 e3       	ldi	r24, 0x36	; 54
 32e:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW3) ) { return '9'; }
 330:	89 e3       	ldi	r24, 0x39	; 57
 332:	08 95       	ret
	if ( GetBit(~KEYPADPIN,ROW4) ) { return '#'; }
 334:	83 e2       	ldi	r24, 0x23	; 35
 336:	08 95       	ret

	// Check keys in col 4
	KEYPADPORT = SetBit(0xFF,COL4,0); // Set Px7 to 0; others 1
	asm("nop"); // add a delay to allow PORTx to stabilize before checking
	if (GetBit(~KEYPADPIN,ROW1) ) { return 'A'; }
 338:	81 e4       	ldi	r24, 0x41	; 65
 33a:	08 95       	ret
	if (GetBit(~KEYPADPIN,ROW2) ) { return 'B'; }
 33c:	82 e4       	ldi	r24, 0x42	; 66
 33e:	08 95       	ret
	if (GetBit(~KEYPADPIN,ROW3) ) { return 'C'; }
 340:	83 e4       	ldi	r24, 0x43	; 67
 342:	08 95       	ret
	if (GetBit(~KEYPADPIN,ROW4) ) { return 'D'; }
 344:	84 e4       	ldi	r24, 0x44	; 68
	
	return '\0';
}
 346:	08 95       	ret

00000348 <tick>:



enum States{init, press} state;

int tick(int state){
 348:	cf 93       	push	r28
 34a:	df 93       	push	r29

	switch(state){
 34c:	00 97       	sbiw	r24, 0x00	; 0
 34e:	31 f0       	breq	.+12     	; 0x35c <tick+0x14>
 350:	01 97       	sbiw	r24, 0x01	; 1
 352:	71 f0       	breq	.+28     	; 0x370 <tick+0x28>
		default:
		state = init;
		val = 0x1F;
 354:	8f e1       	ldi	r24, 0x1F	; 31
 356:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 35a:	19 c0       	rjmp	.+50     	; 0x38e <tick+0x46>

int tick(int state){

	switch(state){
		default:
		state = init;
 35c:	91 e0       	ldi	r25, 0x01	; 1
 35e:	80 e0       	ldi	r24, 0x00	; 0
 360:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 364:	2f 31       	cpi	r18, 0x1F	; 31
 366:	09 f4       	brne	.+2      	; 0x36a <tick+0x22>
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	c9 2f       	mov	r28, r25
 36c:	d8 2f       	mov	r29, r24
 36e:	09 c0       	rjmp	.+18     	; 0x382 <tick+0x3a>
 370:	91 e0       	ldi	r25, 0x01	; 1
 372:	80 e0       	ldi	r24, 0x00	; 0
 374:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 378:	2f 31       	cpi	r18, 0x1F	; 31
 37a:	09 f4       	brne	.+2      	; 0x37e <tick+0x36>
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	c9 2f       	mov	r28, r25
 380:	d8 2f       	mov	r29, r24



	}

	switch(state){
 382:	20 97       	sbiw	r28, 0x00	; 0
 384:	21 f0       	breq	.+8      	; 0x38e <tick+0x46>
 386:	c1 30       	cpi	r28, 0x01	; 1
 388:	d1 05       	cpc	r29, r1
 38a:	39 f0       	breq	.+14     	; 0x39a <tick+0x52>
 38c:	0c c0       	rjmp	.+24     	; 0x3a6 <tick+0x5e>
		case init:
		val = GetKeypadKey();
 38e:	8e df       	rcall	.-228    	; 0x2ac <GetKeypadKey>
 390:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		break;
 394:	c0 e0       	ldi	r28, 0x00	; 0
 396:	d0 e0       	ldi	r29, 0x00	; 0

		case press:
		val = GetKeypadKey();
 398:	06 c0       	rjmp	.+12     	; 0x3a6 <tick+0x5e>
 39a:	88 df       	rcall	.-240    	; 0x2ac <GetKeypadKey>
 39c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		temp = GetKeypadKey();
 3a0:	85 df       	rcall	.-246    	; 0x2ac <GetKeypadKey>
 3a2:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <temp>




	return state;
}
 3a6:	ce 01       	movw	r24, r28
 3a8:	df 91       	pop	r29
 3aa:	cf 91       	pop	r28
 3ac:	08 95       	ret

000003ae <main>:


int main(void)
{
	// PORTB set to output, outputs init 0s
	DDRB = 0xFF;
 3ae:	8f ef       	ldi	r24, 0xFF	; 255
 3b0:	84 b9       	out	0x04, r24	; 4
	PORTB = 0x00;
 3b2:	15 b8       	out	0x05, r1	; 5
	// PC7..4 outputs init 0s, PC3..0 inputs init 1s
	DDRC = 0xF0;
 3b4:	90 ef       	ldi	r25, 0xF0	; 240
 3b6:	97 b9       	out	0x07, r25	; 7
	PORTC = 0x0F;
 3b8:	9f e0       	ldi	r25, 0x0F	; 15
 3ba:	98 b9       	out	0x08, r25	; 8

	DDRD = 0xFF;
 3bc:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;
 3be:	1b b8       	out	0x0b, r1	; 11

	DDRA = 0xFF;
 3c0:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x00;
 3c2:	12 b8       	out	0x02, r1	; 2
	unsigned long int task_tick = 300;
	const unsigned short numTasks = sizeof(task)/sizeof(task*);



	task1.state = -1;
 3c4:	e6 e0       	ldi	r30, 0x06	; 6
 3c6:	f1 e0       	ldi	r31, 0x01	; 1
 3c8:	80 83       	st	Z, r24
	task1.period = task_period;
 3ca:	8c e2       	ldi	r24, 0x2C	; 44
 3cc:	91 e0       	ldi	r25, 0x01	; 1
 3ce:	a0 e0       	ldi	r26, 0x00	; 0
 3d0:	b0 e0       	ldi	r27, 0x00	; 0
 3d2:	81 83       	std	Z+1, r24	; 0x01
 3d4:	92 83       	std	Z+2, r25	; 0x02
 3d6:	a3 83       	std	Z+3, r26	; 0x03
 3d8:	b4 83       	std	Z+4, r27	; 0x04
	task1.elapsedTime = task_tick;
 3da:	85 83       	std	Z+5, r24	; 0x05
 3dc:	96 83       	std	Z+6, r25	; 0x06
 3de:	a7 83       	std	Z+7, r26	; 0x07
 3e0:	b0 87       	std	Z+8, r27	; 0x08
	task1.TickFct = &tick;
 3e2:	84 ea       	ldi	r24, 0xA4	; 164
 3e4:	91 e0       	ldi	r25, 0x01	; 1
 3e6:	92 87       	std	Z+10, r25	; 0x0a
 3e8:	81 87       	std	Z+9, r24	; 0x09

	TimerSet(task_tick);
 3ea:	6c e2       	ldi	r22, 0x2C	; 44
 3ec:	71 e0       	ldi	r23, 0x01	; 1
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	eb de       	rcall	.-554    	; 0x1ca <TimerSet>
	TimerOn();
 3f4:	fb de       	rcall	.-522    	; 0x1ec <TimerOn>
	LCD_init();
 3f6:	d1 de       	rcall	.-606    	; 0x19a <LCD_init>
 3f8:	c6 e0       	ldi	r28, 0x06	; 6


		// Scheduler code
		for (unsigned short i = 0; i < numTasks; i++ ) {
			// Task is ready to tick
			if ( tasks[i]->elapsedTime == tasks[i]->period ) {
 3fa:	d1 e0       	ldi	r29, 0x01	; 1
 3fc:	0f 2e       	mov	r0, r31
			case 'C': PORTB = 0x0C; val1 = 67; LCD_Cursor(1); LCD_WriteData(val1); break;
			case 'D': PORTB = 0x0D; val1 = 68; LCD_Cursor(1); LCD_WriteData(val1); break;
			case '*': PORTB = 0x0E; val1 = 42; LCD_Cursor(1); LCD_WriteData(val1); break;
			case '#': PORTB = 0x0F; val1 = 35; LCD_Cursor(1); LCD_WriteData(val1); break;
			// Should never occur. Middle LED off.
			default: PORTB = 0x1B; break;
 3fe:	fb e1       	ldi	r31, 0x1B	; 27
 400:	5f 2e       	mov	r5, r31
 402:	f0 2d       	mov	r31, r0
 404:	0f 2e       	mov	r0, r31
			case 'A': PORTB = 0x0A; val1 = 65; LCD_Cursor(1); LCD_WriteData(val1); break;
			case 'B': PORTB = 0x0B; val1 = 66; LCD_Cursor(1); LCD_WriteData(val1); break;
			case 'C': PORTB = 0x0C; val1 = 67; LCD_Cursor(1); LCD_WriteData(val1); break;
			case 'D': PORTB = 0x0D; val1 = 68; LCD_Cursor(1); LCD_WriteData(val1); break;
			case '*': PORTB = 0x0E; val1 = 42; LCD_Cursor(1); LCD_WriteData(val1); break;
			case '#': PORTB = 0x0F; val1 = 35; LCD_Cursor(1); LCD_WriteData(val1); break;
 406:	ff e0       	ldi	r31, 0x0F	; 15
 408:	6f 2e       	mov	r6, r31
 40a:	f0 2d       	mov	r31, r0
 40c:	0f 2e       	mov	r0, r31
			// . . . ***** FINISH *****
			case 'A': PORTB = 0x0A; val1 = 65; LCD_Cursor(1); LCD_WriteData(val1); break;
			case 'B': PORTB = 0x0B; val1 = 66; LCD_Cursor(1); LCD_WriteData(val1); break;
			case 'C': PORTB = 0x0C; val1 = 67; LCD_Cursor(1); LCD_WriteData(val1); break;
			case 'D': PORTB = 0x0D; val1 = 68; LCD_Cursor(1); LCD_WriteData(val1); break;
			case '*': PORTB = 0x0E; val1 = 42; LCD_Cursor(1); LCD_WriteData(val1); break;
 40e:	fe e0       	ldi	r31, 0x0E	; 14
 410:	7f 2e       	mov	r7, r31
 412:	f0 2d       	mov	r31, r0
 414:	0f 2e       	mov	r0, r31

			// . . . ***** FINISH *****
			case 'A': PORTB = 0x0A; val1 = 65; LCD_Cursor(1); LCD_WriteData(val1); break;
			case 'B': PORTB = 0x0B; val1 = 66; LCD_Cursor(1); LCD_WriteData(val1); break;
			case 'C': PORTB = 0x0C; val1 = 67; LCD_Cursor(1); LCD_WriteData(val1); break;
			case 'D': PORTB = 0x0D; val1 = 68; LCD_Cursor(1); LCD_WriteData(val1); break;
 416:	fd e0       	ldi	r31, 0x0D	; 13
 418:	8f 2e       	mov	r8, r31
 41a:	f0 2d       	mov	r31, r0
 41c:	0f 2e       	mov	r0, r31


			// . . . ***** FINISH *****
			case 'A': PORTB = 0x0A; val1 = 65; LCD_Cursor(1); LCD_WriteData(val1); break;
			case 'B': PORTB = 0x0B; val1 = 66; LCD_Cursor(1); LCD_WriteData(val1); break;
			case 'C': PORTB = 0x0C; val1 = 67; LCD_Cursor(1); LCD_WriteData(val1); break;
 41e:	fc e0       	ldi	r31, 0x0C	; 12
 420:	9f 2e       	mov	r9, r31
 422:	f0 2d       	mov	r31, r0
 424:	0f 2e       	mov	r0, r31
			case '0': PORTB = 0x00; val1 = 0; LCD_Cursor(1); LCD_WriteData(val1 + '0'); break;


			// . . . ***** FINISH *****
			case 'A': PORTB = 0x0A; val1 = 65; LCD_Cursor(1); LCD_WriteData(val1); break;
			case 'B': PORTB = 0x0B; val1 = 66; LCD_Cursor(1); LCD_WriteData(val1); break;
 426:	fb e0       	ldi	r31, 0x0B	; 11
 428:	af 2e       	mov	r10, r31
 42a:	f0 2d       	mov	r31, r0
 42c:	0f 2e       	mov	r0, r31
			case '9': PORTB = 0x09; val1 = 9; LCD_Cursor(1); LCD_WriteData(val1 + '0'); break;
			case '0': PORTB = 0x00; val1 = 0; LCD_Cursor(1); LCD_WriteData(val1 + '0'); break;


			// . . . ***** FINISH *****
			case 'A': PORTB = 0x0A; val1 = 65; LCD_Cursor(1); LCD_WriteData(val1); break;
 42e:	fa e0       	ldi	r31, 0x0A	; 10
 430:	bf 2e       	mov	r11, r31
 432:	f0 2d       	mov	r31, r0
 434:	0f 2e       	mov	r0, r31
			case '4': PORTB = 0x04; val1 = 4; LCD_Cursor(1); LCD_WriteData(val1 + '0'); break;
			case '5': PORTB = 0x05; val1 = 5; LCD_Cursor(1); LCD_WriteData(val1 + '0'); break;
			case '6': PORTB = 0x06; val1 = 6; LCD_Cursor(1); LCD_WriteData(val1 + '0'); break;
			case '7': PORTB = 0x07; val1 = 7; LCD_Cursor(1); LCD_WriteData(val1 + '0'); break;
			case '8': PORTB = 0x08; val1 = 8; LCD_Cursor(1); LCD_WriteData(val1 + '0'); break;
			case '9': PORTB = 0x09; val1 = 9; LCD_Cursor(1); LCD_WriteData(val1 + '0'); break;
 436:	f9 e0       	ldi	r31, 0x09	; 9
 438:	cf 2e       	mov	r12, r31
 43a:	f0 2d       	mov	r31, r0
 43c:	68 94       	set
			case '3': PORTB = 0x03; val1 = 3; LCD_Cursor(1); LCD_WriteData(val1 + '0'); break;
			case '4': PORTB = 0x04; val1 = 4; LCD_Cursor(1); LCD_WriteData(val1 + '0'); break;
			case '5': PORTB = 0x05; val1 = 5; LCD_Cursor(1); LCD_WriteData(val1 + '0'); break;
			case '6': PORTB = 0x06; val1 = 6; LCD_Cursor(1); LCD_WriteData(val1 + '0'); break;
			case '7': PORTB = 0x07; val1 = 7; LCD_Cursor(1); LCD_WriteData(val1 + '0'); break;
			case '8': PORTB = 0x08; val1 = 8; LCD_Cursor(1); LCD_WriteData(val1 + '0'); break;
 43e:	dd 24       	eor	r13, r13
 440:	d3 f8       	bld	r13, 3
 442:	0f 2e       	mov	r0, r31
			case '2': PORTB = 0x02; val1 = 2; LCD_Cursor(1); LCD_WriteData(val1 + '0'); break;
			case '3': PORTB = 0x03; val1 = 3; LCD_Cursor(1); LCD_WriteData(val1 + '0'); break;
			case '4': PORTB = 0x04; val1 = 4; LCD_Cursor(1); LCD_WriteData(val1 + '0'); break;
			case '5': PORTB = 0x05; val1 = 5; LCD_Cursor(1); LCD_WriteData(val1 + '0'); break;
			case '6': PORTB = 0x06; val1 = 6; LCD_Cursor(1); LCD_WriteData(val1 + '0'); break;
			case '7': PORTB = 0x07; val1 = 7; LCD_Cursor(1); LCD_WriteData(val1 + '0'); break;
 444:	f7 e0       	ldi	r31, 0x07	; 7
 446:	ef 2e       	mov	r14, r31
 448:	f0 2d       	mov	r31, r0
 44a:	0f 2e       	mov	r0, r31
			case '1': PORTB = 0x01; val1 = 1; LCD_Cursor(1); LCD_WriteData(val1 + '0'); break;
			case '2': PORTB = 0x02; val1 = 2; LCD_Cursor(1); LCD_WriteData(val1 + '0'); break;
			case '3': PORTB = 0x03; val1 = 3; LCD_Cursor(1); LCD_WriteData(val1 + '0'); break;
			case '4': PORTB = 0x04; val1 = 4; LCD_Cursor(1); LCD_WriteData(val1 + '0'); break;
			case '5': PORTB = 0x05; val1 = 5; LCD_Cursor(1); LCD_WriteData(val1 + '0'); break;
			case '6': PORTB = 0x06; val1 = 6; LCD_Cursor(1); LCD_WriteData(val1 + '0'); break;
 44c:	f6 e0       	ldi	r31, 0x06	; 6
 44e:	ff 2e       	mov	r15, r31
 450:	f0 2d       	mov	r31, r0
 452:	05 e0       	ldi	r16, 0x05	; 5
}



int main(void)
{
 454:	10 e0       	ldi	r17, 0x00	; 0
 456:	4d 81       	ldd	r20, Y+5	; 0x05


		// Scheduler code
		for (unsigned short i = 0; i < numTasks; i++ ) {
			// Task is ready to tick
			if ( tasks[i]->elapsedTime == tasks[i]->period ) {
 458:	5e 81       	ldd	r21, Y+6	; 0x06
 45a:	6f 81       	ldd	r22, Y+7	; 0x07
 45c:	78 85       	ldd	r23, Y+8	; 0x08
 45e:	89 81       	ldd	r24, Y+1	; 0x01
 460:	9a 81       	ldd	r25, Y+2	; 0x02
 462:	ab 81       	ldd	r26, Y+3	; 0x03
 464:	bc 81       	ldd	r27, Y+4	; 0x04
 466:	48 17       	cp	r20, r24
 468:	59 07       	cpc	r21, r25
 46a:	6a 07       	cpc	r22, r26
 46c:	7b 07       	cpc	r23, r27
 46e:	61 f4       	brne	.+24     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
 470:	88 81       	ld	r24, Y
				// Setting next state for task
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 472:	e9 85       	ldd	r30, Y+9	; 0x09
 474:	fa 85       	ldd	r31, Y+10	; 0x0a
 476:	08 2e       	mov	r0, r24
 478:	00 0c       	add	r0, r0
 47a:	99 0b       	sbc	r25, r25
 47c:	09 95       	icall
 47e:	88 83       	st	Y, r24
 480:	1d 82       	std	Y+5, r1	; 0x05
				// Reset elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
 482:	1e 82       	std	Y+6, r1	; 0x06
 484:	1f 82       	std	Y+7, r1	; 0x07
 486:	18 86       	std	Y+8, r1	; 0x08
 488:	8d 81       	ldd	r24, Y+5	; 0x05
			}
			tasks[i]->elapsedTime += 1;
 48a:	9e 81       	ldd	r25, Y+6	; 0x06
 48c:	af 81       	ldd	r26, Y+7	; 0x07
 48e:	b8 85       	ldd	r27, Y+8	; 0x08
 490:	01 96       	adiw	r24, 0x01	; 1
 492:	a1 1d       	adc	r26, r1
 494:	b1 1d       	adc	r27, r1
 496:	8d 83       	std	Y+5, r24	; 0x05
 498:	9e 83       	std	Y+6, r25	; 0x06
 49a:	af 83       	std	Y+7, r26	; 0x07
 49c:	b8 87       	std	Y+8, r27	; 0x08
 49e:	01 50       	subi	r16, 0x01	; 1
 4a0:	11 09       	sbc	r17, r1
 4a2:	c9 f6       	brne	.-78     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
	while (1)
	{


		// Scheduler code
		for (unsigned short i = 0; i < numTasks; i++ ) {
 4a4:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <temp>
				tasks[i]->elapsedTime = 0;
			}
			tasks[i]->elapsedTime += 1;
		}
		//val = GetKeypadKey();
		switch (temp) {
 4a8:	8e 2f       	mov	r24, r30
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	85 34       	cpi	r24, 0x45	; 69
 4ae:	91 05       	cpc	r25, r1
 4b0:	08 f0       	brcs	.+2      	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 4b2:	6b c0       	rjmp	.+214    	; 0x58a <__LOCK_REGION_LENGTH__+0x18a>
 4b4:	fc 01       	movw	r30, r24
 4b6:	ea 5b       	subi	r30, 0xBA	; 186
 4b8:	ff 4f       	sbci	r31, 0xFF	; 255
 4ba:	6f c0       	rjmp	.+222    	; 0x59a <__tablejump2__>
 4bc:	8f e1       	ldi	r24, 0x1F	; 31
			LCD_ClearScreen();

			// All 5 LEDs on
			case '\0': PORTB = 0x1F; break;
 4be:	85 b9       	out	0x05, r24	; 5
 4c0:	65 c0       	rjmp	.+202    	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
			// hex equivalent
			case '1': PORTB = 0x01; val1 = 1; LCD_Cursor(1); LCD_WriteData(val1 + '0'); break;
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	85 b9       	out	0x05, r24	; 5
 4c6:	61 de       	rcall	.-830    	; 0x18a <LCD_Cursor>
 4c8:	81 e3       	ldi	r24, 0x31	; 49
 4ca:	76 de       	rcall	.-788    	; 0x1b8 <LCD_WriteData>
 4cc:	5f c0       	rjmp	.+190    	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
			case '2': PORTB = 0x02; val1 = 2; LCD_Cursor(1); LCD_WriteData(val1 + '0'); break;
 4ce:	82 e0       	ldi	r24, 0x02	; 2
 4d0:	85 b9       	out	0x05, r24	; 5
 4d2:	81 e0       	ldi	r24, 0x01	; 1
 4d4:	5a de       	rcall	.-844    	; 0x18a <LCD_Cursor>
 4d6:	82 e3       	ldi	r24, 0x32	; 50
 4d8:	6f de       	rcall	.-802    	; 0x1b8 <LCD_WriteData>
 4da:	58 c0       	rjmp	.+176    	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
			case '3': PORTB = 0x03; val1 = 3; LCD_Cursor(1); LCD_WriteData(val1 + '0'); break;
 4dc:	83 e0       	ldi	r24, 0x03	; 3
 4de:	85 b9       	out	0x05, r24	; 5
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	53 de       	rcall	.-858    	; 0x18a <LCD_Cursor>
 4e4:	83 e3       	ldi	r24, 0x33	; 51
 4e6:	68 de       	rcall	.-816    	; 0x1b8 <LCD_WriteData>
 4e8:	51 c0       	rjmp	.+162    	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
			case '4': PORTB = 0x04; val1 = 4; LCD_Cursor(1); LCD_WriteData(val1 + '0'); break;
 4ea:	84 e0       	ldi	r24, 0x04	; 4
 4ec:	85 b9       	out	0x05, r24	; 5
 4ee:	81 e0       	ldi	r24, 0x01	; 1
 4f0:	4c de       	rcall	.-872    	; 0x18a <LCD_Cursor>
 4f2:	84 e3       	ldi	r24, 0x34	; 52
 4f4:	61 de       	rcall	.-830    	; 0x1b8 <LCD_WriteData>
			case '5': PORTB = 0x05; val1 = 5; LCD_Cursor(1); LCD_WriteData(val1 + '0'); break;
 4f6:	4a c0       	rjmp	.+148    	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
 4f8:	85 e0       	ldi	r24, 0x05	; 5
 4fa:	85 b9       	out	0x05, r24	; 5
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	45 de       	rcall	.-886    	; 0x18a <LCD_Cursor>
 500:	85 e3       	ldi	r24, 0x35	; 53
 502:	5a de       	rcall	.-844    	; 0x1b8 <LCD_WriteData>
			case '6': PORTB = 0x06; val1 = 6; LCD_Cursor(1); LCD_WriteData(val1 + '0'); break;
 504:	43 c0       	rjmp	.+134    	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
 506:	f5 b8       	out	0x05, r15	; 5
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	3f de       	rcall	.-898    	; 0x18a <LCD_Cursor>
 50c:	86 e3       	ldi	r24, 0x36	; 54
 50e:	54 de       	rcall	.-856    	; 0x1b8 <LCD_WriteData>
			case '7': PORTB = 0x07; val1 = 7; LCD_Cursor(1); LCD_WriteData(val1 + '0'); break;
 510:	3d c0       	rjmp	.+122    	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
 512:	e5 b8       	out	0x05, r14	; 5
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	39 de       	rcall	.-910    	; 0x18a <LCD_Cursor>
 518:	87 e3       	ldi	r24, 0x37	; 55
 51a:	4e de       	rcall	.-868    	; 0x1b8 <LCD_WriteData>
			case '8': PORTB = 0x08; val1 = 8; LCD_Cursor(1); LCD_WriteData(val1 + '0'); break;
 51c:	37 c0       	rjmp	.+110    	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
 51e:	d5 b8       	out	0x05, r13	; 5
 520:	81 e0       	ldi	r24, 0x01	; 1
 522:	33 de       	rcall	.-922    	; 0x18a <LCD_Cursor>
 524:	88 e3       	ldi	r24, 0x38	; 56
 526:	48 de       	rcall	.-880    	; 0x1b8 <LCD_WriteData>
			case '9': PORTB = 0x09; val1 = 9; LCD_Cursor(1); LCD_WriteData(val1 + '0'); break;
 528:	31 c0       	rjmp	.+98     	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
 52a:	c5 b8       	out	0x05, r12	; 5
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	2d de       	rcall	.-934    	; 0x18a <LCD_Cursor>
 530:	89 e3       	ldi	r24, 0x39	; 57
 532:	42 de       	rcall	.-892    	; 0x1b8 <LCD_WriteData>
			case '0': PORTB = 0x00; val1 = 0; LCD_Cursor(1); LCD_WriteData(val1 + '0'); break;
 534:	2b c0       	rjmp	.+86     	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
 536:	15 b8       	out	0x05, r1	; 5
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	27 de       	rcall	.-946    	; 0x18a <LCD_Cursor>
 53c:	80 e3       	ldi	r24, 0x30	; 48
 53e:	3c de       	rcall	.-904    	; 0x1b8 <LCD_WriteData>


			// . . . ***** FINISH *****
			case 'A': PORTB = 0x0A; val1 = 65; LCD_Cursor(1); LCD_WriteData(val1); break;
 540:	25 c0       	rjmp	.+74     	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
 542:	b5 b8       	out	0x05, r11	; 5
 544:	81 e0       	ldi	r24, 0x01	; 1
 546:	21 de       	rcall	.-958    	; 0x18a <LCD_Cursor>
 548:	81 e4       	ldi	r24, 0x41	; 65
 54a:	36 de       	rcall	.-916    	; 0x1b8 <LCD_WriteData>
			case 'B': PORTB = 0x0B; val1 = 66; LCD_Cursor(1); LCD_WriteData(val1); break;
 54c:	1f c0       	rjmp	.+62     	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
 54e:	a5 b8       	out	0x05, r10	; 5
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	1b de       	rcall	.-970    	; 0x18a <LCD_Cursor>
 554:	82 e4       	ldi	r24, 0x42	; 66
 556:	30 de       	rcall	.-928    	; 0x1b8 <LCD_WriteData>
			case 'C': PORTB = 0x0C; val1 = 67; LCD_Cursor(1); LCD_WriteData(val1); break;
 558:	19 c0       	rjmp	.+50     	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
 55a:	95 b8       	out	0x05, r9	; 5
 55c:	81 e0       	ldi	r24, 0x01	; 1
 55e:	15 de       	rcall	.-982    	; 0x18a <LCD_Cursor>
 560:	83 e4       	ldi	r24, 0x43	; 67
 562:	2a de       	rcall	.-940    	; 0x1b8 <LCD_WriteData>
 564:	13 c0       	rjmp	.+38     	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
 566:	85 b8       	out	0x05, r8	; 5
			case 'D': PORTB = 0x0D; val1 = 68; LCD_Cursor(1); LCD_WriteData(val1); break;
 568:	81 e0       	ldi	r24, 0x01	; 1
 56a:	0f de       	rcall	.-994    	; 0x18a <LCD_Cursor>
 56c:	84 e4       	ldi	r24, 0x44	; 68
 56e:	24 de       	rcall	.-952    	; 0x1b8 <LCD_WriteData>
 570:	0d c0       	rjmp	.+26     	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
 572:	75 b8       	out	0x05, r7	; 5
 574:	81 e0       	ldi	r24, 0x01	; 1
 576:	09 de       	rcall	.-1006   	; 0x18a <LCD_Cursor>
			case '*': PORTB = 0x0E; val1 = 42; LCD_Cursor(1); LCD_WriteData(val1); break;
 578:	8a e2       	ldi	r24, 0x2A	; 42
 57a:	1e de       	rcall	.-964    	; 0x1b8 <LCD_WriteData>
 57c:	07 c0       	rjmp	.+14     	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
 57e:	65 b8       	out	0x05, r6	; 5
 580:	81 e0       	ldi	r24, 0x01	; 1
 582:	03 de       	rcall	.-1018   	; 0x18a <LCD_Cursor>
 584:	83 e2       	ldi	r24, 0x23	; 35
 586:	18 de       	rcall	.-976    	; 0x1b8 <LCD_WriteData>
			case '#': PORTB = 0x0F; val1 = 35; LCD_Cursor(1); LCD_WriteData(val1); break;
 588:	01 c0       	rjmp	.+2      	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
 58a:	55 b8       	out	0x05, r5	; 5
 58c:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <TimerFlag>
 590:	88 23       	and	r24, r24
 592:	e1 f3       	breq	.-8      	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
 594:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <TimerFlag>
			// Should never occur. Middle LED off.
			default: PORTB = 0x1B; break;
 598:	5c cf       	rjmp	.-328    	; 0x452 <__LOCK_REGION_LENGTH__+0x52>

0000059a <__tablejump2__>:

		}

		while(!TimerFlag){};
 59a:	ee 0f       	add	r30, r30
 59c:	ff 1f       	adc	r31, r31
 59e:	00 24       	eor	r0, r0
 5a0:	00 1c       	adc	r0, r0
		TimerFlag = 0;
 5a2:	0b be       	out	0x3b, r0	; 59
 5a4:	07 90       	elpm	r0, Z+


	}
 5a6:	f6 91       	elpm	r31, Z
 5a8:	e0 2d       	mov	r30, r0
 5aa:	09 94       	ijmp

000005ac <_exit>:
 5ac:	f8 94       	cli

000005ae <__stop_program>:
 5ae:	ff cf       	rjmp	.-2      	; 0x5ae <__stop_program>
