
jfrac001_lab11_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  000003cc  00000460  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  0080012e  0080012e  0000048e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000048e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000500  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e51  00000000  00000000  000005a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009dd  00000000  00000000  000013f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006a3  00000000  00000000  00001dd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b0  00000000  00000000  0000247c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b1  00000000  00000000  0000262c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000583  00000000  00000000  00002bdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00003160  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	1a c1       	rjmp	.+564    	; 0x26a <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec ec       	ldi	r30, 0xCC	; 204
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 32       	cpi	r26, 0x2E	; 46
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ae e2       	ldi	r26, 0x2E	; 46
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 35       	cpi	r26, 0x50	; 80
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0f d1       	rcall	.+542    	; 0x2e2 <main>
  c4:	81 c1       	rjmp	.+770    	; 0x3c8 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <delay_ms>:
		if( c == 0 ) { return b; }
		a = b;
		b = c;
	}
	return 0;
}
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	5c f0       	brlt	.+22     	; 0xe4 <delay_ms+0x1c>
  ce:	08 95       	ret
  d0:	00 00       	nop
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	31 09       	sbc	r19, r1
  d6:	e1 f7       	brne	.-8      	; 0xd0 <delay_ms+0x8>
  d8:	4f 5f       	subi	r20, 0xFF	; 255
  da:	5f 4f       	sbci	r21, 0xFF	; 255
  dc:	84 17       	cp	r24, r20
  de:	95 07       	cpc	r25, r21
  e0:	19 f4       	brne	.+6      	; 0xe8 <delay_ms+0x20>
  e2:	08 95       	ret
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	27 e0       	ldi	r18, 0x07	; 7
  ea:	33 e0       	ldi	r19, 0x03	; 3
  ec:	f1 cf       	rjmp	.-30     	; 0xd0 <delay_ms+0x8>

000000ee <LCD_WriteCommand>:
  ee:	10 98       	cbi	0x02, 0	; 2
  f0:	8b b9       	out	0x0b, r24	; 11
  f2:	11 9a       	sbi	0x02, 1	; 2
  f4:	00 00       	nop
  f6:	11 98       	cbi	0x02, 1	; 2
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	e5 cf       	rjmp	.-54     	; 0xc8 <delay_ms>
  fe:	08 95       	ret

00000100 <LCD_ClearScreen>:
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	f5 cf       	rjmp	.-22     	; 0xee <LCD_WriteCommand>
 104:	08 95       	ret

00000106 <LCD_Cursor>:
 106:	81 31       	cpi	r24, 0x11	; 17
 108:	18 f4       	brcc	.+6      	; 0x110 <LCD_Cursor+0xa>
 10a:	81 58       	subi	r24, 0x81	; 129
 10c:	f0 cf       	rjmp	.-32     	; 0xee <LCD_WriteCommand>
 10e:	08 95       	ret
 110:	81 55       	subi	r24, 0x51	; 81
 112:	ed cf       	rjmp	.-38     	; 0xee <LCD_WriteCommand>
 114:	08 95       	ret

00000116 <LCD_init>:
 116:	84 e6       	ldi	r24, 0x64	; 100
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	d6 df       	rcall	.-84     	; 0xc8 <delay_ms>
 11c:	88 e3       	ldi	r24, 0x38	; 56
 11e:	e7 df       	rcall	.-50     	; 0xee <LCD_WriteCommand>
 120:	86 e0       	ldi	r24, 0x06	; 6
 122:	e5 df       	rcall	.-54     	; 0xee <LCD_WriteCommand>
 124:	8f e0       	ldi	r24, 0x0F	; 15
 126:	e3 df       	rcall	.-58     	; 0xee <LCD_WriteCommand>
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	e1 df       	rcall	.-62     	; 0xee <LCD_WriteCommand>
 12c:	8a e0       	ldi	r24, 0x0A	; 10
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	cb cf       	rjmp	.-106    	; 0xc8 <delay_ms>
 132:	08 95       	ret

00000134 <LCD_WriteData>:
 134:	10 9a       	sbi	0x02, 0	; 2
 136:	8b b9       	out	0x0b, r24	; 11
 138:	11 9a       	sbi	0x02, 1	; 2
 13a:	00 00       	nop
 13c:	11 98       	cbi	0x02, 1	; 2
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	c2 cf       	rjmp	.-124    	; 0xc8 <delay_ms>
 144:	08 95       	ret

00000146 <LCD_DisplayString>:
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	18 2f       	mov	r17, r24
 150:	eb 01       	movw	r28, r22
 152:	d6 df       	rcall	.-84     	; 0x100 <LCD_ClearScreen>
 154:	88 81       	ld	r24, Y
 156:	88 23       	and	r24, r24
 158:	51 f0       	breq	.+20     	; 0x16e <LCD_DisplayString+0x28>
 15a:	01 e0       	ldi	r16, 0x01	; 1
 15c:	01 0f       	add	r16, r17
 15e:	81 2f       	mov	r24, r17
 160:	d2 df       	rcall	.-92     	; 0x106 <LCD_Cursor>
 162:	89 91       	ld	r24, Y+
 164:	e7 df       	rcall	.-50     	; 0x134 <LCD_WriteData>
 166:	10 2f       	mov	r17, r16
 168:	88 81       	ld	r24, Y
 16a:	81 11       	cpse	r24, r1
 16c:	f6 cf       	rjmp	.-20     	; 0x15a <LCD_DisplayString+0x14>
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	1f 91       	pop	r17
 174:	0f 91       	pop	r16
 176:	08 95       	ret

00000178 <tick_funct>:
 178:	af 92       	push	r10
 17a:	bf 92       	push	r11
 17c:	cf 92       	push	r12
 17e:	df 92       	push	r13
 180:	ef 92       	push	r14
 182:	ff 92       	push	r15
 184:	0f 93       	push	r16
 186:	1f 93       	push	r17
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	8c 01       	movw	r16, r24
 18e:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__data_start>
 192:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__data_start+0x1>
 196:	20 91 39 01 	lds	r18, 0x0139	; 0x800139 <count>
 19a:	a2 2e       	mov	r10, r18
 19c:	b1 2c       	mov	r11, r1
 19e:	0f 2e       	mov	r0, r31
 1a0:	ff e4       	ldi	r31, 0x4F	; 79
 1a2:	ef 2e       	mov	r14, r31
 1a4:	f1 e0       	ldi	r31, 0x01	; 1
 1a6:	ff 2e       	mov	r15, r31
 1a8:	f0 2d       	mov	r31, r0
 1aa:	ef e3       	ldi	r30, 0x3F	; 63
 1ac:	f1 e0       	ldi	r31, 0x01	; 1
 1ae:	95 01       	movw	r18, r10
 1b0:	2f 53       	subi	r18, 0x3F	; 63
 1b2:	31 40       	sbci	r19, 0x01	; 1
 1b4:	c6 e2       	ldi	r28, 0x26	; 38
 1b6:	d0 e0       	ldi	r29, 0x00	; 0
 1b8:	c9 01       	movw	r24, r18
 1ba:	8e 0f       	add	r24, r30
 1bc:	9f 1f       	adc	r25, r31
 1be:	be 01       	movw	r22, r28
 1c0:	dc d0       	rcall	.+440    	; 0x37a <__divmodhi4>
 1c2:	d6 01       	movw	r26, r12
 1c4:	a8 0f       	add	r26, r24
 1c6:	b9 1f       	adc	r27, r25
 1c8:	8c 91       	ld	r24, X
 1ca:	81 93       	st	Z+, r24
 1cc:	ee 15       	cp	r30, r14
 1ce:	ff 05       	cpc	r31, r15
 1d0:	99 f7       	brne	.-26     	; 0x1b8 <tick_funct+0x40>
 1d2:	c5 01       	movw	r24, r10
 1d4:	01 96       	adiw	r24, 0x01	; 1
 1d6:	66 e2       	ldi	r22, 0x26	; 38
 1d8:	70 e0       	ldi	r23, 0x00	; 0
 1da:	cf d0       	rcall	.+414    	; 0x37a <__divmodhi4>
 1dc:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <count>
 1e0:	6f e3       	ldi	r22, 0x3F	; 63
 1e2:	71 e0       	ldi	r23, 0x01	; 1
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	af df       	rcall	.-162    	; 0x146 <LCD_DisplayString>
 1e8:	c8 01       	movw	r24, r16
 1ea:	df 91       	pop	r29
 1ec:	cf 91       	pop	r28
 1ee:	1f 91       	pop	r17
 1f0:	0f 91       	pop	r16
 1f2:	ff 90       	pop	r15
 1f4:	ef 90       	pop	r14
 1f6:	df 90       	pop	r13
 1f8:	cf 90       	pop	r12
 1fa:	bf 90       	pop	r11
 1fc:	af 90       	pop	r10
 1fe:	08 95       	ret

00000200 <TimerSet>:
 200:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <_avr_timer_M>
 204:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <_avr_timer_M+0x1>
 208:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_avr_timer_M+0x2>
 20c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <_avr_timer_M+0x3>
 210:	60 93 3a 01 	sts	0x013A, r22	; 0x80013a <_avr_timer_cntcurr>
 214:	70 93 3b 01 	sts	0x013B, r23	; 0x80013b <_avr_timer_cntcurr+0x1>
 218:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <_avr_timer_cntcurr+0x2>
 21c:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <_avr_timer_cntcurr+0x3>
 220:	08 95       	ret

00000222 <TimerOn>:
 222:	8b e0       	ldi	r24, 0x0B	; 11
 224:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 228:	8d e7       	ldi	r24, 0x7D	; 125
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 230:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 234:	82 e0       	ldi	r24, 0x02	; 2
 236:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 23a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 23e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 242:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_avr_timer_M>
 246:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_avr_timer_M+0x1>
 24a:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <_avr_timer_M+0x2>
 24e:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <_avr_timer_M+0x3>
 252:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <_avr_timer_cntcurr>
 256:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <_avr_timer_cntcurr+0x1>
 25a:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <_avr_timer_cntcurr+0x2>
 25e:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <_avr_timer_cntcurr+0x3>
 262:	8f b7       	in	r24, 0x3f	; 63
 264:	80 68       	ori	r24, 0x80	; 128
 266:	8f bf       	out	0x3f, r24	; 63
 268:	08 95       	ret

0000026a <__vector_13>:
 26a:	1f 92       	push	r1
 26c:	0f 92       	push	r0
 26e:	0f b6       	in	r0, 0x3f	; 63
 270:	0f 92       	push	r0
 272:	11 24       	eor	r1, r1
 274:	8f 93       	push	r24
 276:	9f 93       	push	r25
 278:	af 93       	push	r26
 27a:	bf 93       	push	r27
 27c:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <_avr_timer_cntcurr>
 280:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <_avr_timer_cntcurr+0x1>
 284:	a0 91 3c 01 	lds	r26, 0x013C	; 0x80013c <_avr_timer_cntcurr+0x2>
 288:	b0 91 3d 01 	lds	r27, 0x013D	; 0x80013d <_avr_timer_cntcurr+0x3>
 28c:	01 97       	sbiw	r24, 0x01	; 1
 28e:	a1 09       	sbc	r26, r1
 290:	b1 09       	sbc	r27, r1
 292:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <_avr_timer_cntcurr>
 296:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <_avr_timer_cntcurr+0x1>
 29a:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <_avr_timer_cntcurr+0x2>
 29e:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <_avr_timer_cntcurr+0x3>
 2a2:	89 2b       	or	r24, r25
 2a4:	8a 2b       	or	r24, r26
 2a6:	8b 2b       	or	r24, r27
 2a8:	99 f4       	brne	.+38     	; 0x2d0 <__vector_13+0x66>
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <TimerFlag>
 2b0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_avr_timer_M>
 2b4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_avr_timer_M+0x1>
 2b8:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <_avr_timer_M+0x2>
 2bc:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <_avr_timer_M+0x3>
 2c0:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <_avr_timer_cntcurr>
 2c4:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <_avr_timer_cntcurr+0x1>
 2c8:	a0 93 3c 01 	sts	0x013C, r26	; 0x80013c <_avr_timer_cntcurr+0x2>
 2cc:	b0 93 3d 01 	sts	0x013D, r27	; 0x80013d <_avr_timer_cntcurr+0x3>
 2d0:	bf 91       	pop	r27
 2d2:	af 91       	pop	r26
 2d4:	9f 91       	pop	r25
 2d6:	8f 91       	pop	r24
 2d8:	0f 90       	pop	r0
 2da:	0f be       	out	0x3f, r0	; 63
 2dc:	0f 90       	pop	r0
 2de:	1f 90       	pop	r1
 2e0:	18 95       	reti

000002e2 <main>:
	return state;
}

int main(void)
{
	DDRD = 0xFF; PORTD = 0x00;
 2e2:	8f ef       	ldi	r24, 0xFF	; 255
 2e4:	8a b9       	out	0x0a, r24	; 10
 2e6:	1b b8       	out	0x0b, r1	; 11
	DDRA = 0xFF; PORTA = 0x00;
 2e8:	81 b9       	out	0x01, r24	; 1
 2ea:	12 b8       	out	0x02, r1	; 2
	//Declare an array of tasks
	static task task1;
	task *tasks[] = { &task1 };
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);
	//Task 1 -- ONLY TASK
	task1.state = -1;
 2ec:	ee e2       	ldi	r30, 0x2E	; 46
 2ee:	f1 e0       	ldi	r31, 0x01	; 1
 2f0:	80 83       	st	Z, r24
	task1.period = SMTick1_period;
 2f2:	84 e1       	ldi	r24, 0x14	; 20
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	a0 e0       	ldi	r26, 0x00	; 0
 2f8:	b0 e0       	ldi	r27, 0x00	; 0
 2fa:	81 83       	std	Z+1, r24	; 0x01
 2fc:	92 83       	std	Z+2, r25	; 0x02
 2fe:	a3 83       	std	Z+3, r26	; 0x03
 300:	b4 83       	std	Z+4, r27	; 0x04
	task1.elapsedTime = SMTick1_period;
 302:	85 83       	std	Z+5, r24	; 0x05
 304:	96 83       	std	Z+6, r25	; 0x06
 306:	a7 83       	std	Z+7, r26	; 0x07
 308:	b0 87       	std	Z+8, r27	; 0x08
	task1.TickFct = &tick_funct;
 30a:	8c eb       	ldi	r24, 0xBC	; 188
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	92 87       	std	Z+10, r25	; 0x0a
 310:	81 87       	std	Z+9, r24	; 0x09
	

	// Set the timer and turn it on
	TimerSet(GCD);
 312:	64 e1       	ldi	r22, 0x14	; 20
 314:	70 e0       	ldi	r23, 0x00	; 0
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	72 df       	rcall	.-284    	; 0x200 <TimerSet>
	TimerOn();
 31c:	82 df       	rcall	.-252    	; 0x222 <TimerOn>
	LCD_init();
 31e:	fb de       	rcall	.-522    	; 0x116 <LCD_init>
 320:	ce e2       	ldi	r28, 0x2E	; 46
	{
		// Scheduler code
		for ( i = 0; i < numTasks; i++ )
		{
			// Task is ready to tick
			if ( tasks[i]->elapsedTime == tasks[i]->period )
 322:	d1 e0       	ldi	r29, 0x01	; 1
 324:	4d 81       	ldd	r20, Y+5	; 0x05
 326:	5e 81       	ldd	r21, Y+6	; 0x06
 328:	6f 81       	ldd	r22, Y+7	; 0x07
 32a:	78 85       	ldd	r23, Y+8	; 0x08
 32c:	89 81       	ldd	r24, Y+1	; 0x01
 32e:	9a 81       	ldd	r25, Y+2	; 0x02
 330:	ab 81       	ldd	r26, Y+3	; 0x03
 332:	bc 81       	ldd	r27, Y+4	; 0x04
 334:	48 17       	cp	r20, r24
 336:	59 07       	cpc	r21, r25
 338:	6a 07       	cpc	r22, r26
 33a:	7b 07       	cpc	r23, r27
 33c:	61 f4       	brne	.+24     	; 0x356 <main+0x74>
 33e:	88 81       	ld	r24, Y
			{
				// Setting next state for task
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 340:	e9 85       	ldd	r30, Y+9	; 0x09
 342:	fa 85       	ldd	r31, Y+10	; 0x0a
 344:	08 2e       	mov	r0, r24
 346:	00 0c       	add	r0, r0
 348:	99 0b       	sbc	r25, r25
 34a:	09 95       	icall
 34c:	88 83       	st	Y, r24
 34e:	1d 82       	std	Y+5, r1	; 0x05
				// Reset elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
 350:	1e 82       	std	Y+6, r1	; 0x06
 352:	1f 82       	std	Y+7, r1	; 0x07
 354:	18 86       	std	Y+8, r1	; 0x08
 356:	8d 81       	ldd	r24, Y+5	; 0x05
			}
			tasks[i]->elapsedTime += 1;
 358:	9e 81       	ldd	r25, Y+6	; 0x06
 35a:	af 81       	ldd	r26, Y+7	; 0x07
 35c:	b8 85       	ldd	r27, Y+8	; 0x08
 35e:	01 96       	adiw	r24, 0x01	; 1
 360:	a1 1d       	adc	r26, r1
 362:	b1 1d       	adc	r27, r1
 364:	8d 83       	std	Y+5, r24	; 0x05
 366:	9e 83       	std	Y+6, r25	; 0x06
 368:	af 83       	std	Y+7, r26	; 0x07
 36a:	b8 87       	std	Y+8, r27	; 0x08
 36c:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <TimerFlag>
		}
		//tick_funct();
		while (!TimerFlag);
 370:	88 23       	and	r24, r24
 372:	e1 f3       	breq	.-8      	; 0x36c <main+0x8a>
 374:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <TimerFlag>
		TimerFlag = 0;
 378:	d5 cf       	rjmp	.-86     	; 0x324 <main+0x42>

0000037a <__divmodhi4>:
	}
 37a:	97 fb       	bst	r25, 7
 37c:	07 2e       	mov	r0, r23
 37e:	16 f4       	brtc	.+4      	; 0x384 <__divmodhi4+0xa>
 380:	00 94       	com	r0
 382:	06 d0       	rcall	.+12     	; 0x390 <__divmodhi4_neg1>
 384:	77 fd       	sbrc	r23, 7
 386:	08 d0       	rcall	.+16     	; 0x398 <__divmodhi4_neg2>
 388:	0b d0       	rcall	.+22     	; 0x3a0 <__udivmodhi4>
 38a:	07 fc       	sbrc	r0, 7
 38c:	05 d0       	rcall	.+10     	; 0x398 <__divmodhi4_neg2>
 38e:	3e f4       	brtc	.+14     	; 0x39e <__divmodhi4_exit>

00000390 <__divmodhi4_neg1>:
 390:	90 95       	com	r25
 392:	81 95       	neg	r24
 394:	9f 4f       	sbci	r25, 0xFF	; 255
 396:	08 95       	ret

00000398 <__divmodhi4_neg2>:
 398:	70 95       	com	r23
 39a:	61 95       	neg	r22
 39c:	7f 4f       	sbci	r23, 0xFF	; 255

0000039e <__divmodhi4_exit>:
 39e:	08 95       	ret

000003a0 <__udivmodhi4>:
 3a0:	aa 1b       	sub	r26, r26
 3a2:	bb 1b       	sub	r27, r27
 3a4:	51 e1       	ldi	r21, 0x11	; 17
 3a6:	07 c0       	rjmp	.+14     	; 0x3b6 <__udivmodhi4_ep>

000003a8 <__udivmodhi4_loop>:
 3a8:	aa 1f       	adc	r26, r26
 3aa:	bb 1f       	adc	r27, r27
 3ac:	a6 17       	cp	r26, r22
 3ae:	b7 07       	cpc	r27, r23
 3b0:	10 f0       	brcs	.+4      	; 0x3b6 <__udivmodhi4_ep>
 3b2:	a6 1b       	sub	r26, r22
 3b4:	b7 0b       	sbc	r27, r23

000003b6 <__udivmodhi4_ep>:
 3b6:	88 1f       	adc	r24, r24
 3b8:	99 1f       	adc	r25, r25
 3ba:	5a 95       	dec	r21
 3bc:	a9 f7       	brne	.-22     	; 0x3a8 <__udivmodhi4_loop>
 3be:	80 95       	com	r24
 3c0:	90 95       	com	r25
 3c2:	bc 01       	movw	r22, r24
 3c4:	cd 01       	movw	r24, r26
 3c6:	08 95       	ret

000003c8 <_exit>:
 3c8:	f8 94       	cli

000003ca <__stop_program>:
 3ca:	ff cf       	rjmp	.-2      	; 0x3ca <__stop_program>
