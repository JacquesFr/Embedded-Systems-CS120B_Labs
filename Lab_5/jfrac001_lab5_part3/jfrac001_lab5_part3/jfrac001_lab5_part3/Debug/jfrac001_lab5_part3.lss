
jfrac001_lab5_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000019c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  00000210  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000240  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000098d  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000835  00000000  00000000  00000c3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000030d  00000000  00000000  00001472  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00001780  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000046a  00000000  00000000  000017c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000b6  00000000  00000000  00001c2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001ce4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a6 30       	cpi	r26, 0x06	; 6
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	6c d0       	rcall	.+216    	; 0x182 <main>
  aa:	76 c0       	rjmp	.+236    	; 0x198 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <tick>:
}


void tick(){
	
	switch(state)	{		//State Transitions
  ae:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <state>
  b2:	81 30       	cpi	r24, 0x01	; 1
  b4:	71 f0       	breq	.+28     	; 0xd2 <tick+0x24>
  b6:	28 f0       	brcs	.+10     	; 0xc2 <tick+0x14>
  b8:	82 30       	cpi	r24, 0x02	; 2
  ba:	a1 f0       	breq	.+40     	; 0xe4 <tick+0x36>
  bc:	83 30       	cpi	r24, 0x03	; 3
  be:	d9 f0       	breq	.+54     	; 0xf6 <tick+0x48>
  c0:	5d c0       	rjmp	.+186    	; 0x17c <tick+0xce>
		
		case(Init):
			counter = 0x00;
  c2:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <counter>
			direction = 0x00;
  c6:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <direction>
			state = wait;
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
		break;
  d0:	08 95       	ret
		
		case(wait):
			if(button == 0x00){
  d2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <button>
  d6:	88 23       	and	r24, r24
  d8:	09 f4       	brne	.+2      	; 0xdc <tick+0x2e>
  da:	52 c0       	rjmp	.+164    	; 0x180 <tick+0xd2>
				state = wait;
			}
			else{
				state = button_pressed;
  dc:	82 e0       	ldi	r24, 0x02	; 2
  de:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
  e2:	08 95       	ret
			}
		break;
		
		case(button_pressed):
			if(button == 0x01){
  e4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <button>
  e8:	81 30       	cpi	r24, 0x01	; 1
  ea:	09 f4       	brne	.+2      	; 0xee <tick+0x40>
  ec:	49 c0       	rjmp	.+146    	; 0x180 <tick+0xd2>
				state = button_pressed;
			}
			else{
				state = button_released;
  ee:	83 e0       	ldi	r24, 0x03	; 3
  f0:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
  f4:	08 95       	ret
			}
		break;
		
		case(button_released):
		
			if(!direction){
  f6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <direction>
  fa:	81 11       	cpse	r24, r1
  fc:	1d c0       	rjmp	.+58     	; 0x138 <tick+0x8a>
				if(counter < 6){
  fe:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <counter>
 102:	86 30       	cpi	r24, 0x06	; 6
 104:	90 f4       	brcc	.+36     	; 0x12a <tick+0x7c>
unsigned char button;

enum state {Init, wait, button_pressed, button_released} state;
	
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
 106:	21 e0       	ldi	r18, 0x01	; 1
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	08 2e       	mov	r0, r24
 10c:	02 c0       	rjmp	.+4      	; 0x112 <tick+0x64>
 10e:	22 0f       	add	r18, r18
 110:	33 1f       	adc	r19, r19
 112:	0a 94       	dec	r0
 114:	e2 f7       	brpl	.-8      	; 0x10e <tick+0x60>
 116:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <light>
 11a:	29 2b       	or	r18, r25
		
		case(button_released):
		
			if(!direction){
				if(counter < 6){
					light = SetBit(light, counter, 1);
 11c:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <light>
					counter++;
 120:	8f 5f       	subi	r24, 0xFF	; 255
 122:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <counter>
					PORTB = light;
 126:	25 b9       	out	0x05, r18	; 5
 128:	25 c0       	rjmp	.+74     	; 0x174 <tick+0xc6>
				}
				else{
					direction = 0x01;
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <direction>
					PORTB = reset;
 130:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 134:	85 b9       	out	0x05, r24	; 5
 136:	1e c0       	rjmp	.+60     	; 0x174 <tick+0xc6>
				}
			}
			else{
				if(counter == 0){
 138:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <counter>
 13c:	81 11       	cpse	r24, r1
 13e:	06 c0       	rjmp	.+12     	; 0x14c <tick+0x9e>
					direction = 0x00;
 140:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <direction>
					PORTB = reset;
 144:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 148:	85 b9       	out	0x05, r24	; 5
 14a:	14 c0       	rjmp	.+40     	; 0x174 <tick+0xc6>
unsigned char button;

enum state {Init, wait, button_pressed, button_released} state;
	
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
 14c:	21 e0       	ldi	r18, 0x01	; 1
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	08 2e       	mov	r0, r24
 152:	02 c0       	rjmp	.+4      	; 0x158 <tick+0xaa>
 154:	22 0f       	add	r18, r18
 156:	33 1f       	adc	r19, r19
 158:	0a 94       	dec	r0
 15a:	e2 f7       	brpl	.-8      	; 0x154 <tick+0xa6>
 15c:	92 2f       	mov	r25, r18
 15e:	90 95       	com	r25
 160:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <light>
 164:	92 23       	and	r25, r18
				if(counter == 0){
					direction = 0x00;
					PORTB = reset;
				}
				else{
					light = SetBit(light, counter, 0);
 166:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <light>
					counter --;
 16a:	81 50       	subi	r24, 0x01	; 1
 16c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <counter>
					PORTB = light & 0x3F;
 170:	9f 73       	andi	r25, 0x3F	; 63
 172:	95 b9       	out	0x05, r25	; 5
				}
			}
			
			state = wait;
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
			
		break;
 17a:	08 95       	ret
		
		default:
			state = Init;
 17c:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <state>
 180:	08 95       	ret

00000182 <main>:

}

int main(void)
{
	DDRA = 0x00; PORTA = 0xFF;
 182:	11 b8       	out	0x01, r1	; 1
 184:	8f ef       	ldi	r24, 0xFF	; 255
 186:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF; PORTB = 0x00;
 188:	84 b9       	out	0x04, r24	; 4
 18a:	15 b8       	out	0x05, r1	; 5
    /* Replace with your application code */
    while (1) 
    {
		button = PINA & 0x01;
 18c:	80 b1       	in	r24, 0x00	; 0
 18e:	81 70       	andi	r24, 0x01	; 1
 190:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <button>
		tick();
 194:	8c df       	rcall	.-232    	; 0xae <tick>
 196:	fa cf       	rjmp	.-12     	; 0x18c <main+0xa>

00000198 <_exit>:
 198:	f8 94       	cli

0000019a <__stop_program>:
 19a:	ff cf       	rjmp	.-2      	; 0x19a <__stop_program>
