
jfrac001_lab5_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001bc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  00000230  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000260  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008bb  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d6  00000000  00000000  00000b83  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000307  00000000  00000000  00001359  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00001660  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000460  00000000  00000000  00001694  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001af4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4d c0       	rjmp	.+154    	; 0x9c <__ctors_end>
   2:	00 00       	nop
   4:	5b c0       	rjmp	.+182    	; 0xbc <__bad_interrupt>
   6:	00 00       	nop
   8:	59 c0       	rjmp	.+178    	; 0xbc <__bad_interrupt>
   a:	00 00       	nop
   c:	57 c0       	rjmp	.+174    	; 0xbc <__bad_interrupt>
   e:	00 00       	nop
  10:	55 c0       	rjmp	.+170    	; 0xbc <__bad_interrupt>
  12:	00 00       	nop
  14:	53 c0       	rjmp	.+166    	; 0xbc <__bad_interrupt>
  16:	00 00       	nop
  18:	51 c0       	rjmp	.+162    	; 0xbc <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4f c0       	rjmp	.+158    	; 0xbc <__bad_interrupt>
  1e:	00 00       	nop
  20:	4d c0       	rjmp	.+154    	; 0xbc <__bad_interrupt>
  22:	00 00       	nop
  24:	4b c0       	rjmp	.+150    	; 0xbc <__bad_interrupt>
  26:	00 00       	nop
  28:	49 c0       	rjmp	.+146    	; 0xbc <__bad_interrupt>
  2a:	00 00       	nop
  2c:	47 c0       	rjmp	.+142    	; 0xbc <__bad_interrupt>
  2e:	00 00       	nop
  30:	45 c0       	rjmp	.+138    	; 0xbc <__bad_interrupt>
  32:	00 00       	nop
  34:	43 c0       	rjmp	.+134    	; 0xbc <__bad_interrupt>
  36:	00 00       	nop
  38:	41 c0       	rjmp	.+130    	; 0xbc <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3f c0       	rjmp	.+126    	; 0xbc <__bad_interrupt>
  3e:	00 00       	nop
  40:	3d c0       	rjmp	.+122    	; 0xbc <__bad_interrupt>
  42:	00 00       	nop
  44:	3b c0       	rjmp	.+118    	; 0xbc <__bad_interrupt>
  46:	00 00       	nop
  48:	39 c0       	rjmp	.+114    	; 0xbc <__bad_interrupt>
  4a:	00 00       	nop
  4c:	37 c0       	rjmp	.+110    	; 0xbc <__bad_interrupt>
  4e:	00 00       	nop
  50:	35 c0       	rjmp	.+106    	; 0xbc <__bad_interrupt>
  52:	00 00       	nop
  54:	33 c0       	rjmp	.+102    	; 0xbc <__bad_interrupt>
  56:	00 00       	nop
  58:	31 c0       	rjmp	.+98     	; 0xbc <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2f c0       	rjmp	.+94     	; 0xbc <__bad_interrupt>
  5e:	00 00       	nop
  60:	2d c0       	rjmp	.+90     	; 0xbc <__bad_interrupt>
  62:	00 00       	nop
  64:	2b c0       	rjmp	.+86     	; 0xbc <__bad_interrupt>
  66:	00 00       	nop
  68:	29 c0       	rjmp	.+82     	; 0xbc <__bad_interrupt>
  6a:	00 00       	nop
  6c:	27 c0       	rjmp	.+78     	; 0xbc <__bad_interrupt>
  6e:	00 00       	nop
  70:	25 c0       	rjmp	.+74     	; 0xbc <__bad_interrupt>
  72:	00 00       	nop
  74:	23 c0       	rjmp	.+70     	; 0xbc <__bad_interrupt>
  76:	00 00       	nop
  78:	21 c0       	rjmp	.+66     	; 0xbc <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1f c0       	rjmp	.+62     	; 0xbc <__bad_interrupt>
  7e:	00 00       	nop
  80:	1d c0       	rjmp	.+58     	; 0xbc <__bad_interrupt>
  82:	00 00       	nop
  84:	1b c0       	rjmp	.+54     	; 0xbc <__bad_interrupt>
  86:	00 00       	nop
  88:	19 c0       	rjmp	.+50     	; 0xbc <__bad_interrupt>
  8a:	00 00       	nop
  8c:	6b 00       	.word	0x006b	; ????
  8e:	72 00       	.word	0x0072	; ????
  90:	87 00       	.word	0x0087	; ????
  92:	9d 00       	.word	0x009d	; ????
  94:	99 00       	.word	0x0099	; ????
  96:	af 00       	.word	0x00af	; ????
  98:	b3 00       	.word	0x00b3	; ????
  9a:	bb 00       	.word	0x00bb	; ????

0000009c <__ctors_end>:
  9c:	11 24       	eor	r1, r1
  9e:	1f be       	out	0x3f, r1	; 63
  a0:	cf ef       	ldi	r28, 0xFF	; 255
  a2:	d0 e4       	ldi	r29, 0x40	; 64
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	cd bf       	out	0x3d, r28	; 61

000000a8 <__do_clear_bss>:
  a8:	21 e0       	ldi	r18, 0x01	; 1
  aa:	a0 e0       	ldi	r26, 0x00	; 0
  ac:	b1 e0       	ldi	r27, 0x01	; 1
  ae:	01 c0       	rjmp	.+2      	; 0xb2 <.do_clear_bss_start>

000000b0 <.do_clear_bss_loop>:
  b0:	1d 92       	st	X+, r1

000000b2 <.do_clear_bss_start>:
  b2:	a3 30       	cpi	r26, 0x03	; 3
  b4:	b2 07       	cpc	r27, r18
  b6:	e1 f7       	brne	.-8      	; 0xb0 <.do_clear_bss_loop>
  b8:	68 d0       	rcall	.+208    	; 0x18a <main>
  ba:	7e c0       	rjmp	.+252    	; 0x1b8 <_exit>

000000bc <__bad_interrupt>:
  bc:	a1 cf       	rjmp	.-190    	; 0x0 <__vectors>

000000be <tick>:
void tick(){
	//Local Variables
	
	
	
	switch(state)	{		//State Transitions
  be:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <state>
  c2:	8e 2f       	mov	r24, r30
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	88 30       	cpi	r24, 0x08	; 8
  c8:	91 05       	cpc	r25, r1
  ca:	08 f0       	brcs	.+2      	; 0xce <tick+0x10>
  cc:	5b c0       	rjmp	.+182    	; 0x184 <tick+0xc6>
  ce:	fc 01       	movw	r30, r24
  d0:	ea 5b       	subi	r30, 0xBA	; 186
  d2:	ff 4f       	sbci	r31, 0xFF	; 255
  d4:	68 c0       	rjmp	.+208    	; 0x1a6 <__tablejump2__>
		
		case(Init):
			state = wait;
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
			count = 0x00;
  dc:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			PORTB = count;
  e0:	15 b8       	out	0x05, r1	; 5
		break;
  e2:	08 95       	ret
		
		case(wait):
		
			if(pinCheck == 0x03){
  e4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <pinCheck>
  e8:	83 30       	cpi	r24, 0x03	; 3
  ea:	21 f4       	brne	.+8      	; 0xf4 <tick+0x36>
				state = reset;
  ec:	87 e0       	ldi	r24, 0x07	; 7
  ee:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
  f2:	08 95       	ret
			}
		
			else if(pinCheck == 0x01){
  f4:	81 30       	cpi	r24, 0x01	; 1
  f6:	21 f4       	brne	.+8      	; 0x100 <tick+0x42>
				state = add_pressed;
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
  fe:	08 95       	ret
			}
		
			else if(pinCheck == 0x02){
 100:	82 30       	cpi	r24, 0x02	; 2
 102:	09 f0       	breq	.+2      	; 0x106 <tick+0x48>
 104:	41 c0       	rjmp	.+130    	; 0x188 <tick+0xca>
				state = sub_pressed;
 106:	83 e0       	ldi	r24, 0x03	; 3
 108:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
 10c:	08 95       	ret
		
		break;
		
		case(add_pressed):
			
			if(pinCheck == 0x01){
 10e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <pinCheck>
 112:	81 30       	cpi	r24, 0x01	; 1
 114:	c9 f1       	breq	.+114    	; 0x188 <tick+0xca>
				state = add_pressed;
			}
			
			else{
				if(count < 9){
 116:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 11a:	89 30       	cpi	r24, 0x09	; 9
 11c:	28 f4       	brcc	.+10     	; 0x128 <tick+0x6a>
					count = count + 1;
 11e:	8f 5f       	subi	r24, 0xFF	; 255
 120:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
					PORTB = count;
 124:	85 b9       	out	0x05, r24	; 5
 126:	01 c0       	rjmp	.+2      	; 0x12a <tick+0x6c>
				}
				
				else{
					PORTB = count;
 128:	85 b9       	out	0x05, r24	; 5
				}
				
				state = add;
 12a:	84 e0       	ldi	r24, 0x04	; 4
 12c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
 130:	08 95       	ret
		break;
		
		case(add):
	

				state = wait;
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
		
		break;
 138:	08 95       	ret
		
		case(sub_pressed):
		
			if(pinCheck == 0x02){
 13a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <pinCheck>
 13e:	82 30       	cpi	r24, 0x02	; 2
 140:	19 f1       	breq	.+70     	; 0x188 <tick+0xca>
				state = sub_pressed;
			}
			else{
								if(count > 0){
 142:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 146:	88 23       	and	r24, r24
 148:	29 f0       	breq	.+10     	; 0x154 <tick+0x96>
									count = count - 1;
 14a:	81 50       	subi	r24, 0x01	; 1
 14c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
									PORTB = count;
 150:	85 b9       	out	0x05, r24	; 5
 152:	01 c0       	rjmp	.+2      	; 0x156 <tick+0x98>
								}
								
								else{
									PORTB = count;
 154:	15 b8       	out	0x05, r1	; 5
								}
								
				state = subtract;
 156:	85 e0       	ldi	r24, 0x05	; 5
 158:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
 15c:	08 95       	ret
		break;
		
		case(subtract):


				state = wait;
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
			
		break;
 164:	08 95       	ret
		
		case(reset_down):
			if(pinCheck == 0x03){
 166:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <pinCheck>
 16a:	83 30       	cpi	r24, 0x03	; 3
 16c:	69 f0       	breq	.+26     	; 0x188 <tick+0xca>
				state = reset_down;
			}
			else{
				state = reset;
 16e:	87 e0       	ldi	r24, 0x07	; 7
 170:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
 174:	08 95       	ret
			}
			
		break;
		
		case(reset):
			count = 0x00;
 176:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			PORTB = count;
 17a:	15 b8       	out	0x05, r1	; 5
			state = wait;
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <state>
		break;
 182:	08 95       	ret
		
		default:
			state = Init;
 184:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <state>
 188:	08 95       	ret

0000018a <main>:

//Global Variables

int main(void)
{
	DDRA = 0x00; PORTA = 0x03;
 18a:	11 b8       	out	0x01, r1	; 1
 18c:	83 e0       	ldi	r24, 0x03	; 3
 18e:	82 b9       	out	0x02, r24	; 2
	DDRB = 0x0F; PORTB = 0x00;
 190:	8f e0       	ldi	r24, 0x0F	; 15
 192:	84 b9       	out	0x04, r24	; 4
 194:	15 b8       	out	0x05, r1	; 5

	state = Init;	
 196:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <state>
	
	while (1)
	{
		pinCheck = PINA & 0x03;
 19a:	80 b1       	in	r24, 0x00	; 0
 19c:	83 70       	andi	r24, 0x03	; 3
 19e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <pinCheck>
		tick();
 1a2:	8d df       	rcall	.-230    	; 0xbe <tick>
 1a4:	fa cf       	rjmp	.-12     	; 0x19a <main+0x10>

000001a6 <__tablejump2__>:
 1a6:	ee 0f       	add	r30, r30
 1a8:	ff 1f       	adc	r31, r31
 1aa:	00 24       	eor	r0, r0
 1ac:	00 1c       	adc	r0, r0
 1ae:	0b be       	out	0x3b, r0	; 59
 1b0:	07 90       	elpm	r0, Z+
 1b2:	f6 91       	elpm	r31, Z
 1b4:	e0 2d       	mov	r30, r0
 1b6:	09 94       	ijmp

000001b8 <_exit>:
 1b8:	f8 94       	cli

000001ba <__stop_program>:
 1ba:	ff cf       	rjmp	.-2      	; 0x1ba <__stop_program>
