
jfrac001_lab3_part3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000108  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000018c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000848  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000078e  00000000  00000000  00000a34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000282  00000000  00000000  000011c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001444  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000409  00000000  00000000  00001468  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a2  00000000  00000000  00001871  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001913  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	34 c0       	rjmp	.+104    	; 0x104 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:

#include <avr/io.h>

int main(void)
{
	DDRA = 0x00; PORTA = 0x0F; // Configure port A's 8 pins as inputs
  9e:	11 b8       	out	0x01, r1	; 1
  a0:	8f e0       	ldi	r24, 0x0F	; 15
  a2:	82 b9       	out	0x02, r24	; 2
	DDRC = 0xFF; PORTC = 0x00; // Configure port B's 8 pins as outputs
  a4:	8f ef       	ldi	r24, 0xFF	; 255
  a6:	87 b9       	out	0x07, r24	; 7
  a8:	18 b8       	out	0x08, r1	; 8
		
		
		lights = 0x00;
		driver = 0x00;
		
		fuel = PINA & 0x0F; // Mask PINA to only get the bit you are interested in
  aa:	80 b1       	in	r24, 0x00	; 0
  ac:	8f 70       	andi	r24, 0x0F	; 15
		driver = PINA & 0x70;
  ae:	90 b1       	in	r25, 0x00	; 0
  b0:	90 77       	andi	r25, 0x70	; 112
		
		if (fuel == 1 || fuel == 2 ){
  b2:	2f ef       	ldi	r18, 0xFF	; 255
  b4:	28 0f       	add	r18, r24
  b6:	22 30       	cpi	r18, 0x02	; 2
  b8:	a8 f0       	brcs	.+42     	; 0xe4 <main+0x46>
			lights = 0x60;
		}
		
		else if(fuel == 3 || fuel == 4){
  ba:	2d ef       	ldi	r18, 0xFD	; 253
  bc:	28 0f       	add	r18, r24
  be:	22 30       	cpi	r18, 0x02	; 2
  c0:	98 f0       	brcs	.+38     	; 0xe8 <main+0x4a>
			lights = 0x70;
		}
		
		else if(fuel == 5 || fuel == 6){
  c2:	2b ef       	ldi	r18, 0xFB	; 251
  c4:	28 0f       	add	r18, r24
  c6:	22 30       	cpi	r18, 0x02	; 2
  c8:	88 f0       	brcs	.+34     	; 0xec <main+0x4e>
			lights = 0x38;
		}
		
		else if(fuel >= 7 && fuel <= 9){
  ca:	29 ef       	ldi	r18, 0xF9	; 249
  cc:	28 0f       	add	r18, r24
  ce:	23 30       	cpi	r18, 0x03	; 3
  d0:	78 f0       	brcs	.+30     	; 0xf0 <main+0x52>
			lights = 0x3C;
		}
		
		else if(fuel >= 10 && fuel <= 12){
  d2:	26 ef       	ldi	r18, 0xF6	; 246
  d4:	28 0f       	add	r18, r24
  d6:	23 30       	cpi	r18, 0x03	; 3
  d8:	68 f0       	brcs	.+26     	; 0xf4 <main+0x56>
			lights = 0x3E;
		}
		
		else if(fuel >= 13 && fuel <= 15){
  da:	8d 50       	subi	r24, 0x0D	; 13
  dc:	83 30       	cpi	r24, 0x03	; 3
  de:	60 f0       	brcs	.+24     	; 0xf8 <main+0x5a>
			lights = 0x3F;
		}
		
		else{
			lights = 0x00;
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	0b c0       	rjmp	.+22     	; 0xfa <main+0x5c>
		
		fuel = PINA & 0x0F; // Mask PINA to only get the bit you are interested in
		driver = PINA & 0x70;
		
		if (fuel == 1 || fuel == 2 ){
			lights = 0x60;
  e4:	80 e6       	ldi	r24, 0x60	; 96
  e6:	09 c0       	rjmp	.+18     	; 0xfa <main+0x5c>
		}
		
		else if(fuel == 3 || fuel == 4){
			lights = 0x70;
  e8:	80 e7       	ldi	r24, 0x70	; 112
  ea:	07 c0       	rjmp	.+14     	; 0xfa <main+0x5c>
		}
		
		else if(fuel == 5 || fuel == 6){
			lights = 0x38;
  ec:	88 e3       	ldi	r24, 0x38	; 56
  ee:	05 c0       	rjmp	.+10     	; 0xfa <main+0x5c>
		}
		
		else if(fuel >= 7 && fuel <= 9){
			lights = 0x3C;
  f0:	8c e3       	ldi	r24, 0x3C	; 60
  f2:	03 c0       	rjmp	.+6      	; 0xfa <main+0x5c>
		}
		
		else if(fuel >= 10 && fuel <= 12){
			lights = 0x3E;
  f4:	8e e3       	ldi	r24, 0x3E	; 62
  f6:	01 c0       	rjmp	.+2      	; 0xfa <main+0x5c>
		}
		
		else if(fuel >= 13 && fuel <= 15){
			lights = 0x3F;
  f8:	8f e3       	ldi	r24, 0x3F	; 63
		else{
			lights = 0x00;
		}
		
				
		if(driver == 48){
  fa:	90 33       	cpi	r25, 0x30	; 48
  fc:	09 f4       	brne	.+2      	; 0x100 <main+0x62>
			lights = lights | 0x80;		
  fe:	80 68       	ori	r24, 0x80	; 128
		}
		
		PORTC = lights;
 100:	88 b9       	out	0x08, r24	; 8
	}
 102:	d3 cf       	rjmp	.-90     	; 0xaa <main+0xc>

00000104 <_exit>:
 104:	f8 94       	cli

00000106 <__stop_program>:
 106:	ff cf       	rjmp	.-2      	; 0x106 <__stop_program>
