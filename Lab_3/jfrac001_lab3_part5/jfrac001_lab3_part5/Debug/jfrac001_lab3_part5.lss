
jfrac001_lab3_part5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000138  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000168  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000085d  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000799  00000000  00000000  00000a25  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000026a  00000000  00000000  000011be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001428  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000041e  00000000  00000000  0000144c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000090  00000000  00000000  0000186a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000018fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	22 c0       	rjmp	.+68     	; 0xe0 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
{
    /* Replace with your application code */
    while (1) 
    {
		
		DDRD = 0x00; PORTD = 0xFF;
  9e:	7f ef       	ldi	r23, 0xFF	; 255
		DDRB = 0xFE; PORTB = 0x01;
  a0:	6e ef       	ldi	r22, 0xFE	; 254
  a2:	51 e0       	ldi	r21, 0x01	; 1
		
		weight = weight << 1;
		weight = weight | valB0;
		
		if(weight >= 70){
			air_bag = 0x02;
  a4:	e2 e0       	ldi	r30, 0x02	; 2
		}
		
		else if(weight > 5 && weight < 70){
			air_bag = 0x04;	
  a6:	f4 e0       	ldi	r31, 0x04	; 4
{
    /* Replace with your application code */
    while (1) 
    {
		
		DDRD = 0x00; PORTD = 0xFF;
  a8:	1a b8       	out	0x0a, r1	; 10
  aa:	7b b9       	out	0x0b, r23	; 11
		DDRB = 0xFE; PORTB = 0x01;
  ac:	64 b9       	out	0x04, r22	; 4
  ae:	55 b9       	out	0x05, r21	; 5
		
		unsigned char air_bag = 0x00;
		unsigned short weight = 0x00;
		unsigned char valB0 = 0x00;
		
		weight = PIND & 0xFF;
  b0:	89 b1       	in	r24, 0x09	; 9
  b2:	90 e0       	ldi	r25, 0x00	; 0
		valB0 = PINB & 0x01;
  b4:	43 b1       	in	r20, 0x03	; 3
		
		
		weight = weight << 1;
  b6:	88 0f       	add	r24, r24
  b8:	99 1f       	adc	r25, r25
		weight = weight | valB0;
  ba:	24 2f       	mov	r18, r20
  bc:	21 70       	andi	r18, 0x01	; 1
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	82 2b       	or	r24, r18
  c2:	93 2b       	or	r25, r19
		
		if(weight >= 70){
  c4:	86 34       	cpi	r24, 0x46	; 70
  c6:	91 05       	cpc	r25, r1
  c8:	30 f4       	brcc	.+12     	; 0xd6 <main+0x38>
			air_bag = 0x02;
		}
		
		else if(weight > 5 && weight < 70){
  ca:	06 97       	sbiw	r24, 0x06	; 6
  cc:	80 34       	cpi	r24, 0x40	; 64
  ce:	91 05       	cpc	r25, r1
  d0:	20 f0       	brcs	.+8      	; 0xda <main+0x3c>
			air_bag = 0x04;	
		}
		
		else{
			air_bag = 0x00;
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	03 c0       	rjmp	.+6      	; 0xdc <main+0x3e>
		
		weight = weight << 1;
		weight = weight | valB0;
		
		if(weight >= 70){
			air_bag = 0x02;
  d6:	8e 2f       	mov	r24, r30
  d8:	01 c0       	rjmp	.+2      	; 0xdc <main+0x3e>
		}
		
		else if(weight > 5 && weight < 70){
			air_bag = 0x04;	
  da:	8f 2f       	mov	r24, r31
		
		else{
			air_bag = 0x00;
		}
		
		PORTB = air_bag;
  dc:	85 b9       	out	0x05, r24	; 5
    }
  de:	e4 cf       	rjmp	.-56     	; 0xa8 <main+0xa>

000000e0 <_exit>:
  e0:	f8 94       	cli

000000e2 <__stop_program>:
  e2:	ff cf       	rjmp	.-2      	; 0xe2 <__stop_program>
