
jfrac001_lab7_part1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000368  000003fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000368  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800106  00800106  00000402  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000402  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000434  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000474  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c2f  00000000  00000000  000004fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008a6  00000000  00000000  0000112b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000590  00000000  00000000  000019d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000128  00000000  00000000  00001f64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000513  00000000  00000000  0000208c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000027d  00000000  00000000  0000259f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  0000281c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	ac c0       	rjmp	.+344    	; 0x18e <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e6       	ldi	r30, 0x68	; 104
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e0       	ldi	r26, 0x06	; 6
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ae 30       	cpi	r26, 0x0E	; 14
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	22 d1       	rcall	.+580    	; 0x308 <main>
  c4:	4f c1       	rjmp	.+670    	; 0x364 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <delay_ms>:



void TimerISR() {

	TimerFlag = 1;
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	5c f0       	brlt	.+22     	; 0xe4 <delay_ms+0x1c>
  ce:	08 95       	ret
  d0:	00 00       	nop
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	31 09       	sbc	r19, r1
  d6:	e1 f7       	brne	.-8      	; 0xd0 <delay_ms+0x8>
  d8:	4f 5f       	subi	r20, 0xFF	; 255
  da:	5f 4f       	sbci	r21, 0xFF	; 255
  dc:	84 17       	cp	r24, r20
  de:	95 07       	cpc	r25, r21
  e0:	19 f4       	brne	.+6      	; 0xe8 <delay_ms+0x20>
  e2:	08 95       	ret
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	27 e0       	ldi	r18, 0x07	; 7
  ea:	33 e0       	ldi	r19, 0x03	; 3
  ec:	f1 cf       	rjmp	.-30     	; 0xd0 <delay_ms+0x8>

000000ee <LCD_WriteCommand>:
  ee:	5e 98       	cbi	0x0b, 6	; 11
  f0:	88 b9       	out	0x08, r24	; 8
  f2:	5f 9a       	sbi	0x0b, 7	; 11
  f4:	00 00       	nop
  f6:	5f 98       	cbi	0x0b, 7	; 11
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	e5 cf       	rjmp	.-54     	; 0xc8 <delay_ms>
  fe:	08 95       	ret

00000100 <LCD_ClearScreen>:
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	f5 cf       	rjmp	.-22     	; 0xee <LCD_WriteCommand>
 104:	08 95       	ret

00000106 <LCD_Cursor>:
 106:	81 31       	cpi	r24, 0x11	; 17
 108:	18 f4       	brcc	.+6      	; 0x110 <LCD_Cursor+0xa>
 10a:	81 58       	subi	r24, 0x81	; 129
 10c:	f0 cf       	rjmp	.-32     	; 0xee <LCD_WriteCommand>
 10e:	08 95       	ret
 110:	81 55       	subi	r24, 0x51	; 81
 112:	ed cf       	rjmp	.-38     	; 0xee <LCD_WriteCommand>
 114:	08 95       	ret

00000116 <LCD_init>:
 116:	84 e6       	ldi	r24, 0x64	; 100
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	d6 df       	rcall	.-84     	; 0xc8 <delay_ms>
 11c:	88 e3       	ldi	r24, 0x38	; 56
 11e:	e7 df       	rcall	.-50     	; 0xee <LCD_WriteCommand>
 120:	86 e0       	ldi	r24, 0x06	; 6
 122:	e5 df       	rcall	.-54     	; 0xee <LCD_WriteCommand>
 124:	8f e0       	ldi	r24, 0x0F	; 15
 126:	e3 df       	rcall	.-58     	; 0xee <LCD_WriteCommand>
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	e1 df       	rcall	.-62     	; 0xee <LCD_WriteCommand>
 12c:	8a e0       	ldi	r24, 0x0A	; 10
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	cb cf       	rjmp	.-106    	; 0xc8 <delay_ms>
 132:	08 95       	ret

00000134 <LCD_WriteData>:
 134:	5e 9a       	sbi	0x0b, 6	; 11
 136:	88 b9       	out	0x08, r24	; 8
 138:	5f 9a       	sbi	0x0b, 7	; 11
 13a:	00 00       	nop
 13c:	5f 98       	cbi	0x0b, 7	; 11
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	c2 cf       	rjmp	.-124    	; 0xc8 <delay_ms>
 144:	08 95       	ret

00000146 <TimerOn>:
 146:	8b e0       	ldi	r24, 0x0B	; 11
 148:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 14c:	8d e7       	ldi	r24, 0x7D	; 125
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 154:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 158:	82 e0       	ldi	r24, 0x02	; 2
 15a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 15e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 162:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 166:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_avr_timer_M>
 16a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_avr_timer_M+0x1>
 16e:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <_avr_timer_M+0x2>
 172:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <_avr_timer_M+0x3>
 176:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
 17a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
 17e:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <__data_end+0x2>
 182:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <__data_end+0x3>
 186:	8f b7       	in	r24, 0x3f	; 63
 188:	80 68       	ori	r24, 0x80	; 128
 18a:	8f bf       	out	0x3f, r24	; 63
 18c:	08 95       	ret

0000018e <__vector_13>:



// In our approach, the C programmer does not touch this ISR, but rather TimerISR()

ISR(TIMER1_COMPA_vect) {
 18e:	1f 92       	push	r1
 190:	0f 92       	push	r0
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	0f 92       	push	r0
 196:	11 24       	eor	r1, r1
 198:	8f 93       	push	r24
 19a:	9f 93       	push	r25
 19c:	af 93       	push	r26
 19e:	bf 93       	push	r27

	// CPU automatically calls when TCNT1 == OCR1 (every 1 ms per TimerOn settings)

	_avr_timer_cntcurr--; // Count down to 0 rather than up to TOP
 1a0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 1a4:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__data_end+0x1>
 1a8:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <__data_end+0x2>
 1ac:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <__data_end+0x3>
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	a1 09       	sbc	r26, r1
 1b4:	b1 09       	sbc	r27, r1
 1b6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
 1ba:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
 1be:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <__data_end+0x2>
 1c2:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <__data_end+0x3>

	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare
 1c6:	89 2b       	or	r24, r25
 1c8:	8a 2b       	or	r24, r26
 1ca:	8b 2b       	or	r24, r27
 1cc:	99 f4       	brne	.+38     	; 0x1f4 <__vector_13+0x66>



void TimerISR() {

	TimerFlag = 1;
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <TimerFlag>

	if (_avr_timer_cntcurr == 0) { // results in a more efficient compare

		TimerISR(); // Call the ISR that the user uses

		_avr_timer_cntcurr = _avr_timer_M;
 1d4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_avr_timer_M>
 1d8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <_avr_timer_M+0x1>
 1dc:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <_avr_timer_M+0x2>
 1e0:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <_avr_timer_M+0x3>
 1e4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
 1e8:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__data_end+0x1>
 1ec:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <__data_end+0x2>
 1f0:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <__data_end+0x3>

	}

}
 1f4:	bf 91       	pop	r27
 1f6:	af 91       	pop	r26
 1f8:	9f 91       	pop	r25
 1fa:	8f 91       	pop	r24
 1fc:	0f 90       	pop	r0
 1fe:	0f be       	out	0x3f, r0	; 63
 200:	0f 90       	pop	r0
 202:	1f 90       	pop	r1
 204:	18 95       	reti

00000206 <TimerSet>:

// Set TimerISR() to tick every M ms

void TimerSet(unsigned long M) {

	_avr_timer_M = M;
 206:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <_avr_timer_M>
 20a:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <_avr_timer_M+0x1>
 20e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_avr_timer_M+0x2>
 212:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <_avr_timer_M+0x3>

	_avr_timer_cntcurr = _avr_timer_M;
 216:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <__data_end>
 21a:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <__data_end+0x1>
 21e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end+0x2>
 222:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_end+0x3>
 226:	08 95       	ret

00000228 <tick>:
unsigned char count;

//Functions
void tick(){
	
	switch(state)	{		//State Transitions
 228:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <state>
 22c:	82 30       	cpi	r24, 0x02	; 2
 22e:	71 f1       	breq	.+92     	; 0x28c <tick+0x64>
 230:	28 f4       	brcc	.+10     	; 0x23c <tick+0x14>
 232:	88 23       	and	r24, r24
 234:	49 f0       	breq	.+18     	; 0x248 <tick+0x20>
 236:	81 30       	cpi	r24, 0x01	; 1
 238:	79 f0       	breq	.+30     	; 0x258 <tick+0x30>
 23a:	62 c0       	rjmp	.+196    	; 0x300 <tick+0xd8>
 23c:	83 30       	cpi	r24, 0x03	; 3
 23e:	d9 f1       	breq	.+118    	; 0x2b6 <tick+0x8e>
 240:	84 30       	cpi	r24, 0x04	; 4
 242:	09 f4       	brne	.+2      	; 0x246 <tick+0x1e>
 244:	4d c0       	rjmp	.+154    	; 0x2e0 <tick+0xb8>
 246:	5c c0       	rjmp	.+184    	; 0x300 <tick+0xd8>
		
		case(Init):
			state = wait;
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <state>
			PORTB = state;
 24e:	85 b9       	out	0x05, r24	; 5
			count = 0x07;
 250:	87 e0       	ldi	r24, 0x07	; 7
 252:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <count>
		break;
 256:	08 95       	ret
		
		case(wait):
		
			if(pinCheck == 0x01){
 258:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <pinCheck>
 25c:	81 30       	cpi	r24, 0x01	; 1
 25e:	29 f4       	brne	.+10     	; 0x26a <tick+0x42>
				state = add_pressed;
 260:	82 e0       	ldi	r24, 0x02	; 2
 262:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <state>
				PORTB = state;
 266:	85 b9       	out	0x05, r24	; 5
 268:	08 95       	ret
			}
			
			else if(pinCheck == 0x02){
 26a:	82 30       	cpi	r24, 0x02	; 2
 26c:	29 f4       	brne	.+10     	; 0x278 <tick+0x50>
				state = sub_pressed;
 26e:	83 e0       	ldi	r24, 0x03	; 3
 270:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <state>
				PORTB = state;
 274:	85 b9       	out	0x05, r24	; 5
 276:	08 95       	ret
			}
			
			else if(pinCheck == 0x03){
 278:	83 30       	cpi	r24, 0x03	; 3
 27a:	29 f4       	brne	.+10     	; 0x286 <tick+0x5e>
				state = reset;
 27c:	84 e0       	ldi	r24, 0x04	; 4
 27e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <state>
				PORTB = state;
 282:	85 b9       	out	0x05, r24	; 5
 284:	08 95       	ret
			}
			
			else{
				state = wait;
				PORTB = state;
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	85 b9       	out	0x05, r24	; 5
 28a:	08 95       	ret
			}
		
		break;
		
		case(add_pressed):
			if(count < 9){
 28c:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <count>
 290:	89 30       	cpi	r24, 0x09	; 9
 292:	18 f4       	brcc	.+6      	; 0x29a <tick+0x72>
				count = count + 1;
 294:	8f 5f       	subi	r24, 0xFF	; 255
 296:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <count>
			}
		
			if(pinCheck == 0x01){
 29a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <pinCheck>
 29e:	81 30       	cpi	r24, 0x01	; 1
 2a0:	29 f4       	brne	.+10     	; 0x2ac <tick+0x84>
				state = add_pressed;
 2a2:	82 e0       	ldi	r24, 0x02	; 2
 2a4:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <state>
				PORTB = state;
 2a8:	85 b9       	out	0x05, r24	; 5
 2aa:	08 95       	ret
			}
			
			else{
				state = wait;
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <state>
				PORTB = state;
 2b2:	85 b9       	out	0x05, r24	; 5
 2b4:	08 95       	ret
		
		break;
		
		case(sub_pressed):
		
			if(count > 0){
 2b6:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <count>
 2ba:	88 23       	and	r24, r24
 2bc:	19 f0       	breq	.+6      	; 0x2c4 <tick+0x9c>
				count = count - 1;
 2be:	81 50       	subi	r24, 0x01	; 1
 2c0:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <count>
			}
			
			if(pinCheck == 0x02){
 2c4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <pinCheck>
 2c8:	82 30       	cpi	r24, 0x02	; 2
 2ca:	29 f4       	brne	.+10     	; 0x2d6 <tick+0xae>
				state = sub_pressed;
 2cc:	83 e0       	ldi	r24, 0x03	; 3
 2ce:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <state>
				PORTB = state;
 2d2:	85 b9       	out	0x05, r24	; 5
 2d4:	08 95       	ret
			}
			else{
				state = wait;
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <state>
				PORTB = state;
 2dc:	85 b9       	out	0x05, r24	; 5
 2de:	08 95       	ret
			}
			
		break;
		
		case(reset):
			count = 0;
 2e0:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <count>
			if(pinCheck == 0x03){
 2e4:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <pinCheck>
 2e8:	83 30       	cpi	r24, 0x03	; 3
 2ea:	29 f4       	brne	.+10     	; 0x2f6 <tick+0xce>
				state = reset;
 2ec:	84 e0       	ldi	r24, 0x04	; 4
 2ee:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <state>
				PORTB = state;
 2f2:	85 b9       	out	0x05, r24	; 5
 2f4:	08 95       	ret
			}
			else{
				state = wait;
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <state>
				PORTB = state;
 2fc:	85 b9       	out	0x05, r24	; 5
 2fe:	08 95       	ret
			}
			
		break;
		
		default:
			state = Init;
 300:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <state>
			PORTB = state;
 304:	15 b8       	out	0x05, r1	; 5
 306:	08 95       	ret

00000308 <main>:


int main(void)

{
	DDRA = 0x00; PORTA = 0x03;
 308:	11 b8       	out	0x01, r1	; 1
 30a:	83 e0       	ldi	r24, 0x03	; 3
 30c:	82 b9       	out	0x02, r24	; 2
	DDRB = 0x0E; PORTB = 0x00;
 30e:	8e e0       	ldi	r24, 0x0E	; 14
 310:	84 b9       	out	0x04, r24	; 4
 312:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xFF; PORTC = 0x00;
 314:	8f ef       	ldi	r24, 0xFF	; 255
 316:	87 b9       	out	0x07, r24	; 7
 318:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xC0; PORTD = 0x00;
 31a:	80 ec       	ldi	r24, 0xC0	; 192
 31c:	8a b9       	out	0x0a, r24	; 10
 31e:	1b b8       	out	0x0b, r1	; 11
	
	state = Init;
 320:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <state>
	LCD_init();
 324:	f8 de       	rcall	.-528    	; 0x116 <LCD_init>
	TimerSet(time_count);
 326:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 32a:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	90 e0       	ldi	r25, 0x00	; 0
	TimerOn();
 332:	69 df       	rcall	.-302    	; 0x206 <TimerSet>

	while (1)
	{
		
		
		tick();
 334:	08 df       	rcall	.-496    	; 0x146 <TimerOn>
		
		LCD_ClearScreen();
 336:	78 df       	rcall	.-272    	; 0x228 <tick>
 338:	e3 de       	rcall	.-570    	; 0x100 <LCD_ClearScreen>
		LCD_Cursor(1);	
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	e4 de       	rcall	.-568    	; 0x106 <LCD_Cursor>
		LCD_WriteData(count + '0');
 33e:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <count>
 342:	80 5d       	subi	r24, 0xD0	; 208
 344:	f7 de       	rcall	.-530    	; 0x134 <LCD_WriteData>
 346:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <TimerFlag>
		
		while(!TimerFlag){
 34a:	81 11       	cpse	r24, r1
 34c:	08 c0       	rjmp	.+16     	; 0x35e <main+0x56>
 34e:	80 b1       	in	r24, 0x00	; 0
			pinCheck = PINA & 0x03;
 350:	83 70       	andi	r24, 0x03	; 3
 352:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <pinCheck>
 356:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <TimerFlag>
		
		LCD_ClearScreen();
		LCD_Cursor(1);	
		LCD_WriteData(count + '0');
		
		while(!TimerFlag){
 35a:	88 23       	and	r24, r24
 35c:	c1 f3       	breq	.-16     	; 0x34e <main+0x46>
 35e:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <TimerFlag>
			pinCheck = PINA & 0x03;
		}
		
		TimerFlag = 0;
 362:	e9 cf       	rjmp	.-46     	; 0x336 <main+0x2e>

00000364 <_exit>:

	}
 364:	f8 94       	cli

00000366 <__stop_program>:
 366:	ff cf       	rjmp	.-2      	; 0x366 <__stop_program>
